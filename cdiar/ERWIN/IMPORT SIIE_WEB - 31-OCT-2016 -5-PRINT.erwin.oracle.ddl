
CREATE TABLE FB_PROGESCMEDIOPAGO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012407 NOT NULL ,
	N_IDMEDIOPAGO        NUMBER NULL ,
	N_IDPROGRAMAESCUELA  NUMBER NULL ,
	N_IDESCUELA          NUMBER NULL ,
	N_IDPROGRAMA         NUMBER NULL ,
	D_FECHA              TIMESTAMP(0) NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	S_IDNUMMEDIOPAGO     VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM FB_PROGESCMEDIOPAGO
	 FOR FB_PROGESCMEDIOPAGO;




CREATE SYNONYM FB_PROGESCMEDIOPAGO
	 FOR FB_PROGESCMEDIOPAGO;



CREATE UNIQUE INDEX PK_PROGESCMEDIOPAGO ON FB_PROGESCMEDIOPAGO
(N_ID   ASC);



ALTER TABLE FB_PROGESCMEDIOPAGO
	ADD CONSTRAINT  PK_PROGESCMEDIOPAGO PRIMARY KEY (N_ID);



CREATE TABLE FB_PROGRAMAESCUELA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012408 NOT NULL ,
	N_IDPROGRAMAESCUELA  NUMBER NULL ,
	N_IDESCUELA          NUMBER NULL ,
	N_IDPROGRAMA         NUMBER NULL ,
	N_IDMOVIMIENTO       NUMBER NULL ,
	D_FECHA              TIMESTAMP(0) NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	S_TIPOMOV            VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM FB_PROGRAMAESCUELA
	 FOR FB_PROGRAMAESCUELA;




CREATE SYNONYM FB_PROGRAMAESCUELA
	 FOR FB_PROGRAMAESCUELA;



CREATE UNIQUE INDEX PK_PROGRAESC ON FB_PROGRAMAESCUELA
(N_ID   ASC);



ALTER TABLE FB_PROGRAMAESCUELA
	ADD CONSTRAINT  PK_PROGRAESC PRIMARY KEY (N_ID);



CREATE TABLE FB_PROGRAMAESCUELAMONTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012409 NOT NULL ,
	N_IDPROGRAMAESCUELA  NUMBER NULL ,
	N_MONTO              NUMBER(18,6) NULL ,
	D_FECHAREGISTRO      TIMESTAMP(0) NULL ,
	D_FECHADISPERSION    TIMESTAMP(0) NULL ,
	N_IDUSUARIO          NUMBER NULL 
);



CREATE PUBLIC SYNONYM FB_PROGRAMAESCUELAMONTO
	 FOR FB_PROGRAMAESCUELAMONTO;




CREATE SYNONYM FB_PROGRAMAESCUELAMONTO
	 FOR FB_PROGRAMAESCUELAMONTO;



CREATE UNIQUE INDEX PK_LOG_PROGMONT ON FB_PROGRAMAESCUELAMONTO
(N_ID   ASC);



ALTER TABLE FB_PROGRAMAESCUELAMONTO
	ADD CONSTRAINT  PK_LOG_PROGMONT PRIMARY KEY (N_ID);



CREATE TABLE FC_BIEN
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012410 NOT NULL ,
	S_CLAVE              VARCHAR2(100 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(300 BYTE) NULL ,
	N_ESTATUS            INTEGER NULL ,
	S_ESPECIFICACION     VARCHAR2(4000 BYTE) NULL 
);



CREATE PUBLIC SYNONYM FC_BIEN
	 FOR FC_BIEN;




CREATE SYNONYM FC_BIEN
	 FOR FC_BIEN;



CREATE UNIQUE INDEX PK_FCBIEN ON FC_BIEN
(N_ID   ASC);



ALTER TABLE FC_BIEN
	ADD CONSTRAINT  PK_FCBIEN PRIMARY KEY (N_ID);



CREATE TABLE FC_MEDIOPAGO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012411 NOT NULL ,
	S_CLAVE              VARCHAR2(100 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(300 BYTE) NULL 
);



CREATE PUBLIC SYNONYM FC_MEDIOPAGO
	 FOR FC_MEDIOPAGO;




CREATE SYNONYM FC_MEDIOPAGO
	 FOR FC_MEDIOPAGO;



CREATE UNIQUE INDEX PK_MEDIOPAGO ON FC_MEDIOPAGO
(N_ID   ASC);



ALTER TABLE FC_MEDIOPAGO
	ADD CONSTRAINT  PK_MEDIOPAGO PRIMARY KEY (N_ID);



CREATE TABLE FC_PROGRAMA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012412 NOT NULL ,
	S_CLAVE              VARCHAR2(100 BYTE) NULL ,
	S_NOMBRE             VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            INTEGER NULL ,
	S_REFERENCIA         VARCHAR2(200 BYTE) NULL ,
	N_APLICATODAS        INTEGER NULL ,
	N_IDMEDIOPAGOPREFERENCIAL NUMBER NULL 
);



CREATE PUBLIC SYNONYM FC_PROGRAMA
	 FOR FC_PROGRAMA;




CREATE SYNONYM FC_PROGRAMA
	 FOR FC_PROGRAMA;



CREATE UNIQUE INDEX PK_PROGRA ON FC_PROGRAMA
(N_ID   ASC);



ALTER TABLE FC_PROGRAMA
	ADD CONSTRAINT  PK_PROGRA PRIMARY KEY (N_ID);



CREATE TABLE FR_PROG_COMUNICADO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012413 NOT NULL ,
	N_IDCOMUNICADO       NUMBER NULL ,
	N_IDPROGRAMA         NUMBER CONSTRAINT SYS_C0012414 NOT NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	D_FECHARELACION      DATE NULL 
);



CREATE PUBLIC SYNONYM FR_PROG_COMUNICADO
	 FOR FR_PROG_COMUNICADO;




CREATE SYNONYM FR_PROG_COMUNICADO
	 FOR FR_PROG_COMUNICADO;



CREATE UNIQUE INDEX PK_FR_PROG_COM ON FR_PROG_COMUNICADO
(N_ID   ASC);



ALTER TABLE FR_PROG_COMUNICADO
	ADD CONSTRAINT  PK_FR_PROG_COM PRIMARY KEY (N_ID);



CREATE TABLE FR_PROGRAMABIEN
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012415 NOT NULL ,
	N_IDBIEN             NUMBER NULL ,
	N_IDPROGRAMA         NUMBER NULL 
);



CREATE PUBLIC SYNONYM FR_PROGRAMABIEN
	 FOR FR_PROGRAMABIEN;




CREATE SYNONYM FR_PROGRAMABIEN
	 FOR FR_PROGRAMABIEN;



CREATE UNIQUE INDEX PK_PROGRABIEN ON FR_PROGRAMABIEN
(N_ID   ASC);



ALTER TABLE FR_PROGRAMABIEN
	ADD CONSTRAINT  PK_PROGRABIEN PRIMARY KEY (N_ID);



CREATE TABLE FW_PROGRAMAESCUELA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012418 NOT NULL ,
	N_IDPROGRAMA         NUMBER NULL ,
	N_IDMEDIOPAGO        NUMBER NULL ,
	N_IDESCUELA          NUMBER NULL ,
	D_FECHADISPERSION    TIMESTAMP(0) NULL ,
	N_MONTO              NUMBER(18,6) NULL ,
	N_ESTATUS            INTEGER NULL ,
	S_IDNUMMEDIOPAGO     VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM FW_PROGRAMAESCUELA
	 FOR FW_PROGRAMAESCUELA;




CREATE SYNONYM FW_PROGRAMAESCUELA
	 FOR FW_PROGRAMAESCUELA;



CREATE UNIQUE INDEX PK_PROGESC ON FW_PROGRAMAESCUELA
(N_ID   ASC);



ALTER TABLE FW_PROGRAMAESCUELA
	ADD CONSTRAINT  PK_PROGESC PRIMARY KEY (N_ID);



CREATE TABLE IB_ARCHIVOSEQUIVALENCIAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011095 NOT NULL ,
	N_IDNIVELEDUCATIVO   INTEGER CONSTRAINT SYS_C0011096 NOT NULL ,
	N_IDCATALOGOS        NUMBER CONSTRAINT SYS_C0011097 NOT NULL ,
	N_IDTABLASBUDA       NUMBER CONSTRAINT SYS_C0011098 NOT NULL ,
	N_IDCAMPOBUDA        NUMBER CONSTRAINT SYS_C0011099 NOT NULL ,
	N_IDTABLASSAE        NUMBER CONSTRAINT SYS_C0011100 NOT NULL ,
	N_IDCAMPOSAE         NUMBER CONSTRAINT SYS_C0011101 NOT NULL ,
	N_IDACCION           NUMBER CONSTRAINT SYS_C0011102 NOT NULL ,
	N_IDEQUIVALENCIA     NUMBER CONSTRAINT SYS_C0011103 NOT NULL ,
	N_IDUSER             NUMBER CONSTRAINT SYS_C0011104 NOT NULL ,
	S_VALORBUDAORIGINAL  VARCHAR2(4000 BYTE) CONSTRAINT SYS_C0011105 NOT NULL ,
	S_VALORBUDAFINAL     VARCHAR2(4000 BYTE) NULL ,
	S_VALORSAEORIGINAL   VARCHAR2(4000 BYTE) CONSTRAINT SYS_C0011106 NOT NULL ,
	S_VALORSAEFINAL      VARCHAR2(4000 BYTE) NULL ,
	D_FECHACAMBIO        TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM IB_ARCHIVOSEQUIVALENCIAS
	 FOR IB_ARCHIVOSEQUIVALENCIAS;




CREATE SYNONYM IB_ARCHIVOSEQUIVALENCIAS
	 FOR IB_ARCHIVOSEQUIVALENCIAS;



CREATE UNIQUE INDEX IB_ARCHIVOSEQUIVALENCIAS_PK ON IB_ARCHIVOSEQUIVALENCIAS
(N_ID   ASC);



ALTER TABLE IB_ARCHIVOSEQUIVALENCIAS
	ADD CONSTRAINT  IB_ARCHIVOSEQUIVALENCIAS_PK PRIMARY KEY (N_ID);



CREATE TABLE IB_ARCHIVOSVALIDADOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011127 NOT NULL ,
	N_IDARCHIVOSBUDA     NUMBER CONSTRAINT SYS_C0011128 NOT NULL ,
	N_IDBLOQUE           NUMBER CONSTRAINT SYS_C0011129 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011130 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011131 NOT NULL ,
	N_IDUSER             NUMBER CONSTRAINT SYS_C0011132 NOT NULL ,
	N_TOTALREGISTROS     NUMBER CONSTRAINT SYS_C0011133 NOT NULL ,
	N_TOTALREGISTROSBIEN NUMBER CONSTRAINT SYS_C0011134 NOT NULL ,
	N_TOTALREGISTROSERROR NUMBER CONSTRAINT SYS_C0011135 NOT NULL ,
	D_FECHAVALIDACION    TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM IB_ARCHIVOSVALIDADOS
	 FOR IB_ARCHIVOSVALIDADOS;




CREATE SYNONYM IB_ARCHIVOSVALIDADOS
	 FOR IB_ARCHIVOSVALIDADOS;



CREATE UNIQUE INDEX IB_ARCHIVOSVALIDADOS_PK ON IB_ARCHIVOSVALIDADOS
(N_ID   ASC);



ALTER TABLE IB_ARCHIVOSVALIDADOS
	ADD CONSTRAINT  IB_ARCHIVOSVALIDADOS_PK PRIMARY KEY (N_ID);



CREATE TABLE IB_CARGA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011136 NOT NULL ,
	D_FECHA              DATE CONSTRAINT SYS_C0011137 NOT NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0011138 NOT NULL ,
	N_ESCORRECTACARGA    NUMBER NULL ,
	ES_VERIF             NUMBER(1) DEFAULT  0  CONSTRAINT SYS_C0011139 NOT NULL ,
	D_FECHAVERIF         DATE NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA
	 FOR IB_CARGA;




CREATE SYNONYM IB_CARGA
	 FOR IB_CARGA;



CREATE UNIQUE INDEX IB_CARGA_PK ON IB_CARGA
(N_ID   ASC);



ALTER TABLE IB_CARGA
	ADD CONSTRAINT  IB_CARGA_PK PRIMARY KEY (N_ID);



CREATE TABLE IB_CARGA_ARCHZIP
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011145 NOT NULL ,
	N_ID_CARGA           NUMBER CONSTRAINT SYS_C0011146 NOT NULL ,
	S_NOMARCHIVO         VARCHAR2(100 BYTE) CONSTRAINT SYS_C0011147 NOT NULL ,
	D_FECHACARGA         TIMESTAMP(0) NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA_ARCHZIP
	 FOR IB_CARGA_ARCHZIP;




CREATE SYNONYM IB_CARGA_ARCHZIP
	 FOR IB_CARGA_ARCHZIP;



CREATE UNIQUE INDEX IB_CARGA_ARCHZIP_PK ON IB_CARGA_ARCHZIP
(N_ID   ASC);



ALTER TABLE IB_CARGA_ARCHZIP
	ADD CONSTRAINT  IB_CARGA_ARCHZIP_PK PRIMARY KEY (N_ID);



CREATE TABLE IB_CARGA_EXCEPCIONES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011153 NOT NULL ,
	N_IDARCHCARGA        NUMBER NULL ,
	N_IDCARGA            NUMBER CONSTRAINT SYS_C0011154 NOT NULL ,
	N_IDERROR            NUMBER CONSTRAINT SYS_C0011155 NOT NULL ,
	S_VALORLLAVE         VARCHAR2(100 BYTE) CONSTRAINT SYS_C0011156 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(4000 BYTE) NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA_EXCEPCIONES
	 FOR IB_CARGA_EXCEPCIONES;




CREATE SYNONYM IB_CARGA_EXCEPCIONES
	 FOR IB_CARGA_EXCEPCIONES;



CREATE UNIQUE INDEX PK285 ON IB_CARGA_EXCEPCIONES
(N_ID   ASC);



ALTER TABLE IB_CARGA_EXCEPCIONES
	ADD CONSTRAINT  PK285 PRIMARY KEY (N_ID);



CREATE TABLE IB_CARGA_EXCREG_ARC
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011157 NOT NULL ,
	N_IDCARGA            NUMBER CONSTRAINT SYS_C0011158 NOT NULL ,
	N_ID_ARCHIVOSCARGA   NUMBER CONSTRAINT SYS_C0011159 NOT NULL ,
	N_IDREGISTRO         NUMBER CONSTRAINT SYS_C0011160 NOT NULL ,
	N_IDCATALOGOS        NUMBER CONSTRAINT SYS_C0011161 NOT NULL ,
	N_IDTABLASBUDA       NUMBER CONSTRAINT SYS_C0011162 NOT NULL ,
	N_IDCAMPOBUDA        NUMBER CONSTRAINT SYS_C0011163 NOT NULL ,
	N_IDTABLASSAE        NUMBER CONSTRAINT SYS_C0011164 NOT NULL ,
	N_IDCAMPOSAE         NUMBER CONSTRAINT SYS_C0011165 NOT NULL ,
	S_CCT                VARCHAR2(20 BYTE) CONSTRAINT SYS_C0011166 NOT NULL ,
	S_NOMBRECATALOGO     VARCHAR2(50 BYTE) NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011167 NOT NULL ,
	S_NOMBRETABLA        VARCHAR2(50 BYTE) NULL ,
	S_NOMBRECAMPO        VARCHAR2(50 BYTE) NULL ,
	S_NOMBRETABLABUDA    VARCHAR2(50 BYTE) NULL ,
	S_NOMBRECAMPOBUDA    VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCIONEXCEPCION VARCHAR2(4000 BYTE) NULL ,
	S_VALORSAE           VARCHAR2(4000 BYTE) NULL ,
	S_VALORBUDA          VARCHAR2(4000 BYTE) NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA_EXCREG_ARC
	 FOR IB_CARGA_EXCREG_ARC;




CREATE SYNONYM IB_CARGA_EXCREG_ARC
	 FOR IB_CARGA_EXCREG_ARC;



CREATE UNIQUE INDEX IB_CARGA_EXCREG_ARC_PK ON IB_CARGA_EXCREG_ARC
(N_ID   ASC,N_ID_ARCHIVOSCARGA   ASC,N_IDREGISTRO   ASC,N_IDCATALOGOS   ASC,N_IDTABLASBUDA   ASC,N_IDCAMPOBUDA   ASC,N_IDTABLASSAE   ASC,N_IDCAMPOSAE   ASC);



ALTER TABLE IB_CARGA_EXCREG_ARC
	ADD CONSTRAINT  IB_CARGA_EXCREG_ARC_PK PRIMARY KEY (N_ID,N_ID_ARCHIVOSCARGA,N_IDREGISTRO,N_IDCATALOGOS,N_IDTABLASBUDA,N_IDCAMPOBUDA,N_IDTABLASSAE,N_IDCAMPOSAE);



CREATE TABLE IB_CARGA_PERSONAL_CORREO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011182 NOT NULL ,
	N_ID_CARGA           NUMBER CONSTRAINT SYS_C0011183 NOT NULL ,
	S_CCT                VARCHAR2(100 BYTE) CONSTRAINT SYS_C0011184 NOT NULL ,
	N_EMAILENVIADO       NUMBER(1) DEFAULT  0  NULL ,
	D_FECHAENVIO         TIMESTAMP(0) NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA_PERSONAL_CORREO
	 FOR IB_CARGA_PERSONAL_CORREO;




CREATE SYNONYM IB_CARGA_PERSONAL_CORREO
	 FOR IB_CARGA_PERSONAL_CORREO;



CREATE UNIQUE INDEX PK299 ON IB_CARGA_PERSONAL_CORREO
(N_ID   ASC);



ALTER TABLE IB_CARGA_PERSONAL_CORREO
	ADD CONSTRAINT  PK299 PRIMARY KEY (N_ID);



CREATE TABLE IB_CARGA_PRI_ARCHSIIEWEB
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011187 NOT NULL ,
	N_ID_CARGA           NUMBER CONSTRAINT SYS_C0011188 NOT NULL ,
	S_NOMBREARCHIVO      VARCHAR2(100 BYTE) NULL ,
	D_FECHACARGA         TIMESTAMP(0) NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA_PRI_ARCHSIIEWEB
	 FOR IB_CARGA_PRI_ARCHSIIEWEB;




CREATE SYNONYM IB_CARGA_PRI_ARCHSIIEWEB
	 FOR IB_CARGA_PRI_ARCHSIIEWEB;



CREATE UNIQUE INDEX IB_CARGA_PRE_SIIEWEB_PK_3 ON IB_CARGA_PRI_ARCHSIIEWEB
(N_ID   ASC);



ALTER TABLE IB_CARGA_PRI_ARCHSIIEWEB
	ADD CONSTRAINT  IB_CARGA_PRE_SIIEWEB_PK_3 PRIMARY KEY (N_ID);



CREATE TABLE IB_CARGA_PROCESAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011189 NOT NULL ,
	N_ID_CARGA           NUMBER CONSTRAINT SYS_C0011190 NOT NULL ,
	D_FECHAPROCESO       TIMESTAMP(0) CONSTRAINT SYS_C0011191 NOT NULL ,
	N_ID_CARGA_PASO      NUMBER CONSTRAINT SYS_C0011192 NOT NULL ,
	S_CCT                VARCHAR2(50 BYTE) NULL 
);



CREATE PUBLIC SYNONYM IB_CARGA_PROCESAR
	 FOR IB_CARGA_PROCESAR;




CREATE SYNONYM IB_CARGA_PROCESAR
	 FOR IB_CARGA_PROCESAR;



CREATE UNIQUE INDEX IB_CARGA_PROCESAR_PK ON IB_CARGA_PROCESAR
(N_ID   ASC);



ALTER TABLE IB_CARGA_PROCESAR
	ADD CONSTRAINT  IB_CARGA_PROCESAR_PK PRIMARY KEY (N_ID);



CREATE TABLE SC_ACCIONES_MEJORA
(
	N_ACCION             NUMBER CONSTRAINT SYS_C0012860 NOT NULL ,
	S_ACCION_MEJORA      VARCHAR2(500 BYTE) NULL 
);



CREATE PUBLIC SYNONYM SC_ACCIONES_MEJORA
	 FOR SC_ACCIONES_MEJORA;




CREATE SYNONYM SC_ACCIONES_MEJORA
	 FOR SC_ACCIONES_MEJORA;



CREATE UNIQUE INDEX TC_ACCIONES_MEJORA_PK ON SC_ACCIONES_MEJORA
(N_ACCION   ASC);



ALTER TABLE SC_ACCIONES_MEJORA
	ADD CONSTRAINT  TC_ACCIONES_MEJORA_PK PRIMARY KEY (N_ACCION);



CREATE TABLE SC_DIMENSIONES
(
	N_DIMENSION          NUMBER(19) CONSTRAINT SYS_C0012870 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) CONSTRAINT SYS_C0012871 NOT NULL ,
	N_PARENT             NUMBER NULL 
);



CREATE PUBLIC SYNONYM SC_DIMENSIONES
	 FOR SC_DIMENSIONES;




CREATE SYNONYM SC_DIMENSIONES
	 FOR SC_DIMENSIONES;



CREATE UNIQUE INDEX SC_DIMENSIONES_PK ON SC_DIMENSIONES
(N_DIMENSION   ASC);



ALTER TABLE SC_DIMENSIONES
	ADD CONSTRAINT  SC_DIMENSIONES_PK PRIMARY KEY (N_DIMENSION);



CREATE TABLE SC_ESTATUSVISITA
(
	N_ESTATUSVISITA      NUMBER(19) CONSTRAINT SYS_C0012872 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) CONSTRAINT SYS_C0012873 NOT NULL 
);



CREATE PUBLIC SYNONYM SC_ESTATUSVISITA
	 FOR SC_ESTATUSVISITA;




CREATE SYNONYM SC_ESTATUSVISITA
	 FOR SC_ESTATUSVISITA;



CREATE UNIQUE INDEX SC_ESTATUSVISITA_PK ON SC_ESTATUSVISITA
(N_ESTATUSVISITA   ASC);



ALTER TABLE SC_ESTATUSVISITA
	ADD CONSTRAINT  SC_ESTATUSVISITA_PK PRIMARY KEY (N_ESTATUSVISITA);



CREATE TABLE SC_FORMATOS
(
	N_IDFORMATO          NUMBER CONSTRAINT SYS_C0013193 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(4000 BYTE) NULL ,
	N_DIMENSION          NUMBER NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	S_FORMATO            CLOB NULL ,
	N_TIPOVISITA         NUMBER NULL 
);



CREATE PUBLIC SYNONYM SC_FORMATOS
	 FOR SC_FORMATOS;




CREATE SYNONYM SC_FORMATOS
	 FOR SC_FORMATOS;



CREATE UNIQUE INDEX SC_FORMATOS_PK ON SC_FORMATOS
(N_IDFORMATO   ASC);



ALTER TABLE SC_FORMATOS
	ADD CONSTRAINT  SC_FORMATOS_PK PRIMARY KEY (N_IDFORMATO);



CREATE TABLE SC_INTERVENCIONES
(
	N_INTERVENCION       NUMBER(19) CONSTRAINT SYS_C0012878 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) CONSTRAINT SYS_C0012879 NOT NULL 
);



CREATE PUBLIC SYNONYM SC_INTERVENCIONES
	 FOR SC_INTERVENCIONES;




CREATE SYNONYM SC_INTERVENCIONES
	 FOR SC_INTERVENCIONES;



CREATE UNIQUE INDEX SC_INTERVENCIONES_PK ON SC_INTERVENCIONES
(N_INTERVENCION   ASC);



ALTER TABLE SC_INTERVENCIONES
	ADD CONSTRAINT  SC_INTERVENCIONES_PK PRIMARY KEY (N_INTERVENCION);



CREATE TABLE SC_PROPOSITOS
(
	N_PROPOSITO          NUMBER(19) CONSTRAINT SYS_C0012892 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) CONSTRAINT SYS_C0012893 NOT NULL ,
	N_DIMENSION          NUMBER NULL 
);



CREATE PUBLIC SYNONYM SC_PROPOSITOS
	 FOR SC_PROPOSITOS;




CREATE SYNONYM SC_PROPOSITOS
	 FOR SC_PROPOSITOS;



CREATE UNIQUE INDEX SC_PROPOSITOS_PK ON SC_PROPOSITOS
(N_PROPOSITO   ASC);



ALTER TABLE SC_PROPOSITOS
	ADD CONSTRAINT  SC_PROPOSITOS_PK PRIMARY KEY (N_PROPOSITO);



CREATE TABLE SC_TIPOVISITA
(
	N_TIPOVISITA         NUMBER(19) CONSTRAINT SYS_C0012898 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) CONSTRAINT SYS_C0012899 NOT NULL 
);



CREATE PUBLIC SYNONYM SC_TIPOVISITA
	 FOR SC_TIPOVISITA;




CREATE SYNONYM SC_TIPOVISITA
	 FOR SC_TIPOVISITA;



CREATE UNIQUE INDEX SC_TIPOVISITA_PK ON SC_TIPOVISITA
(N_TIPOVISITA   ASC);



ALTER TABLE SC_TIPOVISITA
	ADD CONSTRAINT  SC_TIPOVISITA_PK PRIMARY KEY (N_TIPOVISITA);



CREATE TABLE SR_INTERVENCIONES_VISITAS
(
	N_DIMENSION          NUMBER NULL ,
	N_INTERVENCION       NUMBER NULL ,
	N_PROPOSITO          NUMBER NULL ,
	N_VISITA             NUMBER CONSTRAINT SYS_C0012904 NOT NULL ,
	N_RESPONSABLE        NUMBER NULL ,
	N_REALIZADO          NUMBER(1) NULL ,
	S_ACCIONMEJORA       VARCHAR2(4000 BYTE) NULL ,
	D_FECHACOMPROMISO    DATE NULL ,
	N_INTERVENCION_VISITA NUMBER CONSTRAINT SYS_C0012905 NOT NULL ,
	S_ABIERTA            VARCHAR2(4000 BYTE) NULL ,
	N_FORMATO            NUMBER NULL 
);



CREATE PUBLIC SYNONYM SR_INTERVENCIONES_VISITAS
	 FOR SR_INTERVENCIONES_VISITAS;




CREATE SYNONYM SR_INTERVENCIONES_VISITAS
	 FOR SR_INTERVENCIONES_VISITAS;



CREATE UNIQUE INDEX SR_INTERVENCIONES_VISITAS_PK ON SR_INTERVENCIONES_VISITAS
(N_INTERVENCION_VISITA   ASC);



ALTER TABLE SR_INTERVENCIONES_VISITAS
	ADD CONSTRAINT  SR_INTERVENCIONES_VISITAS_PK PRIMARY KEY (N_INTERVENCION_VISITA);



CREATE TABLE SR_PROPOSITO_ACCIONES
(
	N_PROPOSITO_ACCIONES NUMBER CONSTRAINT SYS_C0012909 NOT NULL ,
	N_ID_PROPOSITO       NUMBER NULL ,
	N_ID_ACCION          NUMBER NULL ,
	S_OTRA_ACCION        VARCHAR2(500 BYTE) NULL ,
	S_FECHA              VARCHAR2(200 BYTE) NULL ,
	N_ID_RESPONSABLE     NUMBER NULL ,
	N_STATUS             NUMBER NULL ,
	D_FECHA_CIERRE       DATE NULL 
);



CREATE PUBLIC SYNONYM SR_PROPOSITO_ACCIONES
	 FOR SR_PROPOSITO_ACCIONES;




CREATE SYNONYM SR_PROPOSITO_ACCIONES
	 FOR SR_PROPOSITO_ACCIONES;



CREATE UNIQUE INDEX TC_PROPOSITO_ACCIONES_PK ON SR_PROPOSITO_ACCIONES
(N_PROPOSITO_ACCIONES   ASC);



ALTER TABLE SR_PROPOSITO_ACCIONES
	ADD CONSTRAINT  TC_PROPOSITO_ACCIONES_PK PRIMARY KEY (N_PROPOSITO_ACCIONES);



CREATE TABLE SW_VISITAS
(
	N_VISITA             INTEGER CONSTRAINT SYS_C0013197 NOT NULL ,
	N_ZONA               NUMBER NULL ,
	N_SUPERVISOR         NUMBER NULL ,
	N_CENTRO             NUMBER NULL ,
	N_ESTATUSVISITAS     NUMBER NULL ,
	N_TIPOVISITA         NUMBER NULL ,
	D_FECHA              DATE NULL ,
	S_HORA_VISISTA       VARCHAR2(20 BYTE) NULL ,
	S_NOTAS              VARCHAR2(400 BYTE) NULL ,
	S_CENTRO             VARCHAR2(200 BYTE) NULL ,
	S_HORA_FIN           VARCHAR2(20 BYTE) NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	S_OBSERVACIONES      CLOB NULL 
);



CREATE PUBLIC SYNONYM SW_VISITAS
	 FOR SW_VISITAS;




CREATE SYNONYM SW_VISITAS
	 FOR SW_VISITAS;



CREATE UNIQUE INDEX SC_VISITAS_PK ON SW_VISITAS
(N_VISITA   ASC);



ALTER TABLE SW_VISITAS
	ADD CONSTRAINT  SC_VISITAS_PK PRIMARY KEY (N_VISITA);



CREATE TABLE TC_911MOTIVO
(
	N_ID                 NUMBER NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_911MOTIVO
	 FOR TC_911MOTIVO;




CREATE SYNONYM TC_911MOTIVO
	 FOR TC_911MOTIVO;



CREATE UNIQUE INDEX TC_911MOTIVO_PK ON TC_911MOTIVO
(N_ID   ASC);



ALTER TABLE TC_911MOTIVO
	ADD CONSTRAINT  TC_911MOTIVO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_AGUDEZAVISUAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011421 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011422 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_AGUDEZAVISUAL
	 FOR TC_AGUDEZAVISUAL;




CREATE SYNONYM TC_AGUDEZAVISUAL
	 FOR TC_AGUDEZAVISUAL;



CREATE UNIQUE INDEX TC_AGUDEZAVISUAL_PK ON TC_AGUDEZAVISUAL
(N_ID   ASC);



ALTER TABLE TC_AGUDEZAVISUAL
	ADD CONSTRAINT  TC_AGUDEZAVISUAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_AGUDEZAVISUAL_UK ON TC_AGUDEZAVISUAL
(S_CLAVE   ASC);



CREATE TABLE TC_ALUMNO
(
	S_CURP               VARCHAR2(18 BYTE) NULL ,
	N_MATRICULA          NUMBER NULL ,
	S_PRIMERAPELLIDO     VARCHAR2(60 BYTE) NULL ,
	S_SEGUNDOAPELLIDO    VARCHAR2(60 BYTE) NULL ,
	S_NOMBRE             VARCHAR2(60 BYTE) NULL ,
	D_NACIMIENTO         DATE NULL ,
	N_CURPINCORRECTO     NUMBER NULL ,
	N_IDINDIGENA         NUMBER DEFAULT  NULL  CONSTRAINT SYS_C0013177 NOT NULL ,
	N_IDALUMNOEXT        NUMBER NULL ,
	N_IDENTIFEDERDENAC   NUMBER NULL ,
	N_IDMOVIMIENTO       NUMBER NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0013178 NOT NULL ,
	N_IDSEXO             NUMBER DEFAULT  1  CONSTRAINT SYS_C0013179 NOT NULL ,
	N_IDDIALECTOINDIGENA NUMBER DEFAULT  NULL  CONSTRAINT SYS_C0013180 NOT NULL ,
	N_IDPAIS             NUMBER DEFAULT  1  CONSTRAINT SYS_C0013181 NOT NULL ,
	N_IDUSACONDADOS      NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	B_IMAGEN             BLOB NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDSITUACIONALUMNO  NUMBER NULL ,
	N_IDESTATUS          NUMBER NULL ,
	N_IDORIGENREGISTRO   NUMBER NULL ,
	N_IDSAID             NUMBER NULL ,
	S_ERROR              VARCHAR2(4000 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_ALUMNO
	 FOR TC_ALUMNO;




CREATE SYNONYM TC_ALUMNO
	 FOR TC_ALUMNO;



CREATE UNIQUE INDEX TC_ALUMNO_PK ON TC_ALUMNO
(N_ID   ASC);



ALTER TABLE TC_ALUMNO
	ADD CONSTRAINT  TC_ALUMNO_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TC_ALUMNO_UK ON TC_ALUMNO
(S_CURP   ASC);



CREATE TABLE TC_ALUMNOCOMPLEMENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011423 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0011424 NOT NULL ,
	N_CONPREESCOLAR      NUMBER NULL ,
	N_INDREPROBADO       NUMBER NULL ,
	D_ALTA               DATE NULL ,
	D_BAJA               DATE NULL ,
	N_DOBLENACIONALIDAD  NUMBER NULL ,
	N_IDPAISDOBLENACIONALIDAD NUMBER NULL ,
	N_IDTIPOSANGRE       NUMBER CONSTRAINT SYS_C0011425 NOT NULL ,
	N_IDAGUDEZAVISUAL    NUMBER NULL ,
	N_INDRESTRICCIONLEGAL NUMBER NULL ,
	S_DESRESTRICCIONLEGAL VARCHAR2(150 BYTE) NULL ,
	N_IMC                NUMBER NULL ,
	S_RANGONORMAL        VARCHAR2(50 BYTE) NULL ,
	S_ESTADOACTUALIMC    VARCHAR2(50 BYTE) NULL ,
	N_NUMTRANSFERENCIA   NUMBER NULL ,
	S_ESTADOTRANSFERENCIA VARCHAR2(50 BYTE) NULL ,
	N_IDPAISTRANSFERENCIA NUMBER NULL ,
	S_EXCEPCIONNORMASOLICITUD VARCHAR2(20 BYTE) NULL ,
	S_EXCEPCIONNORMAAUTORIZA VARCHAR2(20 BYTE) NULL ,
	N_IDTIPODOCUMENTOPROBATORIO NUMBER NULL ,
	N_ACTANACENTIDAD     NUMBER NULL ,
	N_ACTNACMUNICIPIO    NUMBER NULL ,
	N_ACTNACANIO         NUMBER NULL ,
	N_ACTNACLIBRO        NUMBER NULL ,
	N_ACTNACFOJA         NUMBER NULL ,
	S_ACTNACCURP         CHAR(18 BYTE) NULL ,
	S_ACTNACCRIP         VARCHAR2(20 BYTE) NULL ,
	N_MIGRATORIOANIO     NUMBER NULL ,
	S_MIGRATORIOREGISTRO VARCHAR2(20 BYTE) NULL ,
	S_MIGRATORIOREGNACIONAL VARCHAR2(50 BYTE) NULL ,
	N_ESTATURAM          NUMBER NULL ,
	N_PESO               NUMBER NULL ,
	N_BECA               NUMBER NULL ,
	N_DESAYUNO           NUMBER NULL ,
	N_GRUPOMIXTO         NUMBER NULL ,
	D_PRESENTACION       DATE CONSTRAINT SYS_C0011426 NOT NULL ,
	N_CONFIRMACIONINSCRIPCION NUMBER NULL ,
	N_DOCTOPROBATORIO    NUMBER NULL ,
	N_FOLIO              NUMBER NULL ,
	N_IDNIVELNUTRICION   NUMBER NULL ,
	N_IDTIPODOCUMENTO    NUMBER NULL ,
	N_CONUSAER           NUMBER NULL ,
	N_IDDERECHOHABIENCIA1 NUMBER DEFAULT  0  NULL ,
	N_IDDERECHOHABIENCIA2 NUMBER DEFAULT  0  NULL ,
	N_IDGRADOSOLICITADO  NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ALUMNOCOMPLEMENTO
	 FOR TC_ALUMNOCOMPLEMENTO;




CREATE SYNONYM TC_ALUMNOCOMPLEMENTO
	 FOR TC_ALUMNOCOMPLEMENTO;



CREATE UNIQUE INDEX TC_ALUMNOCOMPLEMENTO_PK ON TC_ALUMNOCOMPLEMENTO
(N_ID   ASC);



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD CONSTRAINT  TC_ALUMNOCOMPLEMENTO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_APOYOSEXTERNOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011427 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011428 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_APOYOSEXTERNOS
	 FOR TC_APOYOSEXTERNOS;




CREATE SYNONYM TC_APOYOSEXTERNOS
	 FOR TC_APOYOSEXTERNOS;



CREATE UNIQUE INDEX TC_APOYOSEXTERNOS_PK ON TC_APOYOSEXTERNOS
(N_ID   ASC);



ALTER TABLE TC_APOYOSEXTERNOS
	ADD CONSTRAINT  TC_APOYOSEXTERNOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_APOYOSEXTERNOS_UK ON TC_APOYOSEXTERNOS
(S_CLAVE   ASC);



CREATE TABLE TC_AREADECONOCIMIENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011429 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011430 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_AREADECONOCIMIENTO
	 FOR TC_AREADECONOCIMIENTO;




CREATE SYNONYM TC_AREADECONOCIMIENTO
	 FOR TC_AREADECONOCIMIENTO;



CREATE UNIQUE INDEX TC_AREADECONOCIMIENTO_PK ON TC_AREADECONOCIMIENTO
(N_ID   ASC);



ALTER TABLE TC_AREADECONOCIMIENTO
	ADD CONSTRAINT  TC_AREADECONOCIMIENTO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_AREADECONOCIMIENTO_UK ON TC_AREADECONOCIMIENTO
(S_CLAVE   ASC);



CREATE TABLE TC_ASIGNATURABLOQUE
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012346 NOT NULL ,
	N_IDBLOQUETIPOTEXTO  NUMBER(10) CONSTRAINT SYS_C0012347 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(1000 BYTE) NULL ,
	S_COMPETENCIAS       VARCHAR2(2000 BYTE) NULL ,
	N_ORDEN              NUMBER(10) NULL ,
	N_IDASIGNATURAS      NUMBER(10) CONSTRAINT SYS_C0012348 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURABLOQUE
	 FOR TC_ASIGNATURABLOQUE;




CREATE SYNONYM TC_ASIGNATURABLOQUE
	 FOR TC_ASIGNATURABLOQUE;



CREATE UNIQUE INDEX TC_ASIGBLOQ_PK ON TC_ASIGNATURABLOQUE
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURABLOQUE
	ADD CONSTRAINT  TC_ASIGBLOQ_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ASIGNATURABLOQUEAPRE
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012349 NOT NULL ,
	N_IDASIGNATURABLOQUE NUMBER(10) NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(1000 BYTE) NULL ,
	N_ORDEN              NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURABLOQUEAPRE
	 FOR TC_ASIGNATURABLOQUEAPRE;




CREATE SYNONYM TC_ASIGNATURABLOQUEAPRE
	 FOR TC_ASIGNATURABLOQUEAPRE;



CREATE UNIQUE INDEX TC_ASIGNATURABLOQUEAPRE_PK ON TC_ASIGNATURABLOQUEAPRE
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURABLOQUEAPRE
	ADD CONSTRAINT  TC_ASIGNATURABLOQUEAPRE_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ASIGNATURABLOQUEAPRECON
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012365 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(1000 BYTE) NULL ,
	N_ORDEN              NUMBER(10) NULL ,
	N_IDASIGNATURABLOQUEAPRE NUMBER(10) CONSTRAINT SYS_C0012366 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURABLOQUEAPRECON
	 FOR TC_ASIGNATURABLOQUEAPRECON;




CREATE SYNONYM TC_ASIGNATURABLOQUEAPRECON
	 FOR TC_ASIGNATURABLOQUEAPRECON;



CREATE UNIQUE INDEX TC_ASIGNATURABLOQUEAPRE_PK_1 ON TC_ASIGNATURABLOQUEAPRECON
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURABLOQUEAPRECON
	ADD CONSTRAINT  TC_ASIGNATURABLOQUEAPRE_PK_1 PRIMARY KEY (N_ID);



CREATE TABLE TC_ASIGNATURABLOQUECOFA
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012350 NOT NULL ,
	N_IDASIGNATURABLOQUE NUMBER(10) NULL ,
	S_CLAVE              VARCHAR2(10 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(1000 BYTE) NULL ,
	N_ESTATUS            NUMBER(38) NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURABLOQUECOFA
	 FOR TC_ASIGNATURABLOQUECOFA;




CREATE SYNONYM TC_ASIGNATURABLOQUECOFA
	 FOR TC_ASIGNATURABLOQUECOFA;



CREATE UNIQUE INDEX TC_ASIGBLOQCOFA_PK ON TC_ASIGNATURABLOQUECOFA
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURABLOQUECOFA
	ADD CONSTRAINT  TC_ASIGBLOQCOFA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ASIGNATURACALIFICACIONES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011431 NOT NULL ,
	N_IDASIGNATURA       NUMBER NULL ,
	S_CALIFICACION       VARCHAR2(3 BYTE) NULL ,
	S_CALIFICACIONEQUIVALENTE VARCHAR2(100 BYTE) NULL ,
	N_RANGOVALORES       NUMBER NULL ,
	N_RANGOINICIOCAL     NUMBER NULL ,
	N_RANGOFINALCAL      NUMBER NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	S_COLABORACIONCALIFICACION VARCHAR2(250 BYTE) NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_ORDEN              NUMBER DEFAULT  0  NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURACALIFICACIONES
	 FOR TC_ASIGNATURACALIFICACIONES;




CREATE SYNONYM TC_ASIGNATURACALIFICACIONES
	 FOR TC_ASIGNATURACALIFICACIONES;



CREATE UNIQUE INDEX TC_ASIGNATURACALIFICACIONES_PK ON TC_ASIGNATURACALIFICACIONES
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURACALIFICACIONES
	ADD CONSTRAINT  TC_ASIGNATURACALIFICACIONES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ASIGNATURACALIFICACIONES_UK ON TC_ASIGNATURACALIFICACIONES
(S_CLAVE   ASC);



CREATE TABLE TC_ASIGNATURAGRADO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011432 NOT NULL ,
	N_IDASIGNATURA       NUMBER CONSTRAINT SYS_C0011433 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER CONSTRAINT SYS_C0011434 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURAGRADO
	 FOR TC_ASIGNATURAGRADO;




CREATE SYNONYM TC_ASIGNATURAGRADO
	 FOR TC_ASIGNATURAGRADO;



CREATE UNIQUE INDEX TC_ASIGNATURAGRADO_PK ON TC_ASIGNATURAGRADO
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURAGRADO
	ADD CONSTRAINT  TC_ASIGNATURAGRADO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ASIGNATURAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011435 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_IDTIPOASIGNATURA   NUMBER NULL ,
	N_HORASSEMANA        NUMBER NULL ,
	N_HORASCICLOESCOLAR  NUMBER NULL ,
	N_IMPARTIDATITULAR   NUMBER NULL ,
	N_PROMEDIOMINIMO     NUMBER NULL ,
	N_ESTATUS            NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_IDCAMPOFORMATIVO   NUMBER NULL ,
	N_MUESTRACARTILLA    NUMBER DEFAULT  0  NULL ,
	N_FORMACAPTURA       NUMBER DEFAULT  0  NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ASIGNATURAS
	 FOR TC_ASIGNATURAS;




CREATE SYNONYM TC_ASIGNATURAS
	 FOR TC_ASIGNATURAS;



CREATE UNIQUE INDEX TC_ASIGNATURAS_PK ON TC_ASIGNATURAS
(N_ID   ASC);



ALTER TABLE TC_ASIGNATURAS
	ADD CONSTRAINT  TC_ASIGNATURAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ASIGNATURAS_UK ON TC_ASIGNATURAS
(N_IDNIVELEDUCATIVO   ASC,N_ID   ASC,N_IDCICLOESCOLAR   ASC,N_IDGRADOESCOLAR   ASC,N_IDTIPOASIGNATURA   ASC,N_HORASSEMANA   ASC,N_HORASCICLOESCOLAR   ASC,N_IMPARTIDATITULAR   ASC,N_PROMEDIOMINIMO   ASC);



CREATE TABLE TC_AUTHORITIES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011438 NOT NULL ,
	S_DESCRIPTION        VARCHAR2(50 BYTE) NULL ,
	N_STATUS             NUMBER(1) NULL ,
	S_NAME               VARCHAR2(200 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_AUTHORITIES
	 FOR TC_AUTHORITIES;




CREATE SYNONYM TC_AUTHORITIES
	 FOR TC_AUTHORITIES;



CREATE UNIQUE INDEX TC_AUTHORITIES_PK ON TC_AUTHORITIES
(N_ID   ASC);



ALTER TABLE TC_AUTHORITIES
	ADD CONSTRAINT  TC_AUTHORITIES_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TC_AUTHORITIES_UK ON TC_AUTHORITIES
(S_DESCRIPTION   ASC);



ALTER TABLE TC_AUTHORITIES
ADD CONSTRAINT  TC_AUTHORITIES_UK UNIQUE (S_DESCRIPTION);



CREATE TABLE TC_BAP
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012373 NOT NULL ,
	S_CLAVE              VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_NIVEL              NUMBER NULL ,
	N_PADRE              NUMBER NULL ,
	N_NIVELES            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_BAP
	 FOR TC_BAP;




CREATE SYNONYM TC_BAP
	 FOR TC_BAP;



CREATE UNIQUE INDEX TC_BAP_PK ON TC_BAP
(N_ID   ASC);



ALTER TABLE TC_BAP
	ADD CONSTRAINT  TC_BAP_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_BAPAPOYOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012394 NOT NULL ,
	S_TIPOAPOYO          VARCHAR2(250 BYTE) NULL ,
	S_APOYODESCRIPCION   VARCHAR2(200 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_BAPAPOYOS
	 FOR TC_BAPAPOYOS;




CREATE SYNONYM TC_BAPAPOYOS
	 FOR TC_BAPAPOYOS;



CREATE UNIQUE INDEX TC_BAPAPOYOS_PK ON TC_BAPAPOYOS
(N_ID   ASC);



ALTER TABLE TC_BAPAPOYOS
	ADD CONSTRAINT  TC_BAPAPOYOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_BECA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011441 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011442 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_BECA
	 FOR TC_BECA;




CREATE SYNONYM TC_BECA
	 FOR TC_BECA;



CREATE UNIQUE INDEX TC_BECA_PK ON TC_BECA
(N_ID   ASC);



ALTER TABLE TC_BECA
	ADD CONSTRAINT  TC_BECA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_BECA_UK ON TC_BECA
(S_CLAVE   ASC);



CREATE TABLE TC_BLOQUETIPOTEXTO
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012351 NOT NULL ,
	S_CLAVE              VARCHAR2(10 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER(38) NULL 
);



CREATE PUBLIC SYNONYM TC_BLOQUETIPOTEXTO
	 FOR TC_BLOQUETIPOTEXTO;




CREATE SYNONYM TC_BLOQUETIPOTEXTO
	 FOR TC_BLOQUETIPOTEXTO;



CREATE UNIQUE INDEX PK5 ON TC_BLOQUETIPOTEXTO
(N_ID   ASC);



ALTER TABLE TC_BLOQUETIPOTEXTO
	ADD CONSTRAINT  PK5 PRIMARY KEY (N_ID);



CREATE TABLE TC_CALENDARIOESCOLAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011443 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011444 NOT NULL ,
	D_FIN                DATE NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011445 NOT NULL ,
	N_IDPROCESO          NUMBER NULL ,
	S_RANGOVALORES       VARCHAR2(250 BYTE) NULL ,
	D_INICIO             DATE NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011446 NOT NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_IDCUINORMATIVA     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_CALENDARIOESCOLAR
	 FOR TC_CALENDARIOESCOLAR;




CREATE SYNONYM TC_CALENDARIOESCOLAR
	 FOR TC_CALENDARIOESCOLAR;



CREATE UNIQUE INDEX TC_CALENDARIOESCOLAR_PK ON TC_CALENDARIOESCOLAR
(N_ID   ASC);



ALTER TABLE TC_CALENDARIOESCOLAR
	ADD CONSTRAINT  TC_CALENDARIOESCOLAR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CALENDARIOESCOLAR_UK ON TC_CALENDARIOESCOLAR
(N_IDPROCESO   ASC,D_INICIO   ASC,N_ESTATUS   ASC);



CREATE TABLE TC_CAMPOFORMATIVO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011448 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011449 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_CAMPOFORMATIVO
	 FOR TC_CAMPOFORMATIVO;




CREATE SYNONYM TC_CAMPOFORMATIVO
	 FOR TC_CAMPOFORMATIVO;



CREATE UNIQUE INDEX TC_CAMPOFORMATIVO_PK ON TC_CAMPOFORMATIVO
(N_ID   ASC);



ALTER TABLE TC_CAMPOFORMATIVO
	ADD CONSTRAINT  TC_CAMPOFORMATIVO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CAMPOFORMATIVO_UK ON TC_CAMPOFORMATIVO
(S_CLAVE   ASC);



CREATE TABLE TC_CATALOGO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011452 NOT NULL ,
	S_CLAVE              VARCHAR2(40 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(40 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011453 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_CATALOGO
	 FOR TC_CATALOGO;




CREATE SYNONYM TC_CATALOGO
	 FOR TC_CATALOGO;



CREATE UNIQUE INDEX TC_CATALOGO_PK ON TC_CATALOGO
(N_ID   ASC);



ALTER TABLE TC_CATALOGO
	ADD CONSTRAINT  TC_CATALOGO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CATALOGO_UK ON TC_CATALOGO
(S_CLAVE   ASC);



CREATE TABLE TC_CATALOGOCAMPO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011454 NOT NULL ,
	N_IDCATALOGO         NUMBER CONSTRAINT SYS_C0011455 NOT NULL ,
	S_CLAVE              VARCHAR2(40 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(40 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011456 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_CATALOGOCAMPO
	 FOR TC_CATALOGOCAMPO;




CREATE SYNONYM TC_CATALOGOCAMPO
	 FOR TC_CATALOGOCAMPO;



CREATE UNIQUE INDEX TC_CATALOGOCAMPO_PK ON TC_CATALOGOCAMPO
(N_ID   ASC);



ALTER TABLE TC_CATALOGOCAMPO
	ADD CONSTRAINT  TC_CATALOGOCAMPO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CATALOGOCAMPO_UK ON TC_CATALOGOCAMPO
(S_CLAVE   ASC);



CREATE TABLE TC_CATEGORIA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011457 NOT NULL ,
	D_INICIO             DATE NULL ,
	D_TERMINO            DATE NULL ,
	N_HORASCOMPATIBILIDAD NUMBER(10) NULL ,
	N_HORASSERVICIO      NUMBER(10) NULL ,
	N_ACTINCAT           CHAR(10 BYTE) NULL ,
	N_MODELO             CHAR(10 BYTE) NULL ,
	S_CLAVE              VARCHAR2(7 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011458 NOT NULL ,
	N_TIPOCATEGORIA      NUMBER CONSTRAINT SYS_C0011459 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011460 NOT NULL ,
	N_IDIDENTIFICADORCATEGORIA NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_CATEGORIA
	 FOR TC_CATEGORIA;




CREATE SYNONYM TC_CATEGORIA
	 FOR TC_CATEGORIA;



CREATE UNIQUE INDEX TC_CATEGORIA_PK ON TC_CATEGORIA
(N_ID   ASC);



ALTER TABLE TC_CATEGORIA
	ADD CONSTRAINT  TC_CATEGORIA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CATEGORIA_UK ON TC_CATEGORIA
(S_CLAVE   ASC);



CREATE TABLE TC_CICLOESCOLAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011467 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	D_INICIO             DATE NULL ,
	D_FIN                DATE NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_IDCICLOANTERIOR    NUMBER NULL ,
	N_CATALOGOS          NUMBER NULL ,
	N_PROMOCION          NUMBER NULL ,
	N_VALIDACIFRAS       NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TC_CICLOESCOLAR
	 FOR TC_CICLOESCOLAR;




CREATE SYNONYM TC_CICLOESCOLAR
	 FOR TC_CICLOESCOLAR;



CREATE UNIQUE INDEX TC_CICLOESCOLAR_PK ON TC_CICLOESCOLAR
(N_ID   ASC);



ALTER TABLE TC_CICLOESCOLAR
	ADD CONSTRAINT  TC_CICLOESCOLAR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CICLOESCOLAR_UK ON TC_CICLOESCOLAR
(N_ESTATUS   ASC);



CREATE TABLE TC_CIUDAD
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011468 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011469 NOT NULL ,
	N_IDENTIDADFEDERATIVA NUMBER CONSTRAINT SYS_C0011470 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_CIUDAD
	 FOR TC_CIUDAD;




CREATE SYNONYM TC_CIUDAD
	 FOR TC_CIUDAD;



CREATE UNIQUE INDEX TC_CIUDAD_PK ON TC_CIUDAD
(N_ID   ASC);



ALTER TABLE TC_CIUDAD
	ADD CONSTRAINT  TC_CIUDAD_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CIUDAD_UK ON TC_CIUDAD
(S_CLAVE   ASC);



CREATE TABLE TC_CLASIFICAINCIDENCIAS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0011471 NOT NULL ,
	S_CLAVE              VARCHAR2(30 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_ACTIVO             NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TC_CLASIFICAINCIDENCIAS
	 FOR TC_CLASIFICAINCIDENCIAS;




CREATE SYNONYM TC_CLASIFICAINCIDENCIAS
	 FOR TC_CLASIFICAINCIDENCIAS;



CREATE UNIQUE INDEX TC_CLASIFICAINCIDENCIAS_PK ON TC_CLASIFICAINCIDENCIAS
(N_ID   ASC);



ALTER TABLE TC_CLASIFICAINCIDENCIAS
	ADD CONSTRAINT  TC_CLASIFICAINCIDENCIAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CLASIFICAINCIDENCIAS_UK ON TC_CLASIFICAINCIDENCIAS
(S_CLAVE   ASC);



CREATE TABLE TC_CODIGOPOSTAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011477 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011478 NOT NULL ,
	N_IDMUNICIPIO        NUMBER CONSTRAINT SYS_C0011479 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_CODIGOPOSTAL
	 FOR TC_CODIGOPOSTAL;




CREATE SYNONYM TC_CODIGOPOSTAL
	 FOR TC_CODIGOPOSTAL;



CREATE UNIQUE INDEX TC_CODIGOPOSTAL_PK ON TC_CODIGOPOSTAL
(N_ID   ASC);



ALTER TABLE TC_CODIGOPOSTAL
	ADD CONSTRAINT  TC_CODIGOPOSTAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_CODIGOPOSTAL_UK ON TC_CODIGOPOSTAL
(S_CLAVE   ASC);



CREATE TABLE TC_COLONIA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011480 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011481 NOT NULL ,
	N_IDMUNICIPIO        NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_COLONIA
	 FOR TC_COLONIA;




CREATE SYNONYM TC_COLONIA
	 FOR TC_COLONIA;



CREATE UNIQUE INDEX TC_COLONIA_PK ON TC_COLONIA
(N_ID   ASC);



ALTER TABLE TC_COLONIA
	ADD CONSTRAINT  TC_COLONIA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_COLONIA_UK ON TC_COLONIA
(S_CLAVE   ASC);



CREATE TABLE TC_CONSULTA_REPORTES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0013001 NOT NULL ,
	S_ENCABEZADO_CONSULTA VARCHAR2(3000 BYTE) CONSTRAINT SYS_C0013002 NOT NULL ,
	S_CONDICIONES        VARCHAR2(1000 BYTE) NULL ,
	S_ORDENAMIENTO       VARCHAR2(1000 BYTE) NULL ,
	S_ACCION             VARCHAR2(200 BYTE) NULL ,
	S_RUTA_PLANTILLA     VARCHAR2(200 BYTE) NULL ,
	S_NOMBRE_PLANTILLA   VARCHAR2(200 BYTE) NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_ESTATUS            NUMBER NULL ,
	S_NOMBRE_REPORTE     VARCHAR2(200 BYTE) NULL ,
	N_MOSTRARFECHAS      NUMBER DEFAULT  1  NULL ,
	N_MOSTRARCICLOE      INTEGER NULL ,
	N_RENGLON_ESCRITURA  NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_CONSULTA_REPORTES
	 FOR TC_CONSULTA_REPORTES;




CREATE SYNONYM TC_CONSULTA_REPORTES
	 FOR TC_CONSULTA_REPORTES;



CREATE UNIQUE INDEX TC_CONSULTA_REPORTES_PK ON TC_CONSULTA_REPORTES
(N_ID   ASC);



ALTER TABLE TC_CONSULTA_REPORTES
	ADD CONSTRAINT  TC_CONSULTA_REPORTES_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_COORDINACIONSECTORIAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011483 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	S_ESTATUS            VARCHAR2(20 BYTE) NULL ,
	S_CCT                VARCHAR2(20 BYTE) NULL ,
	S_TELEFONO           VARCHAR2(15 BYTE) NULL ,
	S_RESPONSABLE        VARCHAR2(100 BYTE) NULL ,
	S_UR                 VARCHAR2(15 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_COORDINACIONSECTORIAL
	 FOR TC_COORDINACIONSECTORIAL;




CREATE SYNONYM TC_COORDINACIONSECTORIAL
	 FOR TC_COORDINACIONSECTORIAL;



CREATE UNIQUE INDEX TC_CORDINACIONSECTORIAL_PK ON TC_COORDINACIONSECTORIAL
(N_ID   ASC);



ALTER TABLE TC_COORDINACIONSECTORIAL
	ADD CONSTRAINT  TC_CORDINACIONSECTORIAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_COORDINACIONSECTORIAL_UK ON TC_COORDINACIONSECTORIAL
(S_CLAVE   ASC);



CREATE TABLE TC_CUIMODULOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012425 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	S_RUTA               VARCHAR2(500 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_CUIMODULOS
	 FOR TC_CUIMODULOS;




CREATE SYNONYM TC_CUIMODULOS
	 FOR TC_CUIMODULOS;



CREATE UNIQUE INDEX TC_CUIMODULOS_PK ON TC_CUIMODULOS
(N_ID   ASC);



ALTER TABLE TC_CUIMODULOS
	ADD CONSTRAINT  TC_CUIMODULOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_CUINORMATIVA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012424 NOT NULL ,
	S_CLAVE              VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_IDSERVICIOESCUELA  NUMBER NULL ,
	N_IDCUIMODULOS       NUMBER NULL ,
	S_FINALIDAD          VARCHAR2(500 BYTE) NULL ,
	S_RESPONSABLES       VARCHAR2(500 BYTE) NULL ,
	S_DESTINATARIO       VARCHAR2(500 BYTE) NULL ,
	S_NORMATIVA          VARCHAR2(300 BYTE) NULL ,
	S_WORD               VARCHAR2(300 BYTE) NULL ,
	S_REPORTE1           VARCHAR2(300 BYTE) NULL ,
	S_REPORTE2           VARCHAR2(300 BYTE) NULL ,
	N_IDUSO              NUMBER NULL ,
	N_IDCUITIPOINFO      NUMBER NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_CUINORMATIVA
	 FOR TC_CUINORMATIVA;




CREATE SYNONYM TC_CUINORMATIVA
	 FOR TC_CUINORMATIVA;



CREATE UNIQUE INDEX TC_NORMATIVACUI_PK ON TC_CUINORMATIVA
(N_ID   ASC);



ALTER TABLE TC_CUINORMATIVA
	ADD CONSTRAINT  TC_NORMATIVACUI_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_CUITIPOINFO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012422 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_CUITIPOINFO
	 FOR TC_CUITIPOINFO;




CREATE SYNONYM TC_CUITIPOINFO
	 FOR TC_CUITIPOINFO;



CREATE UNIQUE INDEX TC_CUITIPOINFO_PK ON TC_CUITIPOINFO
(N_ID   ASC);



ALTER TABLE TC_CUITIPOINFO
	ADD CONSTRAINT  TC_CUITIPOINFO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_DATOSREPORTESESPECIALES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0011489 NOT NULL ,
	N_IDREPORTESESPECIALES NUMBER(10) NULL ,
	N_ORDEN              NUMBER(10) CONSTRAINT SYS_C0011490 NOT NULL ,
	S_REFERENCIA         VARCHAR2(10 BYTE) NULL ,
	N_VISIBLE            NUMBER(1) NULL ,
	N_TIPODATO           NUMBER(10) NULL ,
	N_LONGITUD           NUMBER(10) NULL ,
	S_LEYENDA            VARCHAR2(255 BYTE) NULL ,
	S_CATALOGO           VARCHAR2(255 BYTE) NULL ,
	S_CAMPOLIGA          VARCHAR2(255 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_DATOSREPORTESESPECIALES
	 FOR TC_DATOSREPORTESESPECIALES;




CREATE SYNONYM TC_DATOSREPORTESESPECIALES
	 FOR TC_DATOSREPORTESESPECIALES;



CREATE UNIQUE INDEX TC_DATOSREPORTESESPECIALES_PK ON TC_DATOSREPORTESESPECIALES
(N_ID   ASC);



ALTER TABLE TC_DATOSREPORTESESPECIALES
	ADD CONSTRAINT  TC_DATOSREPORTESESPECIALES_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_DEPENDENCIANORMATIVA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011491 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011492 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_DEPENDENCIANORMATIVA
	 FOR TC_DEPENDENCIANORMATIVA;




CREATE SYNONYM TC_DEPENDENCIANORMATIVA
	 FOR TC_DEPENDENCIANORMATIVA;



CREATE UNIQUE INDEX TC_DEPENDENCIANORMATIVA_PK ON TC_DEPENDENCIANORMATIVA
(N_ID   ASC);



ALTER TABLE TC_DEPENDENCIANORMATIVA
	ADD CONSTRAINT  TC_DEPENDENCIANORMATIVA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DEPENDENCIANORMATIVA_UK ON TC_DEPENDENCIANORMATIVA
(S_CLAVE   ASC);



CREATE TABLE TC_DEPENDENCIAOPERATIVA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011493 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011494 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_DEPENDENCIAOPERATIVA
	 FOR TC_DEPENDENCIAOPERATIVA;




CREATE SYNONYM TC_DEPENDENCIAOPERATIVA
	 FOR TC_DEPENDENCIAOPERATIVA;



CREATE UNIQUE INDEX TC_DEPENDENCIAOPERATIVA_PK ON TC_DEPENDENCIAOPERATIVA
(N_ID   ASC);



ALTER TABLE TC_DEPENDENCIAOPERATIVA
	ADD CONSTRAINT  TC_DEPENDENCIAOPERATIVA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DEPENDENCIAOPERATIVA_UK ON TC_DEPENDENCIAOPERATIVA
(S_CLAVE   ASC);



CREATE TABLE TC_DERECHOHABIENCIA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011495 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011496 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_DERECHOHABIENCIA
	 FOR TC_DERECHOHABIENCIA;




CREATE SYNONYM TC_DERECHOHABIENCIA
	 FOR TC_DERECHOHABIENCIA;



CREATE UNIQUE INDEX TC_DERECHOHABIENCIA_PK ON TC_DERECHOHABIENCIA
(N_ID   ASC);



ALTER TABLE TC_DERECHOHABIENCIA
	ADD CONSTRAINT  TC_DERECHOHABIENCIA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DERECHOHABIENCIA_UK ON TC_DERECHOHABIENCIA
(S_CLAVE   ASC);



CREATE TABLE TC_DETALLESERVICIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011497 NOT NULL ,
	N_IDSERVICIO         NUMBER CONSTRAINT SYS_C0011498 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011499 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_DETALLESERVICIO
	 FOR TC_DETALLESERVICIO;




CREATE SYNONYM TC_DETALLESERVICIO
	 FOR TC_DETALLESERVICIO;



CREATE UNIQUE INDEX TC_DETALLESERVICIO_PK ON TC_DETALLESERVICIO
(N_ID   ASC);



ALTER TABLE TC_DETALLESERVICIO
	ADD CONSTRAINT  TC_DETALLESERVICIO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DETALLESERVICIO_UK ON TC_DETALLESERVICIO
(S_CLAVE   ASC);



CREATE TABLE TC_DIAINHABIL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011500 NOT NULL ,
	D_INHABIL            DATE CONSTRAINT SYS_C0011501 NOT NULL ,
	S_OBSERVACION        VARCHAR2(300 BYTE) NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011502 NOT NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_IDTIPOPERSONAL_FR  NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_DIAINHABIL
	 FOR TC_DIAINHABIL;




CREATE SYNONYM TC_DIAINHABIL
	 FOR TC_DIAINHABIL;



CREATE UNIQUE INDEX TC_DIAINHABIL_PK ON TC_DIAINHABIL
(N_ID   ASC);



ALTER TABLE TC_DIAINHABIL
	ADD CONSTRAINT  TC_DIAINHABIL_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_DIALECTOINDIGENA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011503 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011504 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_DIALECTOINDIGENA
	 FOR TC_DIALECTOINDIGENA;




CREATE SYNONYM TC_DIALECTOINDIGENA
	 FOR TC_DIALECTOINDIGENA;



CREATE UNIQUE INDEX TC_DIALECTOINDIGENA_PK ON TC_DIALECTOINDIGENA
(N_ID   ASC);



ALTER TABLE TC_DIALECTOINDIGENA
	ADD CONSTRAINT  TC_DIALECTOINDIGENA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DIALECTOINDIGENA_UK ON TC_DIALECTOINDIGENA
(S_CLAVE   ASC);



CREATE TABLE TC_DIRECCIONOPERATIVA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011507 NOT NULL ,
	N_IDCOORDINACIONSECTORIAL NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	S_TELEFONO           VARCHAR2(15 BYTE) NULL ,
	S_CCT                VARCHAR2(20 BYTE) NULL ,
	S_RESPONSABLE        VARCHAR2(100 BYTE) NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_DIRECCIONOPERATIVA
	 FOR TC_DIRECCIONOPERATIVA;




CREATE SYNONYM TC_DIRECCIONOPERATIVA
	 FOR TC_DIRECCIONOPERATIVA;



CREATE UNIQUE INDEX TC_DIRECCIONOPERATIVA_PK ON TC_DIRECCIONOPERATIVA
(N_ID   ASC);



ALTER TABLE TC_DIRECCIONOPERATIVA
	ADD CONSTRAINT  TC_DIRECCIONOPERATIVA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DIRECCIONOPERATIVA_UK ON TC_DIRECCIONOPERATIVA
(S_CLAVE   ASC);



CREATE TABLE TC_DOCTOACREDITACION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012370 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_DOCTOACREDITACION
	 FOR TC_DOCTOACREDITACION;




CREATE SYNONYM TC_DOCTOACREDITACION
	 FOR TC_DOCTOACREDITACION;



CREATE UNIQUE INDEX TC_DOCTOACREDITACION_PK ON TC_DOCTOACREDITACION
(N_ID   ASC);



ALTER TABLE TC_DOCTOACREDITACION
	ADD CONSTRAINT  TC_DOCTOACREDITACION_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_DOCTOINMUEBLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012371 NOT NULL ,
	N_IDUNMUEBLE         NUMBER NULL ,
	N_IDDOCTOACREDITACION NUMBER NULL ,
	S_RUTAARCHIVO        VARCHAR2(250 BYTE) NULL ,
	S_DATOSRELEVANTES    VARCHAR2(500 BYTE) NULL ,
	S_NOMBREARCHIVO      VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_DOCTOINMUEBLE
	 FOR TC_DOCTOINMUEBLE;




CREATE SYNONYM TC_DOCTOINMUEBLE
	 FOR TC_DOCTOINMUEBLE;



CREATE UNIQUE INDEX TC_DOCTOINMUEBLE_PK ON TC_DOCTOINMUEBLE
(N_ID   ASC);



ALTER TABLE TC_DOCTOINMUEBLE
	ADD CONSTRAINT  TC_DOCTOINMUEBLE_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_DOCUMENTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011508 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011509 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_DOCUMENTOS
	 FOR TC_DOCUMENTOS;




CREATE SYNONYM TC_DOCUMENTOS
	 FOR TC_DOCUMENTOS;



CREATE UNIQUE INDEX TC_DOCUMENTOS_PK ON TC_DOCUMENTOS
(N_ID   ASC);



ALTER TABLE TC_DOCUMENTOS
	ADD CONSTRAINT  TC_DOCUMENTOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_DOCUMENTOS_UK ON TC_DOCUMENTOS
(S_CLAVE   ASC);



CREATE TABLE TC_DOCUMENTOSGRADO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011510 NOT NULL ,
	N_COPIASDOCUMENTO    NUMBER NULL ,
	N_ORIGINALDOCUMENTO  NUMBER NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011511 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_IDDOCUMENTOS       NUMBER CONSTRAINT SYS_C0011512 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_IDTIPOINSCRIPCION  NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_DOCUMENTOSGRADO
	 FOR TC_DOCUMENTOSGRADO;




CREATE SYNONYM TC_DOCUMENTOSGRADO
	 FOR TC_DOCUMENTOSGRADO;



CREATE UNIQUE INDEX TC_DOCUMENTOSGRADO_PK ON TC_DOCUMENTOSGRADO
(N_ID   ASC);



ALTER TABLE TC_DOCUMENTOSGRADO
	ADD CONSTRAINT  TC_DOCUMENTOSGRADO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_EDADGRADO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011513 NOT NULL ,
	N_EDADFIN            NUMBER NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011514 NOT NULL ,
	N_EDADINICIO         NUMBER NULL ,
	D_INICIO             DATE NULL ,
	D_FIN                DATE NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_EDADGRADO
	 FOR TC_EDADGRADO;




CREATE SYNONYM TC_EDADGRADO
	 FOR TC_EDADGRADO;



CREATE UNIQUE INDEX TC_EDADGRADO_PK ON TC_EDADGRADO
(N_ID   ASC);



ALTER TABLE TC_EDADGRADO
	ADD CONSTRAINT  TC_EDADGRADO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_EDADGRADO_UK ON TC_EDADGRADO
(N_ESTATUS   ASC);



CREATE TABLE TC_ENTIDADESFEDERATIVAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011515 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	S_CLAVEENTIDADCURP   VARCHAR2(12 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011516 NOT NULL ,
	N_IDPAIS             NUMBER CONSTRAINT SYS_C0011517 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ENTIDADESFEDERATIVAS
	 FOR TC_ENTIDADESFEDERATIVAS;




CREATE SYNONYM TC_ENTIDADESFEDERATIVAS
	 FOR TC_ENTIDADESFEDERATIVAS;



CREATE UNIQUE INDEX TC_ENTIDADESFEDERATIVAS_PK ON TC_ENTIDADESFEDERATIVAS
(N_ID   ASC);



ALTER TABLE TC_ENTIDADESFEDERATIVAS
	ADD CONSTRAINT  TC_ENTIDADESFEDERATIVAS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_EQUIVALENCIA_PROMEDIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012974 NOT NULL ,
	N_IDTIPOASIGNATURA   NUMBER NULL ,
	N_RANGOINICIAL       NUMBER NULL ,
	N_RANGOFINAL         NUMBER NULL ,
	S_EQUIVALENCIA       VARCHAR2(5 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_EQUIVALENCIA_PROMEDIO
	 FOR TC_EQUIVALENCIA_PROMEDIO;




CREATE SYNONYM TC_EQUIVALENCIA_PROMEDIO
	 FOR TC_EQUIVALENCIA_PROMEDIO;



CREATE UNIQUE INDEX SYS_C0013829 ON TC_EQUIVALENCIA_PROMEDIO
(N_ID   ASC);



ALTER TABLE TC_EQUIVALENCIA_PROMEDIO
	ADD CONSTRAINT  SYS_C0013829 PRIMARY KEY (N_ID);



CREATE TABLE TC_ESCOLARIDAD
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011519 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011520 NOT NULL ,
	N_NIVEL              NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ESCOLARIDAD
	 FOR TC_ESCOLARIDAD;




CREATE SYNONYM TC_ESCOLARIDAD
	 FOR TC_ESCOLARIDAD;



CREATE UNIQUE INDEX TC_ESCOLARIDAD_PK ON TC_ESCOLARIDAD
(N_ID   ASC);



ALTER TABLE TC_ESCOLARIDAD
	ADD CONSTRAINT  TC_ESCOLARIDAD_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ESCOLARIDAD_UK ON TC_ESCOLARIDAD
(S_CLAVE   ASC);



CREATE TABLE TC_ESCUELA
(
	S_CCT                VARCHAR2(20 BYTE) NULL ,
	S_OP                 VARCHAR2(20 BYTE) NULL ,
	S_CLAVE              VARCHAR2(30 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(110 BYTE) NULL ,
	S_CORREOELECTONICO   VARCHAR2(80 BYTE) NULL ,
	S_PAGINAWEB          VARCHAR2(250 BYTE) NULL ,
	S_ACUERDOSEP         VARCHAR2(20 BYTE) NULL ,
	D_ACUERDO            DATE NULL ,
	S_OBSERVACIONES      VARCHAR2(20 BYTE) NULL ,
	D_FUNCION            DATE NULL ,
	N_GASTOANUALUTILES   NUMBER NULL ,
	N_GASTOANUALUNIFORMES NUMBER NULL ,
	N_GASTOANUALCUOTAS   NUMBER NULL ,
	N_PROGRAMADESAYUNOS  NUMBER NULL ,
	N_ALUMNOSPROGRAMA    NUMBER NULL ,
	N_IDTURNOESCOLAR     NUMBER CONSTRAINT SYS_C0011521 NOT NULL ,
	N_IDTIPOESCUELA      NUMBER CONSTRAINT SYS_C0011522 NOT NULL ,
	N_IDESTATUS          NUMBER CONSTRAINT SYS_C0011523 NOT NULL ,
	N_IDINMUEBLE         NUMBER CONSTRAINT SYS_C0011524 NOT NULL ,
	N_IDZONAESCOLAR      NUMBER CONSTRAINT SYS_C0011525 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011526 NOT NULL ,
	N_IDSERVICIOESCUELA  NUMBER CONSTRAINT SYS_C0011527 NOT NULL ,
	N_IDDEPENDENCIAOPERATIVA NUMBER CONSTRAINT SYS_C0011528 NOT NULL ,
	N_IDDEPENDENCIANORMATIVA NUMBER CONSTRAINT SYS_C0011529 NOT NULL ,
	N_IDSERVICIOREGIONAL NUMBER CONSTRAINT SYS_C0011530 NOT NULL ,
	N_IDSOSTENIMIENTO    NUMBER CONSTRAINT SYS_C0011531 NOT NULL ,
	N_IDMODALIDAD        NUMBER CONSTRAINT SYS_C0011532 NOT NULL ,
	N_IDTIPOINCORPORACIONSEP NUMBER CONSTRAINT SYS_C0011533 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0011534 NOT NULL ,
	N_IDPERSONAPLAZA     NUMBER NULL ,
	N_PROMOVIDO          NUMBER DEFAULT  0  NULL ,
	N_IDESTRUCTURA       NUMBER NULL ,
	N_SAID               NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TC_ESCUELA
	 FOR TC_ESCUELA;




CREATE SYNONYM TC_ESCUELA
	 FOR TC_ESCUELA;



CREATE UNIQUE INDEX TC_ESCUELA_PK ON TC_ESCUELA
(N_ID   ASC);



ALTER TABLE TC_ESCUELA
	ADD CONSTRAINT  TC_ESCUELA_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TC_ESCUELA_U1 ON TC_ESCUELA
(S_CCT   ASC);



ALTER TABLE TC_ESCUELA
ADD CONSTRAINT  TC_ESCUELA_U1 UNIQUE (S_CCT);



CREATE  INDEX TC_ESCUELA_U3 ON TC_ESCUELA
(S_CLAVE   ASC);



CREATE  INDEX TC_ESCUELA_U2 ON TC_ESCUELA
(S_OP   ASC);



CREATE TABLE TC_ESCUELAAULA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011535 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011536 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011537 NOT NULL ,
	N_IDUSOAULA          NUMBER CONSTRAINT SYS_C0011538 NOT NULL ,
	N_IDGRUPO            NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_CAPACIDAD          NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_IDINMUEBLELOCAL    NUMBER CONSTRAINT SYS_C0011539 NOT NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ESCUELAAULA
	 FOR TC_ESCUELAAULA;




CREATE SYNONYM TC_ESCUELAAULA
	 FOR TC_ESCUELAAULA;



CREATE UNIQUE INDEX TC_ESCUELAAULA_PK ON TC_ESCUELAAULA
(N_ID   ASC);



ALTER TABLE TC_ESCUELAAULA
	ADD CONSTRAINT  TC_ESCUELAAULA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ESCUELAAULA_INDEX1 ON TC_ESCUELAAULA
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC,N_IDGRUPO   ASC);



CREATE TABLE TC_ESCUELAAULAHISTORICO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011540 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011541 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011542 NOT NULL ,
	N_IDUSOAULA          NUMBER CONSTRAINT SYS_C0011543 NOT NULL ,
	N_IDGRUPO            NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_CAPACIDAD          NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_IDINMUEBLELOCAL    NUMBER CONSTRAINT SYS_C0011544 NOT NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_IDESCUELAAULA      NUMBER NULL ,
	D_FECHACAMBIO        TIMESTAMP(6) NULL ,
	D_FECHAFINMOVIMIENTO TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM TC_ESCUELAAULAHISTORICO
	 FOR TC_ESCUELAAULAHISTORICO;




CREATE SYNONYM TC_ESCUELAAULAHISTORICO
	 FOR TC_ESCUELAAULAHISTORICO;



CREATE UNIQUE INDEX TC_ESCUELAAULAHISTORICO_PK ON TC_ESCUELAAULAHISTORICO
(N_ID   ASC);



ALTER TABLE TC_ESCUELAAULAHISTORICO
	ADD CONSTRAINT  TC_ESCUELAAULAHISTORICO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ESCUELAEVENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011545 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011546 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ESCUELAEVENTO
	 FOR TC_ESCUELAEVENTO;




CREATE SYNONYM TC_ESCUELAEVENTO
	 FOR TC_ESCUELAEVENTO;



CREATE UNIQUE INDEX TC_ESCUELAEVENTO_PK ON TC_ESCUELAEVENTO
(N_ID   ASC);



ALTER TABLE TC_ESCUELAEVENTO
	ADD CONSTRAINT  TC_ESCUELAEVENTO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ESTADO_INMUEBLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011553 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011554 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ESTADO_INMUEBLE
	 FOR TC_ESTADO_INMUEBLE;




CREATE SYNONYM TC_ESTADO_INMUEBLE
	 FOR TC_ESTADO_INMUEBLE;



CREATE UNIQUE INDEX TC_ESTADO_INMUEBLE_PK ON TC_ESTADO_INMUEBLE
(N_ID   ASC);



ALTER TABLE TC_ESTADO_INMUEBLE
	ADD CONSTRAINT  TC_ESTADO_INMUEBLE_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ESTADO_INMUEBLE_UK ON TC_ESTADO_INMUEBLE
(S_CLAVE   ASC);



CREATE TABLE TC_ESTADOCIVIL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011549 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011550 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_ESTADOCIVIL
	 FOR TC_ESTADOCIVIL;




CREATE SYNONYM TC_ESTADOCIVIL
	 FOR TC_ESTADOCIVIL;



CREATE UNIQUE INDEX TC_ESTADOCIVIL_PK ON TC_ESTADOCIVIL
(N_ID   ASC);



ALTER TABLE TC_ESTADOCIVIL
	ADD CONSTRAINT  TC_ESTADOCIVIL_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ESTATUSALUMNO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011555 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011556 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_ESTATUSALUMNO
	 FOR TC_ESTATUSALUMNO;




CREATE SYNONYM TC_ESTATUSALUMNO
	 FOR TC_ESTATUSALUMNO;



CREATE UNIQUE INDEX TC_ESTATUSALUMNO_PK ON TC_ESTATUSALUMNO
(N_ID   ASC);



ALTER TABLE TC_ESTATUSALUMNO
	ADD CONSTRAINT  TC_ESTATUSALUMNO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ESTATUSINCIDENCIA_ALUM
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011561 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011562 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ESTATUSINCIDENCIA_ALUM
	 FOR TC_ESTATUSINCIDENCIA_ALUM;




CREATE SYNONYM TC_ESTATUSINCIDENCIA_ALUM
	 FOR TC_ESTATUSINCIDENCIA_ALUM;



CREATE UNIQUE INDEX TC_ESTATUSINCIDENCIAALUMNO_PK ON TC_ESTATUSINCIDENCIA_ALUM
(N_ID   ASC);



ALTER TABLE TC_ESTATUSINCIDENCIA_ALUM
	ADD CONSTRAINT  TC_ESTATUSINCIDENCIAALUMNO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ESTUDIOESCUELA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011565 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011566 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ESTUDIOESCUELA
	 FOR TC_ESTUDIOESCUELA;




CREATE SYNONYM TC_ESTUDIOESCUELA
	 FOR TC_ESTUDIOESCUELA;



CREATE UNIQUE INDEX TC_ESTUDIOESCUELA_PK ON TC_ESTUDIOESCUELA
(N_ID   ASC);



ALTER TABLE TC_ESTUDIOESCUELA
	ADD CONSTRAINT  TC_ESTUDIOESCUELA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ETNIASINDIGENAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011567 NOT NULL ,
	N_IDMUNICIPIOETNIA   NUMBER CONSTRAINT SYS_C0011568 NOT NULL ,
	N_IDDIALECTOINDIGENA NUMBER CONSTRAINT SYS_C0011569 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ETNIASINDIGENAS
	 FOR TC_ETNIASINDIGENAS;




CREATE SYNONYM TC_ETNIASINDIGENAS
	 FOR TC_ETNIASINDIGENAS;



CREATE UNIQUE INDEX TC_ETNIASINDIGENAS_PK ON TC_ETNIASINDIGENAS
(N_ID   ASC);



ALTER TABLE TC_ETNIASINDIGENAS
	ADD CONSTRAINT  TC_ETNIASINDIGENAS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_FALTACONDUCTA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011570 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(500 BYTE) CONSTRAINT SYS_C0011571 NOT NULL ,
	N_IDNIVELFALTA       NUMBER CONSTRAINT SYS_C0011572 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011573 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_FALTACONDUCTA
	 FOR TC_FALTACONDUCTA;




CREATE SYNONYM TC_FALTACONDUCTA
	 FOR TC_FALTACONDUCTA;



CREATE UNIQUE INDEX TC_FALTACONDUCTA_PK ON TC_FALTACONDUCTA
(N_ID   ASC);



ALTER TABLE TC_FALTACONDUCTA
	ADD CONSTRAINT  TC_FALTACONDUCTA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_FALTACONDUCTA_UK ON TC_FALTACONDUCTA
(S_CLAVE   ASC);



CREATE TABLE TC_FLUJO_MOTIVO_RECHAZO
(
	N_ID                 NUMBER NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TC_FLUJO_MOTIVO_RECHAZO
	 FOR TC_FLUJO_MOTIVO_RECHAZO;




CREATE SYNONYM TC_FLUJO_MOTIVO_RECHAZO
	 FOR TC_FLUJO_MOTIVO_RECHAZO;



CREATE UNIQUE INDEX TC_FLUJO_MOTIVO_RECHAZO_PK ON TC_FLUJO_MOTIVO_RECHAZO
(N_ID   ASC);



ALTER TABLE TC_FLUJO_MOTIVO_RECHAZO
	ADD CONSTRAINT  TC_FLUJO_MOTIVO_RECHAZO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_FLUJOGESTION
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012434 NOT NULL ,
	S_CLAVE              VARCHAR2(10 BYTE) NULL ,
	S_DESCRIPCION        NVARCHAR2(150) NULL ,
	N_ESTATUS            NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TC_FLUJOGESTION
	 FOR TC_FLUJOGESTION;




CREATE SYNONYM TC_FLUJOGESTION
	 FOR TC_FLUJOGESTION;



CREATE UNIQUE INDEX TC_FLUJOGESTION_PK ON TC_FLUJOGESTION
(N_ID   ASC);



ALTER TABLE TC_FLUJOGESTION
	ADD CONSTRAINT  TC_FLUJOGESTION_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_FLUJOGESTIONDET
(
	N_IDFLUJOGESTION     NUMBER(10) NULL ,
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012435 NOT NULL ,
	S_DESCRIPCION        NVARCHAR2(150) NULL ,
	N_IDFLUJOGESTIONDETAUT NUMBER(10) NULL ,
	N_IDFLUJOGESTIONDETREC NUMBER(10) NULL ,
	N_IDFLUJOGESTIONDETCAN NUMBER(10) NULL ,
	N_DIAS               NUMBER(10) NULL ,
	S_PROCESO            NVARCHAR2(30) NULL ,
	S_REPORTE            NVARCHAR2(150) NULL ,
	N_OPERACION          NUMBER NULL ,
	N_ESTATUSENVIO       NUMBER NULL ,
	N_MOSTRAR_FOLIOS     NUMBER NULL ,
	N_MOSTRAR_DATOS_COMPLEMENT NUMBER NULL ,
	S_LEYENDA_AUTORIZAR  VARCHAR2(200 BYTE) DEFAULT  'AUTORIZAR'  NULL ,
	S_LEYENDA_CANCELAR   VARCHAR2(200 BYTE) DEFAULT  'CANCELAR'  NULL ,
	S_LEYENDA_RECHAZAR   VARCHAR2(200 BYTE) DEFAULT  'RECHAZAR'  NULL ,
	S_LEYENDA_ASIGNAR    VARCHAR2(200 BYTE) DEFAULT  'ASIGNAR'  NULL ,
	N_MOSTRAR_REGISTRO_LLAMADAS NUMBER DEFAULT  1  NULL ,
	S_MENSAJE            VARCHAR2(250 BYTE) NULL ,
	S_ICONO              VARCHAR2(250 BYTE) NULL ,
	S_SITUACION_REALIZADA VARCHAR2(150 BYTE) NULL ,
	S_MENSAJE_CANCELA    VARCHAR2(250 BYTE) NULL ,
	S_MENSAJE_RECHAZA    VARCHAR2(250 BYTE) NULL ,
	N_IDFLUJO_MOTIVO_RECHAZO NUMBER NULL ,
	S_LEYENDA_REPORTE    VARCHAR2(200 BYTE) DEFAULT  'Oficio'  NULL ,
	N_ID_REFERENCIA      NUMBER NULL ,
	N_IDFLUJOSINSUPLENCIA NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_FLUJOGESTIONDET
	 FOR TC_FLUJOGESTIONDET;




CREATE SYNONYM TC_FLUJOGESTIONDET
	 FOR TC_FLUJOGESTIONDET;



CREATE UNIQUE INDEX TC_FLUJOGESTIONDET_PK ON TC_FLUJOGESTIONDET
(N_ID   ASC);



ALTER TABLE TC_FLUJOGESTIONDET
	ADD CONSTRAINT  TC_FLUJOGESTIONDET_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_FORMATOCORREO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011574 NOT NULL ,
	S_SUBJECT            VARCHAR2(250 BYTE) NULL ,
	S_BODY               VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011575 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_FORMATOCORREO
	 FOR TC_FORMATOCORREO;




CREATE SYNONYM TC_FORMATOCORREO
	 FOR TC_FORMATOCORREO;



CREATE UNIQUE INDEX TC_FORMATOCORREO_PK ON TC_FORMATOCORREO
(N_ID   ASC);



ALTER TABLE TC_FORMATOCORREO
	ADD CONSTRAINT  TC_FORMATOCORREO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_FORMATOCORREO_UK ON TC_FORMATOCORREO
(S_CLAVE   ASC);



CREATE TABLE TC_FUNCIONREAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011578 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_TIPOFUNCIONREAL    NUMBER NULL ,
	N_REQUIEREGRUPO      NUMBER NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	S_HORAENTRADA        CHAR(20 BYTE) NULL ,
	S_HORASALIDA         CHAR(20 BYTE) NULL ,
	N_ACTIVAUSER         NUMBER DEFAULT  0  NULL ,
	N_IDMODALIDAD        NUMBER NULL ,
	N_IDFUNCIONREALTIPO  NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TC_FUNCIONREAL
	 FOR TC_FUNCIONREAL;




CREATE SYNONYM TC_FUNCIONREAL
	 FOR TC_FUNCIONREAL;



CREATE UNIQUE INDEX TC_FUNCIONREAL_PK ON TC_FUNCIONREAL
(N_ID   ASC);



ALTER TABLE TC_FUNCIONREAL
	ADD CONSTRAINT  TC_FUNCIONREAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_FUNCIONREALTIPO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012396 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_FUNCIONREALTIPO
	 FOR TC_FUNCIONREALTIPO;




CREATE SYNONYM TC_FUNCIONREALTIPO
	 FOR TC_FUNCIONREALTIPO;



CREATE UNIQUE INDEX TC_FUNCIONREALTIPO_PK ON TC_FUNCIONREALTIPO
(N_ID   ASC);



ALTER TABLE TC_FUNCIONREALTIPO
	ADD CONSTRAINT  TC_FUNCIONREALTIPO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_GRADOESCOLAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011579 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011580 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011581 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_GRADOESCOLAR
	 FOR TC_GRADOESCOLAR;




CREATE SYNONYM TC_GRADOESCOLAR
	 FOR TC_GRADOESCOLAR;



CREATE UNIQUE INDEX TC_GRADOESCOLAR_PK ON TC_GRADOESCOLAR
(N_ID   ASC);



ALTER TABLE TC_GRADOESCOLAR
	ADD CONSTRAINT  TC_GRADOESCOLAR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_GRADOESCOLAR_UK ON TC_GRADOESCOLAR
(S_CLAVE   ASC);



CREATE TABLE TC_GROUP
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011582 NOT NULL ,
	S_DESCRIPTION        VARCHAR2(30 BYTE) NULL ,
	N_STATUS             NUMBER(1) DEFAULT  1  NULL ,
	S_NAME               VARCHAR2(200 BYTE) NULL ,
	S_APLICACION         VARCHAR2(100 BYTE) NULL ,
	N_ID_GROUP_BIENES    NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_GROUP
	 FOR TC_GROUP;




CREATE SYNONYM TC_GROUP
	 FOR TC_GROUP;



CREATE UNIQUE INDEX TC_GROUP_PK ON TC_GROUP
(N_ID   ASC);



ALTER TABLE TC_GROUP
	ADD CONSTRAINT  TC_GROUP_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_GROUP_UK ON TC_GROUP
(N_STATUS   ASC);



CREATE TABLE TC_GROUP_BIENES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012914 NOT NULL ,
	S_CLAVE              VARCHAR2(250 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_GROUP_BIENES
	 FOR TC_GROUP_BIENES;




CREATE SYNONYM TC_GROUP_BIENES
	 FOR TC_GROUP_BIENES;



CREATE UNIQUE INDEX TC_GROUP_BIENES_PK ON TC_GROUP_BIENES
(N_ID   ASC);



ALTER TABLE TC_GROUP_BIENES
	ADD CONSTRAINT  TC_GROUP_BIENES_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_GRUPOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011583 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER CONSTRAINT SYS_C0011584 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011585 NOT NULL ,
	N_MULTIGRADO         NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TC_GRUPOS
	 FOR TC_GRUPOS;




CREATE SYNONYM TC_GRUPOS
	 FOR TC_GRUPOS;



CREATE UNIQUE INDEX TC_GRUPOS_PK ON TC_GRUPOS
(N_ID   ASC);



ALTER TABLE TC_GRUPOS
	ADD CONSTRAINT  TC_GRUPOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_GRUPOS_UK ON TC_GRUPOS
(S_CLAVE   ASC);



CREATE TABLE TC_IDIOMAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011586 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011587 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_IDIOMAS
	 FOR TC_IDIOMAS;




CREATE SYNONYM TC_IDIOMAS
	 FOR TC_IDIOMAS;



CREATE UNIQUE INDEX TC_IDIOMAS_PK ON TC_IDIOMAS
(N_ID   ASC);



ALTER TABLE TC_IDIOMAS
	ADD CONSTRAINT  TC_IDIOMAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_IDIOMAS_UK ON TC_IDIOMAS
(S_CLAVE   ASC);



CREATE TABLE TC_INCIDENCIATIPOPERSONA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011592 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011593 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_INCIDENCIATIPOPERSONA
	 FOR TC_INCIDENCIATIPOPERSONA;




CREATE SYNONYM TC_INCIDENCIATIPOPERSONA
	 FOR TC_INCIDENCIATIPOPERSONA;



CREATE UNIQUE INDEX TC_INCIDENCIATIPOPERSONA_PK ON TC_INCIDENCIATIPOPERSONA
(N_ID   ASC);



ALTER TABLE TC_INCIDENCIATIPOPERSONA
	ADD CONSTRAINT  TC_INCIDENCIATIPOPERSONA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_INCIDENCIATIPOPERSONA_UK ON TC_INCIDENCIATIPOPERSONA
(S_CLAVE   ASC);



CREATE TABLE TC_INDICADORPROMOVIDO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011594 NOT NULL ,
	S_CLAVE              VARCHAR2(30 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(50 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_TENDENCIAPROMO     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_INDICADORPROMOVIDO
	 FOR TC_INDICADORPROMOVIDO;




CREATE SYNONYM TC_INDICADORPROMOVIDO
	 FOR TC_INDICADORPROMOVIDO;



CREATE UNIQUE INDEX TC_INDICADORPROMOVIDO_PK ON TC_INDICADORPROMOVIDO
(N_ID   ASC);



ALTER TABLE TC_INDICADORPROMOVIDO
	ADD CONSTRAINT  TC_INDICADORPROMOVIDO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_INDICADORPROMOVIDO_UK ON TC_INDICADORPROMOVIDO
(S_CLAVE   ASC);



CREATE TABLE TC_INMUEBLESITUACION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012391 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_TIPO               NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_INMUEBLESITUACION
	 FOR TC_INMUEBLESITUACION;




CREATE SYNONYM TC_INMUEBLESITUACION
	 FOR TC_INMUEBLESITUACION;



CREATE UNIQUE INDEX TC_SITUACIONALUMNO_PK_1 ON TC_INMUEBLESITUACION
(N_ID   ASC);



ALTER TABLE TC_INMUEBLESITUACION
	ADD CONSTRAINT  TC_SITUACIONALUMNO_PK_1 PRIMARY KEY (N_ID);



CREATE TABLE TC_INMUEBLEUSO
(
	N_ID                 NUMBER NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_INMUEBLEUSO
	 FOR TC_INMUEBLEUSO;




CREATE SYNONYM TC_INMUEBLEUSO
	 FOR TC_INMUEBLEUSO;



CREATE UNIQUE INDEX TC_INMUEBLEUSO_PK ON TC_INMUEBLEUSO
(N_ID   ASC);



ALTER TABLE TC_INMUEBLEUSO
	ADD CONSTRAINT  TC_INMUEBLEUSO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_JEFATURASECTORIAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011595 NOT NULL ,
	N_IDDIRECCIONOPERATIVA NUMBER CONSTRAINT SYS_C0011596 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	S_TELEFONO           VARCHAR2(15 BYTE) NULL ,
	S_CCT                VARCHAR2(20 BYTE) NULL ,
	S_RESPONSABLE        VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_JEFATURASECTORIAL
	 FOR TC_JEFATURASECTORIAL;




CREATE SYNONYM TC_JEFATURASECTORIAL
	 FOR TC_JEFATURASECTORIAL;



CREATE UNIQUE INDEX TC_JEFATURASECTORIAL_PK ON TC_JEFATURASECTORIAL
(N_ID   ASC);



ALTER TABLE TC_JEFATURASECTORIAL
	ADD CONSTRAINT  TC_JEFATURASECTORIAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_JEFATURASECTORIAL_UK ON TC_JEFATURASECTORIAL
(S_CLAVE   ASC);



CREATE TABLE TC_LIBRODIRIGIDO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011597 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011598 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_LIBRODIRIGIDO
	 FOR TC_LIBRODIRIGIDO;




CREATE SYNONYM TC_LIBRODIRIGIDO
	 FOR TC_LIBRODIRIGIDO;



CREATE UNIQUE INDEX TC_LIBRODIRIGIDO_PK ON TC_LIBRODIRIGIDO
(N_ID   ASC);



ALTER TABLE TC_LIBRODIRIGIDO
	ADD CONSTRAINT  TC_LIBRODIRIGIDO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_LIBRODIRIGIDO_UK ON TC_LIBRODIRIGIDO
(S_CLAVE   ASC);



CREATE TABLE TC_LIBROS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011599 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_IDLIBRODIRIGIDO    NUMBER NULL ,
	N_IDLIBROUSO         NUMBER NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_IDASIGNATURA       NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_LIBROS
	 FOR TC_LIBROS;




CREATE SYNONYM TC_LIBROS
	 FOR TC_LIBROS;



CREATE UNIQUE INDEX TC_LIBROS_PK ON TC_LIBROS
(N_ID   ASC);



ALTER TABLE TC_LIBROS
	ADD CONSTRAINT  TC_LIBROS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_LIBROS_UK ON TC_LIBROS
(S_CLAVE   ASC);



CREATE TABLE TC_LIBROUSO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011600 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011601 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_LIBROUSO
	 FOR TC_LIBROUSO;




CREATE SYNONYM TC_LIBROUSO
	 FOR TC_LIBROUSO;



CREATE UNIQUE INDEX TC_LIBROUSO_PK ON TC_LIBROUSO
(N_ID   ASC);



ALTER TABLE TC_LIBROUSO
	ADD CONSTRAINT  TC_LIBROUSO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_LIBROUSO_UK ON TC_LIBROUSO
(S_CLAVE   ASC);



CREATE TABLE TC_MATERIALCONSTRUCCION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011606 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011607 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MATERIALCONSTRUCCION
	 FOR TC_MATERIALCONSTRUCCION;




CREATE SYNONYM TC_MATERIALCONSTRUCCION
	 FOR TC_MATERIALCONSTRUCCION;



CREATE UNIQUE INDEX TC_MATERIALCONSTRUCCION_PK ON TC_MATERIALCONSTRUCCION
(N_ID   ASC);



ALTER TABLE TC_MATERIALCONSTRUCCION
	ADD CONSTRAINT  TC_MATERIALCONSTRUCCION_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MATERIALCONSTRUCCION_UK ON TC_MATERIALCONSTRUCCION
(S_CLAVE   ASC);



CREATE TABLE TC_MEDIDADISCIPLINA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011608 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(500 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011609 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MEDIDADISCIPLINA
	 FOR TC_MEDIDADISCIPLINA;




CREATE SYNONYM TC_MEDIDADISCIPLINA
	 FOR TC_MEDIDADISCIPLINA;



CREATE UNIQUE INDEX TC_MEDIDADISCIPLINA_PK ON TC_MEDIDADISCIPLINA
(N_ID   ASC);



ALTER TABLE TC_MEDIDADISCIPLINA
	ADD CONSTRAINT  TC_MEDIDADISCIPLINA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MEDIDADISCIPLINA_UK ON TC_MEDIDADISCIPLINA
(S_CLAVE   ASC);



CREATE TABLE TC_MEDIDAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011610 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011611 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MEDIDAS
	 FOR TC_MEDIDAS;




CREATE SYNONYM TC_MEDIDAS
	 FOR TC_MEDIDAS;



CREATE UNIQUE INDEX TC_MEDIDAS_PK ON TC_MEDIDAS
(N_ID   ASC);



ALTER TABLE TC_MEDIDAS
	ADD CONSTRAINT  TC_MEDIDAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MEDIDAS_UK ON TC_MEDIDAS
(S_CLAVE   ASC);



CREATE TABLE TC_MENU
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011614 NOT NULL ,
	S_KEY                VARCHAR2(5 BYTE) CONSTRAINT SYS_C0011615 NOT NULL ,
	S_TYPE               VARCHAR2(1 BYTE) CONSTRAINT SYS_C0011616 NOT NULL ,
	S_DESCRIPTION        VARCHAR2(100 BYTE) CONSTRAINT SYS_C0011617 NOT NULL ,
	S_URL                VARCHAR2(200 BYTE) CONSTRAINT SYS_C0011618 NOT NULL ,
	N_CHANGELOG_ID       NUMBER NULL ,
	S_AUTHORITY          VARCHAR2(50 BYTE) CONSTRAINT SYS_C0011619 NOT NULL ,
	N_ORDER              NUMBER DEFAULT  0  CONSTRAINT SYS_C0011620 NOT NULL ,
	N_LINK               NUMBER DEFAULT  0  NULL ,
	S_PARENT             VARCHAR2(5 BYTE) NULL ,
	N_STATUS             NUMBER(1) DEFAULT  1  CONSTRAINT SYS_C0011621 NOT NULL ,
	N_IDMODULO           NUMBER CONSTRAINT SYS_C0011622 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MENU
	 FOR TC_MENU;




CREATE SYNONYM TC_MENU
	 FOR TC_MENU;



CREATE UNIQUE INDEX TC_MENU_PK ON TC_MENU
(N_ID   ASC);



ALTER TABLE TC_MENU
	ADD CONSTRAINT  TC_MENU_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MENU_UK ON TC_MENU
(S_KEY   ASC);



CREATE TABLE TC_MODALIDAD
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011623 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011624 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_MODALIDAD
	 FOR TC_MODALIDAD;




CREATE SYNONYM TC_MODALIDAD
	 FOR TC_MODALIDAD;



CREATE UNIQUE INDEX TC_MODALIDAD_PK ON TC_MODALIDAD
(N_ID   ASC);



ALTER TABLE TC_MODALIDAD
	ADD CONSTRAINT  TC_MODALIDAD_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MODALIDAD_UK ON TC_MODALIDAD
(S_CLAVE   ASC);



CREATE TABLE TC_MODALIDAD_FR
(
	N_IDMODALIDAD        NUMBER NULL ,
	N_IDFUNCIONREAL_ACT  NUMBER NULL ,
	N_IDFUNCIONREAL_ASI  NUMBER NULL ,
	N_DEFAULT            NUMBER NULL ,
	N_ID                 NUMBER NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MODALIDAD_FR
	 FOR TC_MODALIDAD_FR;




CREATE SYNONYM TC_MODALIDAD_FR
	 FOR TC_MODALIDAD_FR;



CREATE UNIQUE INDEX SYS_C0013884 ON TC_MODALIDAD_FR
(N_ID   ASC);



ALTER TABLE TC_MODALIDAD_FR
	ADD CONSTRAINT  SYS_C0013884 PRIMARY KEY (N_ID);



CREATE TABLE TC_MODULO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012970 NOT NULL ,
	S_CLAVE              VARCHAR2(25 BYTE) CONSTRAINT SYS_C0012971 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) CONSTRAINT SYS_C0012972 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012973 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MODULO
	 FOR TC_MODULO;




CREATE SYNONYM TC_MODULO
	 FOR TC_MODULO;



CREATE UNIQUE INDEX SYS_C0013828 ON TC_MODULO
(N_ID   ASC);



ALTER TABLE TC_MODULO
	ADD CONSTRAINT  SYS_C0013828 PRIMARY KEY (N_ID);



CREATE TABLE TC_MOTIVO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011625 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_REANUDACIONANTICIPADA NUMBER(6) NULL ,
	N_APLICAGENERO       NUMBER NULL ,
	S_NOMBRAMIETOS       CHAR(20 BYTE) NULL ,
	N_TIPOGOCE           NUMBER NULL ,
	N_ADMITEPRORROGA     NUMBER NULL ,
	N_IDMOVIMIENTO       NUMBER CONSTRAINT SYS_C0011626 NOT NULL ,
	N_DEFINITIVA         NUMBER NULL ,
	N_TIPOPERIODO        NUMBER(5) NULL ,
	N_DIASANTICIPACION   NUMBER DEFAULT  0  NULL ,
	N_IDSITUACIONLABORAL NUMBER DEFAULT  1  NULL ,
	N_IDMOTIVOREANUDAR   NUMBER DEFAULT  0  NULL ,
	N_ORDENREANUDACION   NUMBER DEFAULT  0  NULL ,
	N_IDPROCESOSPERSONAL NUMBER NULL ,
	N_IDFUNCIONREAL      NUMBER DEFAULT  0  NULL ,
	N_IDMOTIVOPRORROGA   NUMBER DEFAULT  0  NULL ,
	N_PIDEEFECTOS        NUMBER DEFAULT  3  NULL ,
	N_PIDEFUP            NUMBER DEFAULT  0  NULL ,
	S_REQUISITOS         VARCHAR2(4000 BYTE) NULL ,
	N_IDMOTIVOCANCELA    NUMBER NULL ,
	N_DIASCANCELA        NUMBER NULL ,
	N_DIAS_PARA_SOLICITUD NUMBER NULL ,
	N_IDPARTIDA          NUMBER NULL ,
	S_CLONADA            VARCHAR2(20 BYTE) NULL ,
	S_NOMBRAMIENTOS      VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVO
	 FOR TC_MOTIVO;




CREATE SYNONYM TC_MOTIVO
	 FOR TC_MOTIVO;



CREATE UNIQUE INDEX TC_MOTIVO_PK ON TC_MOTIVO
(N_ID   ASC);



ALTER TABLE TC_MOTIVO
	ADD CONSTRAINT  TC_MOTIVO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_MOTIVOBAJAALUMNO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011633 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011634 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVOBAJAALUMNO
	 FOR TC_MOTIVOBAJAALUMNO;




CREATE SYNONYM TC_MOTIVOBAJAALUMNO
	 FOR TC_MOTIVOBAJAALUMNO;



CREATE UNIQUE INDEX TC_MOTIVOBAJAALUMNO_PK ON TC_MOTIVOBAJAALUMNO
(N_ID   ASC);



ALTER TABLE TC_MOTIVOBAJAALUMNO
	ADD CONSTRAINT  TC_MOTIVOBAJAALUMNO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MOTIVOBAJAALUMNO_UK ON TC_MOTIVOBAJAALUMNO
(S_CLAVE   ASC);



CREATE TABLE TC_MOTIVOFUNCIONREAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011637 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011638 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_IDSITUACIONLABORAL NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVOFUNCIONREAL
	 FOR TC_MOTIVOFUNCIONREAL;




CREATE SYNONYM TC_MOTIVOFUNCIONREAL
	 FOR TC_MOTIVOFUNCIONREAL;



CREATE UNIQUE INDEX TC_MOTIVOFUNCIONREAL_PK ON TC_MOTIVOFUNCIONREAL
(N_ID   ASC);



ALTER TABLE TC_MOTIVOFUNCIONREAL
	ADD CONSTRAINT  TC_MOTIVOFUNCIONREAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MOTIVOFUNCIONREAL_UK ON TC_MOTIVOFUNCIONREAL
(S_CLAVE   ASC);



CREATE TABLE TC_MOTIVOPLANDEACCION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011641 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011642 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVOPLANDEACCION
	 FOR TC_MOTIVOPLANDEACCION;




CREATE SYNONYM TC_MOTIVOPLANDEACCION
	 FOR TC_MOTIVOPLANDEACCION;



CREATE UNIQUE INDEX TC_MOTIVOPLANDEACCION_PK ON TC_MOTIVOPLANDEACCION
(N_ID   ASC);



ALTER TABLE TC_MOTIVOPLANDEACCION
	ADD CONSTRAINT  TC_MOTIVOPLANDEACCION_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MOTIVOPLANDEACCION_UK ON TC_MOTIVOPLANDEACCION
(S_CLAVE   ASC);



CREATE TABLE TC_MOTIVOPROCESOS
(
	N_IDMOTIVO           NUMBER CONSTRAINT SYS_C0011643 NOT NULL ,
	N_ORDEN              NUMBER(10) CONSTRAINT SYS_C0011644 NOT NULL ,
	N_IDPROCESOSPERSONAL NUMBER NULL ,
	N_CRITICO            NUMBER(1) NULL ,
	S_MENSAJE            VARCHAR2(500 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVOPROCESOS
	 FOR TC_MOTIVOPROCESOS;




CREATE SYNONYM TC_MOTIVOPROCESOS
	 FOR TC_MOTIVOPROCESOS;



CREATE UNIQUE INDEX TC_MOTIVOPROCESOS_PK ON TC_MOTIVOPROCESOS
(N_IDMOTIVO   ASC,N_ORDEN   ASC);



ALTER TABLE TC_MOTIVOPROCESOS
	ADD CONSTRAINT  TC_MOTIVOPROCESOS_PK PRIMARY KEY (N_IDMOTIVO,N_ORDEN);



CREATE TABLE TC_MOTIVOPROMEDIOSHIS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012368 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVOPROMEDIOSHIS
	 FOR TC_MOTIVOPROMEDIOSHIS;




CREATE SYNONYM TC_MOTIVOPROMEDIOSHIS
	 FOR TC_MOTIVOPROMEDIOSHIS;



CREATE UNIQUE INDEX TC_MOTIVOPROMEDIOSHIS_PK ON TC_MOTIVOPROMEDIOSHIS
(N_ID   ASC);



ALTER TABLE TC_MOTIVOPROMEDIOSHIS
	ADD CONSTRAINT  TC_MOTIVOPROMEDIOSHIS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_MOTIVOREC
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012352 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(38) NULL 
);



CREATE PUBLIC SYNONYM TC_MOTIVOREC
	 FOR TC_MOTIVOREC;




CREATE SYNONYM TC_MOTIVOREC
	 FOR TC_MOTIVOREC;



CREATE UNIQUE INDEX PK15 ON TC_MOTIVOREC
(N_ID   ASC);



ALTER TABLE TC_MOTIVOREC
	ADD CONSTRAINT  PK15 PRIMARY KEY (N_ID);



CREATE TABLE TC_MOVIMIENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011645 NOT NULL ,
	N_TIPOMOVIMIENTO     NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) CONSTRAINT SYS_C0011646 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_ALCANCE            NUMBER(5) NULL ,
	N_ESTATUSPPE         NUMBER NULL ,
	N_ESTATUSPA          NUMBER NULL ,
	N_ESTATUSP           NUMBER NULL ,
	N_SITUACIONPA        NUMBER NULL ,
	N_SITUACIONP         NUMBER NULL ,
	N_BLOQUEFYR          NUMBER DEFAULT  1  NULL ,
	N_TIPOAFECTACION     NUMBER DEFAULT  -1  NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDSERVICIOESCUELA  NUMBER DEFAULT  1  NULL ,
	N_ESTATUSPERSONA     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_MOVIMIENTO
	 FOR TC_MOVIMIENTO;




CREATE SYNONYM TC_MOVIMIENTO
	 FOR TC_MOVIMIENTO;



CREATE UNIQUE INDEX TC_MOVIMIENTO_PK ON TC_MOVIMIENTO
(N_ID   ASC);



ALTER TABLE TC_MOVIMIENTO
	ADD CONSTRAINT  TC_MOVIMIENTO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_MOVIMIENTOALUMNO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011647 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	S_LINKMOVIMIENTO     VARCHAR2(250 BYTE) NULL ,
	N_AFECTAESTATUS      NUMBER(1) NULL ,
	N_ENVIACORREO        NUMBER NULL ,
	N_IDFORMATOCORREO    NUMBER CONSTRAINT SYS_C0011648 NOT NULL ,
	N_IDESTATUSALUMNO    NUMBER NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011649 NOT NULL ,
	N_IDPROCESO          NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_MOVIMIENTOALUMNO
	 FOR TC_MOVIMIENTOALUMNO;




CREATE SYNONYM TC_MOVIMIENTOALUMNO
	 FOR TC_MOVIMIENTOALUMNO;



CREATE UNIQUE INDEX TC_MOVIMIENTOALUMNO_PK ON TC_MOVIMIENTOALUMNO
(N_ID   ASC);



ALTER TABLE TC_MOVIMIENTOALUMNO
	ADD CONSTRAINT  TC_MOVIMIENTOALUMNO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MOVIMIENTOALUMNO_UK ON TC_MOVIMIENTOALUMNO
(S_CLAVE   ASC);



CREATE TABLE TC_MUNICIPIODELEGACIONES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011653 NOT NULL ,
	N_IDENTIDADFEDERATIVA NUMBER CONSTRAINT SYS_C0011654 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011655 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_MUNICIPIODELEGACIONES
	 FOR TC_MUNICIPIODELEGACIONES;




CREATE SYNONYM TC_MUNICIPIODELEGACIONES
	 FOR TC_MUNICIPIODELEGACIONES;



CREATE UNIQUE INDEX TC_MUNICIPIODELEGACIONES_PK ON TC_MUNICIPIODELEGACIONES
(N_ID   ASC);



ALTER TABLE TC_MUNICIPIODELEGACIONES
	ADD CONSTRAINT  TC_MUNICIPIODELEGACIONES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MUNICIPIODELEGACIONES_UK ON TC_MUNICIPIODELEGACIONES
(S_CLAVE   ASC);



CREATE TABLE TC_MUNICIPIOETNIAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011656 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011657 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_MUNICIPIOETNIAS
	 FOR TC_MUNICIPIOETNIAS;




CREATE SYNONYM TC_MUNICIPIOETNIAS
	 FOR TC_MUNICIPIOETNIAS;



CREATE UNIQUE INDEX TC_MUNICIPIOETNIAS_PK ON TC_MUNICIPIOETNIAS
(N_ID   ASC);



ALTER TABLE TC_MUNICIPIOETNIAS
	ADD CONSTRAINT  TC_MUNICIPIOETNIAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_MUNICIPIOETNIAS_UK ON TC_MUNICIPIOETNIAS
(S_CLAVE   ASC);



CREATE TABLE TC_NECESIDADESESPECIALES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011658 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011659 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_NECESIDADESESPECIALES
	 FOR TC_NECESIDADESESPECIALES;




CREATE SYNONYM TC_NECESIDADESESPECIALES
	 FOR TC_NECESIDADESESPECIALES;



CREATE UNIQUE INDEX TC_NECESIDADESESPECIALES_PK ON TC_NECESIDADESESPECIALES
(N_ID   ASC);



ALTER TABLE TC_NECESIDADESESPECIALES
	ADD CONSTRAINT  TC_NECESIDADESESPECIALES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NECESIDADESESPECIALES_UK ON TC_NECESIDADESESPECIALES
(S_CLAVE   ASC);



CREATE TABLE TC_NIVELAUTORIZACION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011660 NOT NULL ,
	N_IDMOTIVO           NUMBER CONSTRAINT SYS_C0011661 NOT NULL ,
	N_IDCATEGORIA        NUMBER NULL ,
	N_SECUENCIA          NUMBER CONSTRAINT SYS_C0011662 NOT NULL ,
	N_ESOBLIGATORIO      NUMBER(2) CONSTRAINT SYS_C0011663 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(1) DEFAULT  1  CONSTRAINT SYS_C0011664 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELAUTORIZACION
	 FOR TC_NIVELAUTORIZACION;




CREATE SYNONYM TC_NIVELAUTORIZACION
	 FOR TC_NIVELAUTORIZACION;



CREATE UNIQUE INDEX TC_NIVELAUTORIZACION_PK ON TC_NIVELAUTORIZACION
(N_ID   ASC);



ALTER TABLE TC_NIVELAUTORIZACION
	ADD CONSTRAINT  TC_NIVELAUTORIZACION_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NIVELAUTORIZACION_UK ON TC_NIVELAUTORIZACION
(S_CLAVE   ASC);



CREATE TABLE TC_NIVELEDUCATIVO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011665 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER(1) DEFAULT  1  CONSTRAINT SYS_C0011666 NOT NULL ,
	N_EDITABLE_EN_MANTENIMIENTO NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELEDUCATIVO
	 FOR TC_NIVELEDUCATIVO;




CREATE SYNONYM TC_NIVELEDUCATIVO
	 FOR TC_NIVELEDUCATIVO;



CREATE UNIQUE INDEX TC_NIVELEDUCATIVO_PK ON TC_NIVELEDUCATIVO
(N_ID   ASC);



ALTER TABLE TC_NIVELEDUCATIVO
	ADD CONSTRAINT  TC_NIVELEDUCATIVO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NIVELEDUCATIVO_UK ON TC_NIVELEDUCATIVO
(S_CLAVE   ASC);



CREATE TABLE TC_NIVELESTUDIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011667 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011668 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELESTUDIO
	 FOR TC_NIVELESTUDIO;




CREATE SYNONYM TC_NIVELESTUDIO
	 FOR TC_NIVELESTUDIO;



CREATE UNIQUE INDEX TC_NIVELESTUDIO_PK ON TC_NIVELESTUDIO
(N_ID   ASC);



ALTER TABLE TC_NIVELESTUDIO
	ADD CONSTRAINT  TC_NIVELESTUDIO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NIVELESTUDIO_UK ON TC_NIVELESTUDIO
(S_CLAVE   ASC);



CREATE TABLE TC_NIVELFALTA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011669 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011670 NOT NULL ,
	N_IDNIVELFALTATIPO   NUMBER CONSTRAINT SYS_C0011671 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011672 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELFALTA
	 FOR TC_NIVELFALTA;




CREATE SYNONYM TC_NIVELFALTA
	 FOR TC_NIVELFALTA;



CREATE UNIQUE INDEX TC_NIVELFALTA_PK ON TC_NIVELFALTA
(N_ID   ASC);



ALTER TABLE TC_NIVELFALTA
	ADD CONSTRAINT  TC_NIVELFALTA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NIVELFALTA_UK ON TC_NIVELFALTA
(S_CLAVE   ASC);



CREATE TABLE TC_NIVELFALTATIPO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011673 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011674 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELFALTATIPO
	 FOR TC_NIVELFALTATIPO;




CREATE SYNONYM TC_NIVELFALTATIPO
	 FOR TC_NIVELFALTATIPO;



CREATE UNIQUE INDEX TC_NIVELFALTATIPO_PK ON TC_NIVELFALTATIPO
(N_ID   ASC);



ALTER TABLE TC_NIVELFALTATIPO
	ADD CONSTRAINT  TC_NIVELFALTATIPO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NIVELFALTATIPO_UK ON TC_NIVELFALTATIPO
(S_CLAVE   ASC);



CREATE TABLE TC_NIVELMEDIDA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011675 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011676 NOT NULL ,
	N_IDNIVELFALTA       NUMBER CONSTRAINT SYS_C0011677 NOT NULL ,
	N_IDMEDIDADISCIPLINA NUMBER CONSTRAINT SYS_C0011678 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELMEDIDA
	 FOR TC_NIVELMEDIDA;




CREATE SYNONYM TC_NIVELMEDIDA
	 FOR TC_NIVELMEDIDA;



CREATE UNIQUE INDEX TC_NIVELMEDIDA_PK ON TC_NIVELMEDIDA
(N_ID   ASC);



ALTER TABLE TC_NIVELMEDIDA
	ADD CONSTRAINT  TC_NIVELMEDIDA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_NIVELNUTRICION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011679 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011680 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_NIVELNUTRICION
	 FOR TC_NIVELNUTRICION;




CREATE SYNONYM TC_NIVELNUTRICION
	 FOR TC_NIVELNUTRICION;



CREATE UNIQUE INDEX TC_NIVELNUTRICION_PK ON TC_NIVELNUTRICION
(N_ID   ASC);



ALTER TABLE TC_NIVELNUTRICION
	ADD CONSTRAINT  TC_NIVELNUTRICION_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_NIVELNUTRICION_UK ON TC_NIVELNUTRICION
(S_CLAVE   ASC);



CREATE TABLE TC_OCUPACION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011681 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011682 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_OCUPACION
	 FOR TC_OCUPACION;




CREATE SYNONYM TC_OCUPACION
	 FOR TC_OCUPACION;



CREATE UNIQUE INDEX TC_OCUPACION_PK ON TC_OCUPACION
(N_ID   ASC);



ALTER TABLE TC_OCUPACION
	ADD CONSTRAINT  TC_OCUPACION_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_OCUPACIONINMUEBLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012372 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_OCUPACIONINMUEBLE
	 FOR TC_OCUPACIONINMUEBLE;




CREATE SYNONYM TC_OCUPACIONINMUEBLE
	 FOR TC_OCUPACIONINMUEBLE;



CREATE UNIQUE INDEX TC_OCUPACIONINMUEBLE_PK ON TC_OCUPACIONINMUEBLE
(N_ID   ASC);



ALTER TABLE TC_OCUPACIONINMUEBLE
	ADD CONSTRAINT  TC_OCUPACIONINMUEBLE_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_ORIGENPERSONA
(
	N_ID                 NUMBER NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ORIGENPERSONA
	 FOR TC_ORIGENPERSONA;




CREATE SYNONYM TC_ORIGENPERSONA
	 FOR TC_ORIGENPERSONA;



CREATE UNIQUE INDEX TC_ORIGENPERSONA_PK ON TC_ORIGENPERSONA
(N_ID   ASC);



ALTER TABLE TC_ORIGENPERSONA
	ADD CONSTRAINT  TC_ORIGENPERSONA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ORIGENPERSONA_UK ON TC_ORIGENPERSONA
(S_CLAVE   ASC);



CREATE TABLE TC_ORIGENREGISTRO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011688 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011689 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_ORIGENREGISTRO
	 FOR TC_ORIGENREGISTRO;




CREATE SYNONYM TC_ORIGENREGISTRO
	 FOR TC_ORIGENREGISTRO;



CREATE UNIQUE INDEX TC_ORIGENREGISTRO_PK ON TC_ORIGENREGISTRO
(N_ID   ASC);



ALTER TABLE TC_ORIGENREGISTRO
	ADD CONSTRAINT  TC_ORIGENREGISTRO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ORIGENREGISTRO_UK ON TC_ORIGENREGISTRO
(S_CLAVE   ASC);



CREATE TABLE TC_PAIS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011690 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011691 NOT NULL ,
	N_IDREGION           NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TC_PAIS
	 FOR TC_PAIS;




CREATE SYNONYM TC_PAIS
	 FOR TC_PAIS;



CREATE UNIQUE INDEX TC_PAIS_PK ON TC_PAIS
(N_ID   ASC);



ALTER TABLE TC_PAIS
	ADD CONSTRAINT  TC_PAIS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PARAMETRO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011693 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011694 NOT NULL ,
	N_NIVELPARAMETRO     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_PARAMETRO
	 FOR TC_PARAMETRO;




CREATE SYNONYM TC_PARAMETRO
	 FOR TC_PARAMETRO;



CREATE UNIQUE INDEX TC_PARAMETRO_PK ON TC_PARAMETRO
(N_ID   ASC);



ALTER TABLE TC_PARAMETRO
	ADD CONSTRAINT  TC_PARAMETRO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_PARAMETRO_UK ON TC_PARAMETRO
(S_CLAVE   ASC);



CREATE TABLE TC_PARAMETROVALOR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011695 NOT NULL ,
	N_IDPARAMETRO        NUMBER CONSTRAINT SYS_C0011696 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	S_VALOR              VARCHAR2(200 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_PARAMETROVALOR
	 FOR TC_PARAMETROVALOR;




CREATE SYNONYM TC_PARAMETROVALOR
	 FOR TC_PARAMETROVALOR;



CREATE UNIQUE INDEX TC_PARAMETROVALOR_PK ON TC_PARAMETROVALOR
(N_ID   ASC);



ALTER TABLE TC_PARAMETROVALOR
	ADD CONSTRAINT  TC_PARAMETROVALOR_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PARCELASESCOLARES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011697 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011698 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PARCELASESCOLARES
	 FOR TC_PARCELASESCOLARES;




CREATE SYNONYM TC_PARCELASESCOLARES
	 FOR TC_PARCELASESCOLARES;



CREATE UNIQUE INDEX TC_PARCELASESCOLARES_PK ON TC_PARCELASESCOLARES
(N_ID   ASC);



ALTER TABLE TC_PARCELASESCOLARES
	ADD CONSTRAINT  TC_PARCELASESCOLARES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_PARCELASESCOLARES_UK ON TC_PARCELASESCOLARES
(S_CLAVE   ASC);



CREATE TABLE TC_PARENTESCO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011699 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011700 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PARENTESCO
	 FOR TC_PARENTESCO;




CREATE SYNONYM TC_PARENTESCO
	 FOR TC_PARENTESCO;



CREATE UNIQUE INDEX TC_PARENTESCO_PK ON TC_PARENTESCO
(N_ID   ASC);



ALTER TABLE TC_PARENTESCO
	ADD CONSTRAINT  TC_PARENTESCO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_PARENTESCO_UK ON TC_PARENTESCO
(S_CLAVE   ASC);



CREATE TABLE TC_PERSONAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011703 NOT NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	N_HOMONIMIACORRECTA  NUMBER NULL ,
	S_CURP               VARCHAR2(18 BYTE) NULL ,
	S_RFC                VARCHAR2(16 BYTE) NULL ,
	N_ESTATUSPERSONA     NUMBER NULL ,
	S_PRIMERAPELLIDO     VARCHAR2(60 BYTE) NULL ,
	S_SEGUNDOAPELLIDO    VARCHAR2(60 BYTE) NULL ,
	S_NOMBRE             VARCHAR2(60 BYTE) NULL ,
	D_NACIMIENTO         DATE NULL ,
	N_IDSEXO             NUMBER DEFAULT  1  CONSTRAINT SYS_C0011704 NOT NULL ,
	S_NUMERODECEDULA     VARCHAR2(50 BYTE) NULL ,
	D_INGRESOFEDERACION  DATE NULL ,
	D_INGRESORAMO        DATE NULL ,
	D_INGRESOSEP         DATE NULL ,
	S_GRUPODESERVICIOMIXTO VARCHAR2(2 BYTE) NULL ,
	N_IDTIPOEMPLEADO     NUMBER(1) DEFAULT  1  CONSTRAINT SYS_C0011705 NOT NULL ,
	N_ALERGIAS           NUMBER NULL ,
	S_ALERGIAS           VARCHAR2(100 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(1024 BYTE) NULL ,
	N_IDTIPOSANGRE       NUMBER DEFAULT  9  NULL ,
	N_IDESTADOCIVIL      NUMBER DEFAULT  1  CONSTRAINT SYS_C0011706 NOT NULL ,
	N_IDENTFEDNAC        NUMBER DEFAULT  9  CONSTRAINT SYS_C0011707 NOT NULL ,
	S_OTRAINCAPACIDAD    VARCHAR2(250 BYTE) NULL ,
	N_IDNIVELESTUDIO     NUMBER DEFAULT  1  CONSTRAINT SYS_C0011708 NOT NULL ,
	N_IDORIGENINFORMACION NUMBER DEFAULT  3  CONSTRAINT SYS_C0011709 NOT NULL ,
	N_IDORIGENPERSONA    NUMBER DEFAULT  2  CONSTRAINT SYS_C0011710 NOT NULL ,
	N_SITUACIONLABORALPER NUMBER DEFAULT  1  CONSTRAINT SYS_C0011711 NOT NULL ,
	D_ULTIMAALTA         DATE DEFAULT  sysdate  NULL ,
	N_DATOSCOMPLETOS     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_PERSONAL
	 FOR TC_PERSONAL;




CREATE SYNONYM TC_PERSONAL
	 FOR TC_PERSONAL;



CREATE UNIQUE INDEX TC_PERSONAL_PK ON TC_PERSONAL
(N_ID   ASC);



ALTER TABLE TC_PERSONAL
	ADD CONSTRAINT  TC_PERSONAL_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TC_PERSONAL_U1 ON TC_PERSONAL
(S_CURP   ASC);



ALTER TABLE TC_PERSONAL
ADD CONSTRAINT  TC_PERSONAL_U1 UNIQUE (S_CURP);



CREATE UNIQUE INDEX TC_PERSONAL_S_RFC_UK ON TC_PERSONAL
(S_RFC   ASC);



CREATE  INDEX TC_PERSONAL_S_NOM_NUK ON TC_PERSONAL
(S_NOMBRE   ASC);



CREATE  INDEX TC_PERSONAL_S_SEGAPE_NUK ON TC_PERSONAL
(S_SEGUNDOAPELLIDO   ASC);



CREATE  INDEX TC_PERSONAL_S_PRIAPE_NUK ON TC_PERSONAL
(S_PRIMERAPELLIDO   ASC);



CREATE TABLE TC_PERSONALPLAZA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011716 NOT NULL ,
	N_IDPERSONA          NUMBER CONSTRAINT SYS_C0011717 NOT NULL ,
	D_INGRESOESCUELA     DATE NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011718 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011719 NOT NULL ,
	N_IDFUNCIONREAL      NUMBER CONSTRAINT SYS_C0011720 NOT NULL ,
	N_HORASSEMANA        NUMBER(4,1) NULL ,
	N_SITUACIONPERFIL    NUMBER DEFAULT  0  NULL ,
	N_SITUACIONCATEGORIA NUMBER DEFAULT  0  NULL ,
	N_IDMOTIVOFUNCIONREAL NUMBER DEFAULT  5  CONSTRAINT SYS_C0011721 NOT NULL ,
	N_CONTADORPPE        NUMBER DEFAULT  0  NULL ,
	D_FECHAINICIO        TIMESTAMP(6) NULL ,
	D_FECHAFIN           TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM TC_PERSONALPLAZA
	 FOR TC_PERSONALPLAZA;




CREATE SYNONYM TC_PERSONALPLAZA
	 FOR TC_PERSONALPLAZA;



CREATE UNIQUE INDEX TC_PERSONALPLAZA_PK ON TC_PERSONALPLAZA
(N_ID   ASC);



ALTER TABLE TC_PERSONALPLAZA
	ADD CONSTRAINT  TC_PERSONALPLAZA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_PERSONALPLAZA_INDEX1 ON TC_PERSONALPLAZA
(N_IDPERSONA   ASC,N_IDESCUELA   ASC,N_ESTATUS   ASC);



CREATE TABLE TC_PERSONALPLAZAESCUELA
(
	N_IDESCUELA          NUMBER(10) CONSTRAINT SYS_C0011722 NOT NULL ,
	N_IDPERSONAPLAZA     NUMBER CONSTRAINT SYS_C0011723 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0011724 NOT NULL ,
	N_IDPLAZAASIGNADA    NUMBER CONSTRAINT SYS_C0011725 NOT NULL ,
	D_INICIOPLAZA        DATE NULL ,
	D_FINPLAZA           DATE NULL ,
	N_HORASSEMANA        NUMBER(4,1) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011726 NOT NULL ,
	N_HORASDISPONIBLE    NUMBER DEFAULT  1  NULL ,
	N_IDMOTIVO           NUMBER DEFAULT  1  CONSTRAINT SYS_C0011727 NOT NULL ,
	N_SITUACIONLABORALPPE NUMBER DEFAULT  1  CONSTRAINT SYS_C0011728 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PERSONALPLAZAESCUELA
	 FOR TC_PERSONALPLAZAESCUELA;




CREATE SYNONYM TC_PERSONALPLAZAESCUELA
	 FOR TC_PERSONALPLAZAESCUELA;



CREATE UNIQUE INDEX TC_PERSONALPLAZAESCUELA_PK ON TC_PERSONALPLAZAESCUELA
(N_ID   ASC);



ALTER TABLE TC_PERSONALPLAZAESCUELA
	ADD CONSTRAINT  TC_PERSONALPLAZAESCUELA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PERSONALPLAZAESCUELAHIST
(
	N_ID                 NUMBER NOT NULL ,
	N_IDESCUELA          NUMBER NULL ,
	N_IDPERSONAPLAZA     NUMBER NULL ,
	N_IDPLAZAASIGNADA    NUMBER NULL ,
	D_INICIOPLAZA        DATE NULL ,
	D_FINPLAZA           DATE NULL ,
	N_HORASSEMANA        NUMBER(4,1) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_IDREGISTRO         NUMBER NULL ,
	D_FECHACAMBIO        DATE NULL ,
	N_HORASDISPONIBLE    NUMBER DEFAULT  1  NULL ,
	N_IDMOTIVO           NUMBER DEFAULT  1  NULL ,
	N_SITUACIONLABORALPPE NUMBER DEFAULT  1  NULL ,
	D_FECHAFINMOVIMIENTO TIMESTAMP(6) NULL ,
	D_FECHAFIN           TIMESTAMP(6) NULL ,
	ID_HISTORICO_ANTERIOR NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_PERSONALPLAZAESCUELAHIST
	 FOR TC_PERSONALPLAZAESCUELAHIST;




CREATE SYNONYM TC_PERSONALPLAZAESCUELAHIST
	 FOR TC_PERSONALPLAZAESCUELAHIST;



CREATE UNIQUE INDEX TC_PERSONALPLAZAESCUELAHIST_PK ON TC_PERSONALPLAZAESCUELAHIST
(N_ID   ASC);



ALTER TABLE TC_PERSONALPLAZAESCUELAHIST
	ADD CONSTRAINT  TC_PERSONALPLAZAESCUELAHIST_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PERSONALPLAZAHISTORICO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011729 NOT NULL ,
	N_IDFUNCIONREAL      NUMBER(10) NULL ,
	N_IDPERSONA          NUMBER CONSTRAINT SYS_C0011730 NOT NULL ,
	N_IDESCUELA          NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER(10) NULL ,
	D_INGRESOESCUELA     DATE NULL ,
	N_HORASSEMANA        NUMBER(10) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011731 NOT NULL ,
	D_FECHACAMBIO        DATE NULL ,
	N_IDPERSONAPLAZA     NUMBER CONSTRAINT SYS_C0011732 NOT NULL ,
	N_SITUACIONPERFIL    NUMBER DEFAULT  0  NULL ,
	N_SITUACIONCATEGORIA NUMBER DEFAULT  0  NULL ,
	N_IDMOTIVOFUNCIONREAL NUMBER NULL ,
	D_FECHAFINMOVIMIENTO TIMESTAMP(6) NULL ,
	ID_HISTORICO_ANTERIOR NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_PERSONALPLAZAHISTORICO
	 FOR TC_PERSONALPLAZAHISTORICO;




CREATE SYNONYM TC_PERSONALPLAZAHISTORICO
	 FOR TC_PERSONALPLAZAHISTORICO;



CREATE UNIQUE INDEX TC_PERSONALPLAZAHISTORICO_PK ON TC_PERSONALPLAZAHISTORICO
(N_ID   ASC);



ALTER TABLE TC_PERSONALPLAZAHISTORICO
	ADD CONSTRAINT  TC_PERSONALPLAZAHISTORICO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PLANDEESTUDIOSASIGNATURA
(
	N_ID                 NUMBER NOT NULL ,
	N_IDPLANESTUDIOS     NUMBER NULL ,
	N_IDTIPOASIGNATURA   NUMBER NULL ,
	N_IDASIGNATURA       NUMBER NULL ,
	N_ORDENMATERIA       NUMBER NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_PLANDEESTUDIOSASIGNATURA
	 FOR TC_PLANDEESTUDIOSASIGNATURA;




CREATE SYNONYM TC_PLANDEESTUDIOSASIGNATURA
	 FOR TC_PLANDEESTUDIOSASIGNATURA;



CREATE UNIQUE INDEX TC_PLANDEESTUDIOSASIGNATURA_PK ON TC_PLANDEESTUDIOSASIGNATURA
(N_ID   ASC);



ALTER TABLE TC_PLANDEESTUDIOSASIGNATURA
	ADD CONSTRAINT  TC_PLANDEESTUDIOSASIGNATURA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PLANESTUDIOS
(
	N_ID                 NUMBER NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_CALIFICACIONPROMOVER NUMBER NULL ,
	N_REGISTRAOBSERVACION NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011740 NOT NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_REPROBADAS         INTEGER DEFAULT  0  CONSTRAINT SYS_C0011741 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PLANESTUDIOS
	 FOR TC_PLANESTUDIOS;




CREATE SYNONYM TC_PLANESTUDIOS
	 FOR TC_PLANESTUDIOS;



CREATE UNIQUE INDEX TC_PLANESTUDIOS_PK ON TC_PLANESTUDIOS
(N_ID   ASC);



ALTER TABLE TC_PLANESTUDIOS
	ADD CONSTRAINT  TC_PLANESTUDIOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_PLANESTUDIOS_UK ON TC_PLANESTUDIOS
(S_CLAVE   ASC);



CREATE TABLE TC_PLAZA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011742 NOT NULL ,
	S_CLAVEPRESUPUESTAL  VARCHAR2(27 BYTE) NULL ,
	N_TIPOPLAZA          NUMBER(10) NULL ,
	D_FECHACREACIONPLAZA DATE NULL ,
	D_FECHAULTIMAMODIFICACION DATE NULL ,
	D_FECHAINICIO        DATE NULL ,
	D_FECHAFIN           DATE NULL ,
	N_HORAS              NUMBER(4,1) NULL ,
	N_FOLIO              NUMBER NULL ,
	N_HORASDISPONIBLES   NUMBER(4,1) NULL ,
	N_ESTATUSPLAZA       NUMBER NULL ,
	N_IDSUBUNIDAD        NUMBER CONSTRAINT SYS_C0011743 NOT NULL ,
	N_IDCATEGORIA        NUMBER CONSTRAINT SYS_C0011744 NOT NULL ,
	N_IDPARTIDAPRESUPUESTAL NUMBER CONSTRAINT SYS_C0011745 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011746 NOT NULL ,
	N_IDMOTIVOCANCELACION NUMBER NULL ,
	N_SITUACIONLABORALPLA NUMBER DEFAULT  91  NULL ,
	N_SITUACION          NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TC_PLAZA
	 FOR TC_PLAZA;




CREATE SYNONYM TC_PLAZA
	 FOR TC_PLAZA;



CREATE UNIQUE INDEX TC_PLAZA_PK ON TC_PLAZA
(N_ID   ASC);



ALTER TABLE TC_PLAZA
	ADD CONSTRAINT  TC_PLAZA_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TC_PLAZA_S_CLAVEPRESUPUESTAL ON TC_PLAZA
(S_CLAVEPRESUPUESTAL   ASC);



CREATE TABLE TC_PROCESOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011749 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011750 NOT NULL ,
	S_ACCION             VARCHAR2(200 BYTE) NULL ,
	B_BITACORA           NUMBER DEFAULT  0  NULL ,
	S_GRADO              VARCHAR2(15 BYTE) NULL ,
	S_NIVEL              VARCHAR2(15 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_PROCESOS
	 FOR TC_PROCESOS;




CREATE SYNONYM TC_PROCESOS
	 FOR TC_PROCESOS;



CREATE UNIQUE INDEX TC_PROCESOS_PK ON TC_PROCESOS
(N_ID   ASC);



ALTER TABLE TC_PROCESOS
	ADD CONSTRAINT  TC_PROCESOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PROCESOSDATOS
(
	N_IDPROCESO          NUMBER CONSTRAINT SYS_C0011751 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011752 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(4000 BYTE) NULL ,
	N_ORDEN              NUMBER CONSTRAINT SYS_C0011753 NOT NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_NEGRITAS           VARCHAR2(1 BYTE) NULL ,
	N_JUSTIFICA          VARCHAR2(1 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_PROCESOSDATOS
	 FOR TC_PROCESOSDATOS;




CREATE SYNONYM TC_PROCESOSDATOS
	 FOR TC_PROCESOSDATOS;



CREATE UNIQUE INDEX TC_PROCESOSDATOS_PK ON TC_PROCESOSDATOS
(N_IDPROCESO   ASC,N_IDNIVELEDUCATIVO   ASC,N_ORDEN   ASC);



ALTER TABLE TC_PROCESOSDATOS
	ADD CONSTRAINT  TC_PROCESOSDATOS_PK PRIMARY KEY (N_IDPROCESO,N_IDNIVELEDUCATIVO,N_ORDEN);



CREATE TABLE TC_PROCESOSPERSONAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011754 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	S_MENSAJE            VARCHAR2(1000 BYTE) NULL ,
	N_SITUACION          NUMBER(1) NULL 
);



CREATE PUBLIC SYNONYM TC_PROCESOSPERSONAL
	 FOR TC_PROCESOSPERSONAL;




CREATE SYNONYM TC_PROCESOSPERSONAL
	 FOR TC_PROCESOSPERSONAL;



CREATE UNIQUE INDEX TC_PROCESOSPERSONAL_PK ON TC_PROCESOSPERSONAL
(N_ID   ASC);



ALTER TABLE TC_PROCESOSPERSONAL
	ADD CONSTRAINT  TC_PROCESOSPERSONAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PROGRAMA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011755 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011756 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PROGRAMA
	 FOR TC_PROGRAMA;




CREATE SYNONYM TC_PROGRAMA
	 FOR TC_PROGRAMA;



CREATE UNIQUE INDEX TC_PROGRAMA_PK ON TC_PROGRAMA
(N_ID   ASC);



ALTER TABLE TC_PROGRAMA
	ADD CONSTRAINT  TC_PROGRAMA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PROPIEDADINMUEBLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011757 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011758 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PROPIEDADINMUEBLE
	 FOR TC_PROPIEDADINMUEBLE;




CREATE SYNONYM TC_PROPIEDADINMUEBLE
	 FOR TC_PROPIEDADINMUEBLE;



CREATE UNIQUE INDEX TC_PROPIEDADINMUEBLE_PK ON TC_PROPIEDADINMUEBLE
(N_ID   ASC);



ALTER TABLE TC_PROPIEDADINMUEBLE
	ADD CONSTRAINT  TC_PROPIEDADINMUEBLE_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_PROPIEDADINMUEBLE_UK ON TC_PROPIEDADINMUEBLE
(S_CLAVE   ASC);



CREATE TABLE TC_PROPIETARIOSCONSTRUCCION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011759 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011760 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PROPIETARIOSCONSTRUCCION
	 FOR TC_PROPIETARIOSCONSTRUCCION;




CREATE SYNONYM TC_PROPIETARIOSCONSTRUCCION
	 FOR TC_PROPIETARIOSCONSTRUCCION;



CREATE UNIQUE INDEX TC_PROPIETARIOSCONSTRUCCION_PK ON TC_PROPIETARIOSCONSTRUCCION
(N_ID   ASC);



ALTER TABLE TC_PROPIETARIOSCONSTRUCCION
	ADD CONSTRAINT  TC_PROPIETARIOSCONSTRUCCION_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_PROYECTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011761 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011762 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_PROYECTOS
	 FOR TC_PROYECTOS;




CREATE SYNONYM TC_PROYECTOS
	 FOR TC_PROYECTOS;



CREATE UNIQUE INDEX TC_PROYECTOS_PK ON TC_PROYECTOS
(N_ID   ASC);



ALTER TABLE TC_PROYECTOS
	ADD CONSTRAINT  TC_PROYECTOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_RECOMENDACIONTIPO
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012353 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(38) NULL 
);



CREATE PUBLIC SYNONYM TC_RECOMENDACIONTIPO
	 FOR TC_RECOMENDACIONTIPO;




CREATE SYNONYM TC_RECOMENDACIONTIPO
	 FOR TC_RECOMENDACIONTIPO;



CREATE UNIQUE INDEX PK15_1 ON TC_RECOMENDACIONTIPO
(N_ID   ASC);



ALTER TABLE TC_RECOMENDACIONTIPO
	ADD CONSTRAINT  PK15_1 PRIMARY KEY (N_ID);



CREATE TABLE TC_REGION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011763 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011764 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_REGION
	 FOR TC_REGION;




CREATE SYNONYM TC_REGION
	 FOR TC_REGION;



CREATE UNIQUE INDEX TC_REGION_PK ON TC_REGION
(N_ID   ASC);



ALTER TABLE TC_REGION
	ADD CONSTRAINT  TC_REGION_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_REGLAPLANTILLA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011765 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0011766 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011767 NOT NULL ,
	N_IDFUNCIONREAL      NUMBER CONSTRAINT SYS_C0011768 NOT NULL ,
	N_UNIDADMEDIDA       NUMBER CONSTRAINT SYS_C0011769 NOT NULL ,
	N_UNIDADMINIMO       NUMBER CONSTRAINT SYS_C0011770 NOT NULL ,
	N_UNIDADMAXIMA       NUMBER CONSTRAINT SYS_C0011771 NOT NULL ,
	N_TIPORECURSO        NUMBER CONSTRAINT SYS_C0011772 NOT NULL ,
	N_RECURSOSREQUERIDOS NUMBER CONSTRAINT SYS_C0011773 NOT NULL ,
	N_PORUNIDADORECURSO  NUMBER NULL ,
	N_ESTATUS            NUMBER NULL ,
	D_FECHAESTATUS       DATE NULL ,
	S_CLAVEFUNCIONREAL   VARCHAR2(20 BYTE) NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_IDMODALIDAD        NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_REGLAPLANTILLA
	 FOR TC_REGLAPLANTILLA;




CREATE SYNONYM TC_REGLAPLANTILLA
	 FOR TC_REGLAPLANTILLA;



CREATE UNIQUE INDEX TC_REGLAPLANTILLA_PK ON TC_REGLAPLANTILLA
(N_ID   ASC);



ALTER TABLE TC_REGLAPLANTILLA
	ADD CONSTRAINT  TC_REGLAPLANTILLA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_REPEVAESTATUS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0019293 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(38) NULL ,
	D_CREACION           TIMESTAMP(6) NULL ,
	D_ULTIMA_MODIFICACION TIMESTAMP(6) NULL ,
	N_IDUSER_ULTIMA_MODIFICACION NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TC_REPEVAESTATUS
	 FOR TC_REPEVAESTATUS;




CREATE SYNONYM TC_REPEVAESTATUS
	 FOR TC_REPEVAESTATUS;



CREATE UNIQUE INDEX PK_REPEVAESTATUS ON TC_REPEVAESTATUS
(N_ID   ASC);



ALTER TABLE TC_REPEVAESTATUS
	ADD CONSTRAINT  PK_REPEVAESTATUS PRIMARY KEY (N_ID);



CREATE TABLE TC_REPORTESESPECIALES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0011774 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_REPORTESESPECIALES
	 FOR TC_REPORTESESPECIALES;




CREATE SYNONYM TC_REPORTESESPECIALES
	 FOR TC_REPORTESESPECIALES;



CREATE UNIQUE INDEX TC_REPORTESESPECIALES_PK ON TC_REPORTESESPECIALES
(N_ID   ASC);



ALTER TABLE TC_REPORTESESPECIALES
	ADD CONSTRAINT  TC_REPORTESESPECIALES_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_RUTAREPORTE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012977 NOT NULL ,
	S_CLAVE              VARCHAR2(30 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0012978 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012979 NOT NULL ,
	N_IDPROCESO          NUMBER NULL ,
	S_VALOR              VARCHAR2(200 BYTE) NULL ,
	N_GRADO              NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_RUTAREPORTE
	 FOR TC_RUTAREPORTE;




CREATE SYNONYM TC_RUTAREPORTE
	 FOR TC_RUTAREPORTE;



CREATE UNIQUE INDEX TC_RUTAREPORTE_PK ON TC_RUTAREPORTE
(N_ID   ASC);



ALTER TABLE TC_RUTAREPORTE
	ADD CONSTRAINT  TC_RUTAREPORTE_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_SERVICIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011778 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011779 NOT NULL ,
	N_TIPO               NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_SERVICIO
	 FOR TC_SERVICIO;




CREATE SYNONYM TC_SERVICIO
	 FOR TC_SERVICIO;



CREATE UNIQUE INDEX TC_SERVICIO_PK ON TC_SERVICIO
(N_ID   ASC);



ALTER TABLE TC_SERVICIO
	ADD CONSTRAINT  TC_SERVICIO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SERVICIO_UK ON TC_SERVICIO
(S_CLAVE   ASC);



CREATE TABLE TC_SERVICIOESCUELA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011780 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011781 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_SERVICIOESCUELA
	 FOR TC_SERVICIOESCUELA;




CREATE SYNONYM TC_SERVICIOESCUELA
	 FOR TC_SERVICIOESCUELA;



CREATE UNIQUE INDEX TC_SERVICIOESCUELA_PK ON TC_SERVICIOESCUELA
(N_ID   ASC);



ALTER TABLE TC_SERVICIOESCUELA
	ADD CONSTRAINT  TC_SERVICIOESCUELA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SERVICIOESCUELA_UK ON TC_SERVICIOESCUELA
(S_CLAVE   ASC);



CREATE TABLE TC_SERVICIOREGIONAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011782 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011783 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_SERVICIOREGIONAL
	 FOR TC_SERVICIOREGIONAL;




CREATE SYNONYM TC_SERVICIOREGIONAL
	 FOR TC_SERVICIOREGIONAL;



CREATE UNIQUE INDEX TC_SERVICIOREGIONAL_PK ON TC_SERVICIOREGIONAL
(N_ID   ASC);



ALTER TABLE TC_SERVICIOREGIONAL
	ADD CONSTRAINT  TC_SERVICIOREGIONAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SERVICIOREGIONAL_UK ON TC_SERVICIOREGIONAL
(S_CLAVE   ASC);



CREATE TABLE TC_SEXO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011784 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011785 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_SEXO
	 FOR TC_SEXO;




CREATE SYNONYM TC_SEXO
	 FOR TC_SEXO;



CREATE UNIQUE INDEX TC_SEXO_PK ON TC_SEXO
(N_ID   ASC);



ALTER TABLE TC_SEXO
	ADD CONSTRAINT  TC_SEXO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SEXO_UK ON TC_SEXO
(S_CLAVE   ASC);



CREATE TABLE TC_SITUACIONALUMNO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011786 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011787 NOT NULL ,
	N_TIPO               NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_SITUACIONALUMNO
	 FOR TC_SITUACIONALUMNO;




CREATE SYNONYM TC_SITUACIONALUMNO
	 FOR TC_SITUACIONALUMNO;



CREATE UNIQUE INDEX TC_SITUACIONALUMNO_PK ON TC_SITUACIONALUMNO
(N_ID   ASC);



ALTER TABLE TC_SITUACIONALUMNO
	ADD CONSTRAINT  TC_SITUACIONALUMNO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SITUACIONALUMNO_UK ON TC_SITUACIONALUMNO
(S_CLAVE   ASC);



CREATE TABLE TC_SITUACIONLABORAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011788 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011789 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_SITUACIONLABORAL
	 FOR TC_SITUACIONLABORAL;




CREATE SYNONYM TC_SITUACIONLABORAL
	 FOR TC_SITUACIONLABORAL;



CREATE UNIQUE INDEX TC_SITUACIONLABORAL_PK ON TC_SITUACIONLABORAL
(N_ID   ASC);



ALTER TABLE TC_SITUACIONLABORAL
	ADD CONSTRAINT  TC_SITUACIONLABORAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_SOSTENIMIENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011793 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011794 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_SOSTENIMIENTO
	 FOR TC_SOSTENIMIENTO;




CREATE SYNONYM TC_SOSTENIMIENTO
	 FOR TC_SOSTENIMIENTO;



CREATE UNIQUE INDEX TC_SOSTENIMIENTO_PK ON TC_SOSTENIMIENTO
(N_ID   ASC);



ALTER TABLE TC_SOSTENIMIENTO
	ADD CONSTRAINT  TC_SOSTENIMIENTO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SOSTENIMIENTO_UK ON TC_SOSTENIMIENTO
(S_CLAVE   ASC);



CREATE TABLE TC_SUBUNIDAD
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011795 NOT NULL ,
	S_CLAVE              VARCHAR2(2 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011796 NOT NULL ,
	N_IDUNIDAD           NUMBER CONSTRAINT SYS_C0011797 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_SUBUNIDAD
	 FOR TC_SUBUNIDAD;




CREATE SYNONYM TC_SUBUNIDAD
	 FOR TC_SUBUNIDAD;



CREATE UNIQUE INDEX TC_SUBUNIDAD_PK ON TC_SUBUNIDAD
(N_ID   ASC);



ALTER TABLE TC_SUBUNIDAD
	ADD CONSTRAINT  TC_SUBUNIDAD_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_SUBUNIDAD_UK ON TC_SUBUNIDAD
(S_CLAVE   ASC);



CREATE TABLE TC_TIPO_BECA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012432 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_TIPO_BECA
	 FOR TC_TIPO_BECA;




CREATE SYNONYM TC_TIPO_BECA
	 FOR TC_TIPO_BECA;



CREATE UNIQUE INDEX TC_TIPO_BECA_PK ON TC_TIPO_BECA
(N_ID   ASC);



ALTER TABLE TC_TIPO_BECA
	ADD CONSTRAINT  TC_TIPO_BECA_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_TIPO_CONSTRUCCION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011807 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011808 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPO_CONSTRUCCION
	 FOR TC_TIPO_CONSTRUCCION;




CREATE SYNONYM TC_TIPO_CONSTRUCCION
	 FOR TC_TIPO_CONSTRUCCION;



CREATE UNIQUE INDEX TC_TIPO_CONSTRUCCION_PK ON TC_TIPO_CONSTRUCCION
(N_ID   ASC);



ALTER TABLE TC_TIPO_CONSTRUCCION
	ADD CONSTRAINT  TC_TIPO_CONSTRUCCION_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPO_CONSTRUCCION_UK ON TC_TIPO_CONSTRUCCION
(S_CLAVE   ASC);



CREATE TABLE TC_TIPO_LIC_BECA
(
	N_DIAS               NUMBER(10) NULL ,
	S_CLAVE              VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(50 BYTE) NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0011829 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPO_LIC_BECA
	 FOR TC_TIPO_LIC_BECA;




CREATE SYNONYM TC_TIPO_LIC_BECA
	 FOR TC_TIPO_LIC_BECA;



CREATE UNIQUE INDEX TC_TIPO_LIC_BECA_PK ON TC_TIPO_LIC_BECA
(N_ID   ASC);



ALTER TABLE TC_TIPO_LIC_BECA
	ADD CONSTRAINT  TC_TIPO_LIC_BECA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPO_LIC_BECA_UK ON TC_TIPO_LIC_BECA
(S_CLAVE   ASC);



CREATE TABLE TC_TIPO_LOCAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011830 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011831 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPO_LOCAL
	 FOR TC_TIPO_LOCAL;




CREATE SYNONYM TC_TIPO_LOCAL
	 FOR TC_TIPO_LOCAL;



CREATE UNIQUE INDEX TC_TIPO_LOCAL_PK ON TC_TIPO_LOCAL
(N_ID   ASC);



ALTER TABLE TC_TIPO_LOCAL
	ADD CONSTRAINT  TC_TIPO_LOCAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPO_LOCAL_UK ON TC_TIPO_LOCAL
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOASIGNATURA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011798 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011799 NOT NULL ,
	N_CALIFICACIONPROMOVER NUMBER NULL ,
	N_CALCULAPROMEDIO    NUMBER NULL ,
	N_REGISTRAOBSERVACION NUMBER DEFAULT  0  NULL ,
	N_MUESTRAINASISTENCIA NUMBER DEFAULT  0  NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOASIGNATURA
	 FOR TC_TIPOASIGNATURA;




CREATE SYNONYM TC_TIPOASIGNATURA
	 FOR TC_TIPOASIGNATURA;



CREATE UNIQUE INDEX TC_TIPOASIGNATURA_PK ON TC_TIPOASIGNATURA
(N_ID   ASC);



ALTER TABLE TC_TIPOASIGNATURA
	ADD CONSTRAINT  TC_TIPOASIGNATURA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOASIGNATURA_UK ON TC_TIPOASIGNATURA
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOASIGNATURAPERIODOS
(
	N_ID                 NUMBER NOT NULL ,
	N_IDTIPOASIGNATURA   NUMBER NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	D_INICIOEVALUACION   DATE NULL ,
	D_FINEVALUACION      DATE NULL ,
	N_ORDENPERIODO       NUMBER NULL ,
	D_INICIOCAPCALIFICACIONES DATE NULL ,
	D_FINCAPCALIFICACIONES DATE NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011800 NOT NULL ,
	N_PERIODORIESGO      NUMBER DEFAULT  0  NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOASIGNATURAPERIODOS
	 FOR TC_TIPOASIGNATURAPERIODOS;




CREATE SYNONYM TC_TIPOASIGNATURAPERIODOS
	 FOR TC_TIPOASIGNATURAPERIODOS;



CREATE UNIQUE INDEX TC_TIPOASIGNATURAPERIODOS_PK ON TC_TIPOASIGNATURAPERIODOS
(N_ID   ASC);



ALTER TABLE TC_TIPOASIGNATURAPERIODOS
	ADD CONSTRAINT  TC_TIPOASIGNATURAPERIODOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOASIGNATURAPERIODOS_UK ON TC_TIPOASIGNATURAPERIODOS
(S_CLAVE   ASC);



CREATE TABLE TC_TIPODEDATO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011811 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011812 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPODEDATO
	 FOR TC_TIPODEDATO;




CREATE SYNONYM TC_TIPODEDATO
	 FOR TC_TIPODEDATO;



CREATE UNIQUE INDEX TC_TIPODEDATO_PK ON TC_TIPODEDATO
(N_ID   ASC);



ALTER TABLE TC_TIPODEDATO
	ADD CONSTRAINT  TC_TIPODEDATO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPODEDATO_UK ON TC_TIPODEDATO
(S_CLAVE   ASC);



CREATE TABLE TC_TIPODOCUMENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011813 NOT NULL ,
	S_CLAVE              VARCHAR2(15 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011814 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPODOCUMENTO
	 FOR TC_TIPODOCUMENTO;




CREATE SYNONYM TC_TIPODOCUMENTO
	 FOR TC_TIPODOCUMENTO;



CREATE UNIQUE INDEX TC_TIPODOCUMENTO_PK ON TC_TIPODOCUMENTO
(N_ID   ASC);



ALTER TABLE TC_TIPODOCUMENTO
	ADD CONSTRAINT  TC_TIPODOCUMENTO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPODOCUMENTO_UK ON TC_TIPODOCUMENTO
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOEMPLEADO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011815 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011816 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOEMPLEADO
	 FOR TC_TIPOEMPLEADO;




CREATE SYNONYM TC_TIPOEMPLEADO
	 FOR TC_TIPOEMPLEADO;



CREATE UNIQUE INDEX TC_TIPOEMPLEADO_PK ON TC_TIPOEMPLEADO
(N_ID   ASC);



ALTER TABLE TC_TIPOEMPLEADO
	ADD CONSTRAINT  TC_TIPOEMPLEADO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOEMPLEADO_UK ON TC_TIPOEMPLEADO
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOESCUELA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011817 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011818 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOESCUELA
	 FOR TC_TIPOESCUELA;




CREATE SYNONYM TC_TIPOESCUELA
	 FOR TC_TIPOESCUELA;



CREATE UNIQUE INDEX TC_TIPOESCUELA_PK ON TC_TIPOESCUELA
(N_ID   ASC);



ALTER TABLE TC_TIPOESCUELA
	ADD CONSTRAINT  TC_TIPOESCUELA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOESCUELA_UK ON TC_TIPOESCUELA
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOINASISTENCIAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011821 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011822 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOINASISTENCIAS
	 FOR TC_TIPOINASISTENCIAS;




CREATE SYNONYM TC_TIPOINASISTENCIAS
	 FOR TC_TIPOINASISTENCIAS;



CREATE UNIQUE INDEX TC_TIPOINASISTENCIAS_PK ON TC_TIPOINASISTENCIAS
(N_ID   ASC);



ALTER TABLE TC_TIPOINASISTENCIAS
	ADD CONSTRAINT  TC_TIPOINASISTENCIAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOINASISTENCIAS_UK ON TC_TIPOINASISTENCIAS
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOINCORPORACIONSEP
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011823 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011824 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOINCORPORACIONSEP
	 FOR TC_TIPOINCORPORACIONSEP;




CREATE SYNONYM TC_TIPOINCORPORACIONSEP
	 FOR TC_TIPOINCORPORACIONSEP;



CREATE UNIQUE INDEX TC_TIPOINCORPORACIONSEP_PK ON TC_TIPOINCORPORACIONSEP
(N_ID   ASC);



ALTER TABLE TC_TIPOINCORPORACIONSEP
	ADD CONSTRAINT  TC_TIPOINCORPORACIONSEP_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOINCORPORACIONSEP_UK ON TC_TIPOINCORPORACIONSEP
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOINMUEBLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011825 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011826 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOINMUEBLE
	 FOR TC_TIPOINMUEBLE;




CREATE SYNONYM TC_TIPOINMUEBLE
	 FOR TC_TIPOINMUEBLE;



CREATE UNIQUE INDEX TC_TIPOINMUEBLE_PK ON TC_TIPOINMUEBLE
(N_ID   ASC);



ALTER TABLE TC_TIPOINMUEBLE
	ADD CONSTRAINT  TC_TIPOINMUEBLE_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOINMUEBLE_UK ON TC_TIPOINMUEBLE
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOMOVIMIENTO_IR
(
	N_ID                 NUMBER(10) NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(50 BYTE) NULL ,
	N_ESTATUS            NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOMOVIMIENTO_IR
	 FOR TC_TIPOMOVIMIENTO_IR;




CREATE SYNONYM TC_TIPOMOVIMIENTO_IR
	 FOR TC_TIPOMOVIMIENTO_IR;



CREATE UNIQUE INDEX TC_TIPOMOVIMIENTO_IR_PK ON TC_TIPOMOVIMIENTO_IR
(N_ID   ASC);



ALTER TABLE TC_TIPOMOVIMIENTO_IR
	ADD CONSTRAINT  TC_TIPOMOVIMIENTO_IR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOMOVIMIENTO_IR_UK ON TC_TIPOMOVIMIENTO_IR
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOPERSONAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011832 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011833 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOPERSONAL
	 FOR TC_TIPOPERSONAL;




CREATE SYNONYM TC_TIPOPERSONAL
	 FOR TC_TIPOPERSONAL;



CREATE UNIQUE INDEX TC_TIPOPERSONAL_PK ON TC_TIPOPERSONAL
(N_ID   ASC);



ALTER TABLE TC_TIPOPERSONAL
	ADD CONSTRAINT  TC_TIPOPERSONAL_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOPERSONAL_UK ON TC_TIPOPERSONAL
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOPERSONAL_FR
(
	N_ID                 NUMBER NOT NULL ,
	S_CLAVE              VARCHAR2(5 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(20 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOPERSONAL_FR
	 FOR TC_TIPOPERSONAL_FR;




CREATE SYNONYM TC_TIPOPERSONAL_FR
	 FOR TC_TIPOPERSONAL_FR;



CREATE UNIQUE INDEX TC_TIPOPERSONAL_FR_PK ON TC_TIPOPERSONAL_FR
(N_ID   ASC);



ALTER TABLE TC_TIPOPERSONAL_FR
	ADD CONSTRAINT  TC_TIPOPERSONAL_FR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOPERSONAL_FR_UK ON TC_TIPOPERSONAL_FR
(S_CLAVE   ASC);



CREATE TABLE TC_TIPORESPUESTA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011835 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011836 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPORESPUESTA
	 FOR TC_TIPORESPUESTA;




CREATE SYNONYM TC_TIPORESPUESTA
	 FOR TC_TIPORESPUESTA;



CREATE UNIQUE INDEX TC_TIPORESPUESTA_PK ON TC_TIPORESPUESTA
(N_ID   ASC);



ALTER TABLE TC_TIPORESPUESTA
	ADD CONSTRAINT  TC_TIPORESPUESTA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPORESPUESTA_UK ON TC_TIPORESPUESTA
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOSANGRE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011837 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011838 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOSANGRE
	 FOR TC_TIPOSANGRE;




CREATE SYNONYM TC_TIPOSANGRE
	 FOR TC_TIPOSANGRE;



CREATE UNIQUE INDEX TC_TIPOSANGRE_PK ON TC_TIPOSANGRE
(N_ID   ASC);



ALTER TABLE TC_TIPOSANGRE
	ADD CONSTRAINT  TC_TIPOSANGRE_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOSANGRE_UK ON TC_TIPOSANGRE
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOSFOLIOS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012961 NOT NULL ,
	S_CLAVE              VARCHAR2(10 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOSFOLIOS
	 FOR TC_TIPOSFOLIOS;




CREATE SYNONYM TC_TIPOSFOLIOS
	 FOR TC_TIPOSFOLIOS;



CREATE UNIQUE INDEX TC_TIPOSFOLIOS_PK ON TC_TIPOSFOLIOS
(N_ID   ASC);



ALTER TABLE TC_TIPOSFOLIOS
	ADD CONSTRAINT  TC_TIPOSFOLIOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_TIPOSUPERFICIE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011841 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0011842 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOSUPERFICIE
	 FOR TC_TIPOSUPERFICIE;




CREATE SYNONYM TC_TIPOSUPERFICIE
	 FOR TC_TIPOSUPERFICIE;



CREATE UNIQUE INDEX TC_TIPOSUPERFICIE_PK ON TC_TIPOSUPERFICIE
(N_ID   ASC);



ALTER TABLE TC_TIPOSUPERFICIE
	ADD CONSTRAINT  TC_TIPOSUPERFICIE_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOSUPERFICIE_UK ON TC_TIPOSUPERFICIE
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOTELEFONO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011843 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011844 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOTELEFONO
	 FOR TC_TIPOTELEFONO;




CREATE SYNONYM TC_TIPOTELEFONO
	 FOR TC_TIPOTELEFONO;



CREATE UNIQUE INDEX TC_TIPOTELEFONO_PK ON TC_TIPOTELEFONO
(N_ID   ASC);



ALTER TABLE TC_TIPOTELEFONO
	ADD CONSTRAINT  TC_TIPOTELEFONO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOTELEFONO_UK ON TC_TIPOTELEFONO
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOTERRENO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011847 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011848 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOTERRENO
	 FOR TC_TIPOTERRENO;




CREATE SYNONYM TC_TIPOTERRENO
	 FOR TC_TIPOTERRENO;



CREATE UNIQUE INDEX TC_TIPOTERRENO_PK ON TC_TIPOTERRENO
(N_ID   ASC);



ALTER TABLE TC_TIPOTERRENO
	ADD CONSTRAINT  TC_TIPOTERRENO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TIPOTERRENO_UK ON TC_TIPOTERRENO
(S_CLAVE   ASC);



CREATE TABLE TC_TIPOVIALIDAD
(
	N_ID                 NUMBER NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TC_TIPOVIALIDAD
	 FOR TC_TIPOVIALIDAD;




CREATE SYNONYM TC_TIPOVIALIDAD
	 FOR TC_TIPOVIALIDAD;



CREATE UNIQUE INDEX TC_TIPOVIALIDAD_PK ON TC_TIPOVIALIDAD
(N_ID   ASC);



ALTER TABLE TC_TIPOVIALIDAD
	ADD CONSTRAINT  TC_TIPOVIALIDAD_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_TURNOSESCOLAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011849 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(1) DEFAULT  1  CONSTRAINT SYS_C0011850 NOT NULL ,
	S_HORAENTRADA        VARCHAR2(10 BYTE) NULL ,
	S_HORASALIDA         VARCHAR2(10 BYTE) NULL ,
	N_HORASSEMANA        NUMBER DEFAULT  0  NULL ,
	N_IDSERVICIOESCUELA  NUMBER NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL ,
	N_IDMODALIDAD        NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_TURNOSESCOLAR
	 FOR TC_TURNOSESCOLAR;




CREATE SYNONYM TC_TURNOSESCOLAR
	 FOR TC_TURNOSESCOLAR;



CREATE UNIQUE INDEX TC_TURNOSESCOLAR_PK ON TC_TURNOSESCOLAR
(N_ID   ASC);



ALTER TABLE TC_TURNOSESCOLAR
	ADD CONSTRAINT  TC_TURNOSESCOLAR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_TURNOSESCOLAR_UK ON TC_TURNOSESCOLAR
(S_CLAVE   ASC);



CREATE TABLE TC_UNIDAD
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011851 NOT NULL ,
	S_CLAVE              VARCHAR2(2 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER(1) DEFAULT  1  CONSTRAINT SYS_C0011852 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_UNIDAD
	 FOR TC_UNIDAD;




CREATE SYNONYM TC_UNIDAD
	 FOR TC_UNIDAD;



CREATE UNIQUE INDEX TC_UNIDAD_PK ON TC_UNIDAD
(N_ID   ASC);



ALTER TABLE TC_UNIDAD
	ADD CONSTRAINT  TC_UNIDAD_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_UNIDAD_UK ON TC_UNIDAD
(S_CLAVE   ASC);



CREATE TABLE TC_UR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012382 NOT NULL ,
	S_CLAVE              VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_NIVEL              NUMBER NULL ,
	N_PADRE              NUMBER NULL ,
	N_NIVELES            NUMBER NULL ,
	N_IDURDEPARTAMENTO   NUMBER CONSTRAINT SYS_C0012383 NOT NULL ,
	N_IDPERSONAL         NUMBER NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_UR
	 FOR TC_UR;




CREATE SYNONYM TC_UR
	 FOR TC_UR;



CREATE UNIQUE INDEX TC_UR_PK ON TC_UR
(N_ID   ASC);



ALTER TABLE TC_UR
	ADD CONSTRAINT  TC_UR_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_URDEPARTAMENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012384 NOT NULL ,
	S_CLAVE              VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_URDEPARTAMENTO
	 FOR TC_URDEPARTAMENTO;




CREATE SYNONYM TC_URDEPARTAMENTO
	 FOR TC_URDEPARTAMENTO;



CREATE UNIQUE INDEX TC_URDEPARTAMENTO_PK ON TC_URDEPARTAMENTO
(N_ID   ASC);



ALTER TABLE TC_URDEPARTAMENTO
	ADD CONSTRAINT  TC_URDEPARTAMENTO_PK PRIMARY KEY (N_ID);



CREATE TABLE TC_USACONDADOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011853 NOT NULL ,
	N_IDUSAESTADOS       NUMBER CONSTRAINT SYS_C0011854 NOT NULL ,
	S_CLAVEUSAESTADOS    VARCHAR2(100 BYTE) NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011855 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_USACONDADOS
	 FOR TC_USACONDADOS;




CREATE SYNONYM TC_USACONDADOS
	 FOR TC_USACONDADOS;



CREATE UNIQUE INDEX TC_USACONDADOS_PK ON TC_USACONDADOS
(N_ID   ASC);



ALTER TABLE TC_USACONDADOS
	ADD CONSTRAINT  TC_USACONDADOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_USACONDADOS_UK ON TC_USACONDADOS
(S_CLAVE   ASC);



CREATE TABLE TC_USAESTADOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011856 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011857 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_USAESTADOS
	 FOR TC_USAESTADOS;




CREATE SYNONYM TC_USAESTADOS
	 FOR TC_USAESTADOS;



CREATE UNIQUE INDEX TC_USAESTADOS_PK ON TC_USAESTADOS
(N_ID   ASC);



ALTER TABLE TC_USAESTADOS
	ADD CONSTRAINT  TC_USAESTADOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_USAESTADOS_UK ON TC_USAESTADOS
(S_CLAVE   ASC);



CREATE TABLE TC_USOAULAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011858 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011859 NOT NULL 
);



CREATE PUBLIC SYNONYM TC_USOAULAS
	 FOR TC_USOAULAS;




CREATE SYNONYM TC_USOAULAS
	 FOR TC_USOAULAS;



CREATE UNIQUE INDEX TC_USOAULAS_PK ON TC_USOAULAS
(N_ID   ASC);



ALTER TABLE TC_USOAULAS
	ADD CONSTRAINT  TC_USOAULAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_USOAULAS_UK ON TC_USOAULAS
(S_CLAVE   ASC);



CREATE TABLE TC_ZONAESCOLAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011860 NOT NULL ,
	N_IDJEFATURASECTORIAL NUMBER CONSTRAINT SYS_C0011861 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	S_CCT                VARCHAR2(20 BYTE) NULL ,
	S_TELEFONO           VARCHAR2(15 BYTE) NULL ,
	S_RESPONSABLE        VARCHAR2(100 BYTE) NULL ,
	N_IDNIVELEDUCATIVO   NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ZONAESCOLAR
	 FOR TC_ZONAESCOLAR;




CREATE SYNONYM TC_ZONAESCOLAR
	 FOR TC_ZONAESCOLAR;



CREATE UNIQUE INDEX TC_ZONAESCOLAR_PK ON TC_ZONAESCOLAR
(N_ID   ASC);



ALTER TABLE TC_ZONAESCOLAR
	ADD CONSTRAINT  TC_ZONAESCOLAR_PK PRIMARY KEY (N_ID);



CREATE  INDEX TC_ZONAESCOLAR_UK ON TC_ZONAESCOLAR
(S_CLAVE   ASC);



CREATE TABLE TC_ZONAFEDERAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012369 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TC_ZONAFEDERAL
	 FOR TC_ZONAFEDERAL;




CREATE SYNONYM TC_ZONAFEDERAL
	 FOR TC_ZONAFEDERAL;



CREATE UNIQUE INDEX TC_ZONAFEDERAL_PK ON TC_ZONAFEDERAL
(N_ID   ASC);



ALTER TABLE TC_ZONAFEDERAL
	ADD CONSTRAINT  TC_ZONAFEDERAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_CAPTUROINASISTENCIAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011873 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011874 NOT NULL ,
	N_IDCICLO            NUMBER CONSTRAINT SYS_C0011875 NOT NULL ,
	D_FECHA              DATE CONSTRAINT SYS_C0011876 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011877 NOT NULL ,
	N_TIPOREG            NUMBER CONSTRAINT SYS_C0011878 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_CAPTUROINASISTENCIAS
	 FOR TR_CAPTUROINASISTENCIAS;




CREATE SYNONYM TR_CAPTUROINASISTENCIAS
	 FOR TR_CAPTUROINASISTENCIAS;



CREATE UNIQUE INDEX TR_CAPTUROINASISTENCIAS_PK ON TR_CAPTUROINASISTENCIAS
(N_ID   ASC);



ALTER TABLE TR_CAPTUROINASISTENCIAS
	ADD CONSTRAINT  TR_CAPTUROINASISTENCIAS_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_CATEGORIAFUNCIONREAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011882 NOT NULL ,
	N_IDCATEGORIA        NUMBER CONSTRAINT SYS_C0011883 NOT NULL ,
	N_IDFUNCIONREAL      NUMBER CONSTRAINT SYS_C0011884 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_CATEGORIAFUNCIONREAL
	 FOR TR_CATEGORIAFUNCIONREAL;




CREATE SYNONYM TR_CATEGORIAFUNCIONREAL
	 FOR TR_CATEGORIAFUNCIONREAL;



CREATE UNIQUE INDEX TR_CATEGORIAFUNCIONREAL_PK ON TR_CATEGORIAFUNCIONREAL
(N_ID   ASC);



ALTER TABLE TR_CATEGORIAFUNCIONREAL
	ADD CONSTRAINT  TR_CATEGORIAFUNCIONREAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_CATEGORIAPORMOTIVO
(
	N_ID                 NUMBER NOT NULL ,
	N_IDCATEGORIA        NUMBER CONSTRAINT SYS_C0011885 NOT NULL ,
	N_IDMOTIVO           NUMBER CONSTRAINT SYS_C0011886 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011887 NOT NULL ,
	N_TIPO_PERSONAL      NUMBER CONSTRAINT SYS_C0011888 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_CATEGORIAPORMOTIVO
	 FOR TR_CATEGORIAPORMOTIVO;




CREATE SYNONYM TR_CATEGORIAPORMOTIVO
	 FOR TR_CATEGORIAPORMOTIVO;



CREATE UNIQUE INDEX TR_CATEGORIAPORMOTIVO_PK ON TR_CATEGORIAPORMOTIVO
(N_ID   ASC);



ALTER TABLE TR_CATEGORIAPORMOTIVO
	ADD CONSTRAINT  TR_CATEGORIAPORMOTIVO_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_COLONIACP
(
	N_IDCOLONIA          NUMBER CONSTRAINT SYS_C0011893 NOT NULL ,
	N_IDCODIGOPOSTAL     NUMBER CONSTRAINT SYS_C0011894 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_COLONIACP
	 FOR TR_COLONIACP;




CREATE SYNONYM TR_COLONIACP
	 FOR TR_COLONIACP;



CREATE  INDEX TR_COLONIACP_PK ON TR_COLONIACP
(N_IDCOLONIA   ASC,N_IDCODIGOPOSTAL   ASC);



CREATE TABLE TR_DETALLEENVIONOMINA
(
	N_TIPODETALLE        NUMBER CONSTRAINT SYS_C0011895 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011896 NOT NULL ,
	N_IDENVIOMOMINA      NUMBER CONSTRAINT SYS_C0011897 NOT NULL ,
	N_IDMOVPLAZAPERSONA  NUMBER CONSTRAINT SYS_C0011898 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0011899 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_DETALLEENVIONOMINA
	 FOR TR_DETALLEENVIONOMINA;




CREATE SYNONYM TR_DETALLEENVIONOMINA
	 FOR TR_DETALLEENVIONOMINA;



CREATE  INDEX TR_DETALLEENVIONOMINA_PK ON TR_DETALLEENVIONOMINA
(N_TIPODETALLE   ASC);



CREATE TABLE TR_ESCUELAPROGRAMAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011908 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011909 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011910 NOT NULL ,
	N_IDPROGRAMA         NUMBER CONSTRAINT SYS_C0011911 NOT NULL ,
	D_INICIO             DATE CONSTRAINT SYS_C0011912 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TR_ESCUELAPROGRAMAS
	 FOR TR_ESCUELAPROGRAMAS;




CREATE SYNONYM TR_ESCUELAPROGRAMAS
	 FOR TR_ESCUELAPROGRAMAS;



CREATE UNIQUE INDEX TR_ESCUELAPROGRAMAS_PK ON TR_ESCUELAPROGRAMAS
(N_ID   ASC);



ALTER TABLE TR_ESCUELAPROGRAMAS
	ADD CONSTRAINT  TR_ESCUELAPROGRAMAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TR_ESCUELAPROGRAMAS_INDEX1 ON TR_ESCUELAPROGRAMAS
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC,N_IDPROGRAMA   ASC);



CREATE TABLE TR_ESCUELATELEFONO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011913 NOT NULL ,
	S_NUMERO             VARCHAR2(20 BYTE) NULL ,
	S_COMENTARIO         VARCHAR2(50 BYTE) NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011914 NOT NULL ,
	N_IDTIPOTELEFONO     NUMBER CONSTRAINT SYS_C0011915 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_ESCUELATELEFONO
	 FOR TR_ESCUELATELEFONO;




CREATE SYNONYM TR_ESCUELATELEFONO
	 FOR TR_ESCUELATELEFONO;



CREATE UNIQUE INDEX TC_ESCUELATELEFONO_PK ON TR_ESCUELATELEFONO
(N_ID   ASC);



ALTER TABLE TR_ESCUELATELEFONO
	ADD CONSTRAINT  TC_ESCUELATELEFONO_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_FALTASINASISTENCIASNOTAS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0011916 NOT NULL ,
	N_IDFALTASINASISTENCIAS NUMBER(10) CONSTRAINT SYS_C0011917 NOT NULL ,
	N_IDINASISTENCIASNOTAS NUMBER(10) CONSTRAINT SYS_C0011918 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_FALTASINASISTENCIASNOTAS
	 FOR TR_FALTASINASISTENCIASNOTAS;




CREATE SYNONYM TR_FALTASINASISTENCIASNOTAS
	 FOR TR_FALTASINASISTENCIASNOTAS;



CREATE UNIQUE INDEX PKFALTASINASISTENCIASNOTAS_PK ON TR_FALTASINASISTENCIASNOTAS
(N_ID   ASC);



ALTER TABLE TR_FALTASINASISTENCIASNOTAS
	ADD CONSTRAINT  PKFALTASINASISTENCIASNOTAS_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_FOLIOALUMNO
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012962 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012963 NOT NULL ,
	N_IDTIPOFOLIO        NUMBER(10) CONSTRAINT SYS_C0012964 NOT NULL ,
	S_FOLIOASIGNADO      VARCHAR2(20 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TR_FOLIOALUMNO
	 FOR TR_FOLIOALUMNO;




CREATE SYNONYM TR_FOLIOALUMNO
	 FOR TR_FOLIOALUMNO;



CREATE UNIQUE INDEX TR_FOLIOALUMNO_PK ON TR_FOLIOALUMNO
(N_ID   ASC);



ALTER TABLE TR_FOLIOALUMNO
	ADD CONSTRAINT  TR_FOLIOALUMNO_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_FOLIOTRAMITE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011922 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011923 NOT NULL ,
	N_FOLIOINICIAL       NUMBER NULL ,
	N_FOLIOFINAL         NUMBER NULL ,
	S_ORDENPRESENTACIONINICIAL VARCHAR2(20 BYTE) NULL ,
	S_ORDENPRESENTACIONFINAL VARCHAR2(20 BYTE) NULL ,
	N_FOLIOPRESENTE      NUMBER NULL ,
	D_FECHAASIGNACIONFOLIO TIMESTAMP(6) NULL ,
	S_ORDENPRESENTACIONPRESENTE VARCHAR2(20 BYTE) NULL ,
	D_FECHAASIGNACIONORDENPRESENTE TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM TR_FOLIOTRAMITE
	 FOR TR_FOLIOTRAMITE;




CREATE SYNONYM TR_FOLIOTRAMITE
	 FOR TR_FOLIOTRAMITE;



CREATE UNIQUE INDEX TR_FOLIOTRAMITE_PK ON TR_FOLIOTRAMITE
(N_ID   ASC);



ALTER TABLE TR_FOLIOTRAMITE
	ADD CONSTRAINT  TR_FOLIOTRAMITE_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_FUNCIONREALASIGNATURA
(
	N_IDFUNCIONREAL      NUMBER CONSTRAINT SYS_C0011924 NOT NULL ,
	N_IDASIGNATURAS      NUMBER CONSTRAINT SYS_C0011925 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0011926 NOT NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TR_FUNCIONREALASIGNATURA
	 FOR TR_FUNCIONREALASIGNATURA;




CREATE SYNONYM TR_FUNCIONREALASIGNATURA
	 FOR TR_FUNCIONREALASIGNATURA;



CREATE UNIQUE INDEX TR_FUNCIONREALASIGNATURA_PK ON TR_FUNCIONREALASIGNATURA
(N_IDFUNCIONREAL   ASC,N_IDASIGNATURAS   ASC);



ALTER TABLE TR_FUNCIONREALASIGNATURA
	ADD CONSTRAINT  TR_FUNCIONREALASIGNATURA_PK PRIMARY KEY (N_IDFUNCIONREAL,N_IDASIGNATURAS);



CREATE TABLE TR_GROUPFLUJO
(
	N_ID                 NUMBER(10) NOT NULL ,
	N_IDGROUP            NUMBER NULL ,
	N_IDFLUJOGESTIONDET  NUMBER(10) NULL ,
	N_INDICADORCOMBO     NUMBER NULL ,
	N_SERVICIONIVEL      NUMBER NULL ,
	N_NIVEL_PROCESO      NUMBER NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TR_GROUPFLUJO
	 FOR TR_GROUPFLUJO;




CREATE SYNONYM TR_GROUPFLUJO
	 FOR TR_GROUPFLUJO;



CREATE UNIQUE INDEX TR_GROUPFLUJO_PK ON TR_GROUPFLUJO
(N_ID   ASC);



ALTER TABLE TR_GROUPFLUJO
	ADD CONSTRAINT  TR_GROUPFLUJO_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_GRUPO_CAT
(
	N_ID                 NUMBER NOT NULL ,
	N_IDGROUP            NUMBER NULL ,
	N_IDCATALOGOS        NUMBER NULL 
);



CREATE PUBLIC SYNONYM TR_GRUPO_CAT
	 FOR TR_GRUPO_CAT;



CREATE UNIQUE INDEX SYS_C0028768 ON TR_GRUPO_CAT
(N_ID   ASC);



ALTER TABLE TR_GRUPO_CAT
	ADD CONSTRAINT  SYS_C0028768 PRIMARY KEY (N_ID);



CREATE TABLE TR_INASISTENCIASNOTAS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0011927 NOT NULL ,
	D_FECHAORIGEN        DATE NULL ,
	N_ESTATUS            NUMBER(10) NULL ,
	D_FECHAESTATIUS      TIMESTAMP(6) NULL ,
	N_DIAS               NUMBER(10) NULL ,
	N_IDCALSIFICAINCIDENCIA NUMBER(10) CONSTRAINT SYS_C0011928 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER(10) CONSTRAINT SYS_C0011929 NOT NULL ,
	N_IDESCUELA          NUMBER(10) CONSTRAINT SYS_C0011930 NOT NULL ,
	N_IDPERSONA          NUMBER(10) CONSTRAINT SYS_C0011931 NOT NULL ,
	N_IDTIPOMOV          NUMBER CONSTRAINT SYS_C0011932 NOT NULL ,
	N_PGRUPO             NUMBER NULL ,
	N_PHORARIO           NUMBER NULL ,
	D_FECHACONFIRMACION  DATE NULL 
);



CREATE PUBLIC SYNONYM TR_INASISTENCIASNOTAS
	 FOR TR_INASISTENCIASNOTAS;




CREATE SYNONYM TR_INASISTENCIASNOTAS
	 FOR TR_INASISTENCIASNOTAS;



CREATE UNIQUE INDEX PKINASISTENCIASNOTAS_PK ON TR_INASISTENCIASNOTAS
(N_ID   ASC);



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD CONSTRAINT  PKINASISTENCIASNOTAS PRIMARY KEY (N_ID);



CREATE TABLE TR_MOVIMIENTOSCICLO
(
	N_ID                 NUMBER NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011959 NOT NULL ,
	N_IDPROCESO          NUMBER CONSTRAINT SYS_C0011960 NOT NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TR_MOVIMIENTOSCICLO
	 FOR TR_MOVIMIENTOSCICLO;




CREATE SYNONYM TR_MOVIMIENTOSCICLO
	 FOR TR_MOVIMIENTOSCICLO;



CREATE UNIQUE INDEX TR_MOVIMIENTOSCICLO_PK ON TR_MOVIMIENTOSCICLO
(N_ID   ASC);



ALTER TABLE TR_MOVIMIENTOSCICLO
	ADD CONSTRAINT  TR_MOVIMIENTOSCICLO_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_MOVPLAZAPERSONA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011961 NOT NULL ,
	N_ESTATUSENVIO       NUMBER NULL ,
	D_FECHASOLICITUD     TIMESTAMP(6) NULL ,
	D_FECHAINICIO        TIMESTAMP(6) NULL ,
	D_FECHAFIN           TIMESTAMP(6) NULL ,
	S_TEXTOSOLICITUD     VARCHAR2(1024 BYTE) NULL ,
	N_IDMOTIVO           NUMBER CONSTRAINT SYS_C0011962 NOT NULL ,
	S_FOLIO              VARCHAR2(20 BYTE) NULL ,
	N_IDPERSONA          NUMBER CONSTRAINT SYS_C0011963 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0011964 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011965 NOT NULL ,
	N_IDPADRE            NUMBER NULL ,
	D_FECHAESTATUS       TIMESTAMP(6) NULL ,
	S_OBSERVACIONES      VARCHAR2(200 BYTE) NULL ,
	N_IDFLUJOGESTIONDET  NUMBER NULL ,
	N_ESTATUSPERSONA     NUMBER NULL ,
	N_SITUACIONLABORALPER NUMBER NULL ,
	N_IDESTATUSSOLICITUDPER NUMBER NULL ,
	N_IDMOVPLAZAPERSONA_ASIGNADA NUMBER NULL ,
	N_IDTIPO_BECA        NUMBER NULL ,
	N_IDTIPO_LICENCIA_BECA NUMBER NULL ,
	N_IDIDENTIFICADORCATEGORIA NUMBER NULL 
);



CREATE PUBLIC SYNONYM TR_MOVPLAZAPERSONA
	 FOR TR_MOVPLAZAPERSONA;




CREATE SYNONYM TR_MOVPLAZAPERSONA
	 FOR TR_MOVPLAZAPERSONA;



CREATE UNIQUE INDEX TR_MOVPLAZAPERSONA_PK ON TR_MOVPLAZAPERSONA
(N_ID   ASC);



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD CONSTRAINT  TR_MOVPLAZAPERSONA_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_MOVPLAZAPERSONADET
(
	N_IDMOVPLAZAPERSONA  NUMBER CONSTRAINT SYS_C0011966 NOT NULL ,
	N_IDPLAZAASIGNADA    NUMBER CONSTRAINT SYS_C0011967 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0011968 NOT NULL ,
	N_SITUACIONLABORALPPE INTEGER NULL ,
	N_IDPERSONALPLAZAESCUELA INTEGER NULL 
);



CREATE PUBLIC SYNONYM TR_MOVPLAZAPERSONADET
	 FOR TR_MOVPLAZAPERSONADET;




CREATE SYNONYM TR_MOVPLAZAPERSONADET
	 FOR TR_MOVPLAZAPERSONADET;



CREATE UNIQUE INDEX TR_MOVPLAZAPERSONADET_PK ON TR_MOVPLAZAPERSONADET
(N_ID   ASC);



ALTER TABLE TR_MOVPLAZAPERSONADET
	ADD CONSTRAINT  TR_MOVPLAZAPERSONADET_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_PERSONAHORARIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011976 NOT NULL ,
	N_IDPERSONALGRUPO    NUMBER CONSTRAINT SYS_C0011977 NOT NULL ,
	N_IDESCUELASAULA     NUMBER CONSTRAINT SYS_C0011978 NOT NULL ,
	D_HORAINICIO         CHAR(8 BYTE) NULL ,
	D_HORAFIN            CHAR(8 BYTE) NULL ,
	N_DIASEMANA          NUMBER NULL ,
	N_IDPLANESTUDIOASIGNATURA NUMBER CONSTRAINT SYS_C0011979 NOT NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TR_PERSONAHORARIO
	 FOR TR_PERSONAHORARIO;




CREATE SYNONYM TR_PERSONAHORARIO
	 FOR TR_PERSONAHORARIO;



CREATE UNIQUE INDEX TR_PERSONAHORARIO_PK ON TR_PERSONAHORARIO
(N_ID   ASC);



ALTER TABLE TR_PERSONAHORARIO
	ADD CONSTRAINT  TR_PERSONAHORARIO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TR_PERSONAHORARIO_CK ON TR_PERSONAHORARIO
(N_IDPERSONALGRUPO   ASC,N_IDESCUELASAULA   ASC,N_IDPLANESTUDIOASIGNATURA   ASC);



CREATE TABLE TR_PERSONAHORARIOHISTORICO
(
	N_ID                 NUMBER NOT NULL ,
	N_IDPERSONALGRUPO    NUMBER CONSTRAINT SYS_C0011980 NOT NULL ,
	N_IDESCUELASAULA     NUMBER CONSTRAINT SYS_C0011981 NOT NULL ,
	D_HORAINICIO         CHAR(8 BYTE) NULL ,
	D_HORAFIN            CHAR(8 BYTE) NULL ,
	N_DIASEMANA          NUMBER NULL ,
	N_IDPLANESTUDIOASIGNATURA NUMBER CONSTRAINT SYS_C0011982 NOT NULL ,
	N_IDREGISTRO         NUMBER CONSTRAINT SYS_C0011983 NOT NULL ,
	D_FECHACAMBIO        DATE NULL ,
	D_FECHAFINMOVIMIENTO TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM TR_PERSONAHORARIOHISTORICO
	 FOR TR_PERSONAHORARIOHISTORICO;




CREATE SYNONYM TR_PERSONAHORARIOHISTORICO
	 FOR TR_PERSONAHORARIOHISTORICO;



CREATE UNIQUE INDEX TR_PERSONAHORARIOHISTORICO_PK ON TR_PERSONAHORARIOHISTORICO
(N_ID   ASC);



ALTER TABLE TR_PERSONAHORARIOHISTORICO
	ADD CONSTRAINT  TR_PERSONAHORARIOHISTORICO_PK PRIMARY KEY (N_ID);



CREATE TABLE TR_PERSONALGRUPO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011990 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011991 NOT NULL ,
	N_IDPERSONAPLAZA     NUMBER CONSTRAINT SYS_C0011992 NOT NULL ,
	N_IDESCUELASAULA     NUMBER NULL ,
	N_HORASSEMANA        NUMBER NULL ,
	D_INICIO             DATE NULL ,
	D_FIN                DATE NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0011993 NOT NULL ,
	N_IDORIGEN           NUMBER NULL ,
	N_HORASRESTANTES     NUMBER DEFAULT  0  NULL ,
	N_HORASASIGNADAS     NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TR_PERSONALGRUPO
	 FOR TR_PERSONALGRUPO;




CREATE SYNONYM TR_PERSONALGRUPO
	 FOR TR_PERSONALGRUPO;



CREATE UNIQUE INDEX TR_PERSONALGRUPO_PK ON TR_PERSONALGRUPO
(N_ID   ASC);



ALTER TABLE TR_PERSONALGRUPO
	ADD CONSTRAINT  TR_PERSONALGRUPO_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TR_PERSONALGRUPO_UK ON TR_PERSONALGRUPO
(N_IDCICLOESCOLAR   ASC,N_IDESCUELASAULA   ASC,N_IDPERSONAPLAZA   ASC);



CREATE TABLE TR_PERSONALGRUPOHISTORICO
(
	N_ID                 NUMBER NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0011994 NOT NULL ,
	N_IDPERSONAPLAZA     NUMBER CONSTRAINT SYS_C0011995 NOT NULL ,
	N_IDESCUELASAULA     NUMBER NULL ,
	N_HORASSEMANA        NUMBER NULL ,
	D_INICIO             DATE NULL ,
	D_FIN                DATE NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_IDREGISTRO         NUMBER NULL ,
	D_FECHACAMBIO        DATE NULL ,
	D_FECHAFINMOVIMIENTO TIMESTAMP(6) NULL 
);



CREATE PUBLIC SYNONYM TR_PERSONALGRUPOHISTORICO
	 FOR TR_PERSONALGRUPOHISTORICO;




CREATE SYNONYM TR_PERSONALGRUPOHISTORICO
	 FOR TR_PERSONALGRUPOHISTORICO;



CREATE UNIQUE INDEX TR_PERSONALGRUPOHISTORICO_PK ON TR_PERSONALGRUPOHISTORICO
(N_ID   ASC);



ALTER TABLE TR_PERSONALGRUPOHISTORICO
	ADD CONSTRAINT  TR_PERSONALGRUPOHISTORICO_PK PRIMARY KEY (N_ID);



CREATE  INDEX TR_PERSONALGRUPOHISTORICO_CK ON TR_PERSONALGRUPOHISTORICO
(N_IDCICLOESCOLAR   ASC,N_IDPERSONAPLAZA   ASC,N_IDESCUELASAULA   ASC);



CREATE TABLE TR_PLAZAASIGNADA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0011996 NOT NULL ,
	N_ESTATUSASIGNACION  NUMBER NULL ,
	FECHAINICIOPLAZA     TIMESTAMP(6) NULL ,
	D_FECHAFIN           TIMESTAMP(6) NULL ,
	N_HORASSEMANA        NUMBER(4,1) NULL ,
	N_HORASDISPONIBLES   NUMBER(4,1) NULL ,
	N_DIASECONOMICOS     CHAR(10 BYTE) NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0011997 NOT NULL ,
	N_IDPLAZA            NUMBER CONSTRAINT SYS_C0011998 NOT NULL ,
	N_CCTPAGO            NUMBER CONSTRAINT SYS_C0011999 NOT NULL ,
	N_TIPONOMBRAMIENTO   NUMBER CONSTRAINT SYS_C0012000 NOT NULL ,
	N_SITUACION          NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TR_PLAZAASIGNADA
	 FOR TR_PLAZAASIGNADA;




CREATE SYNONYM TR_PLAZAASIGNADA
	 FOR TR_PLAZAASIGNADA;



CREATE UNIQUE INDEX PK52 ON TR_PLAZAASIGNADA
(N_ID   ASC);



ALTER TABLE TR_PLAZAASIGNADA
	ADD CONSTRAINT  TR_PLAZAASIGNADA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TR_PLAZAASIGNADA_CK ON TR_PLAZAASIGNADA
(N_IDPERSONAL   ASC,N_IDPLAZA   ASC);



CREATE TABLE TR_PROG_USUARIOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012419 NOT NULL ,
	N_IDUSUARIOPERMISO   NUMBER NULL ,
	N_IDPROGRAMA         NUMBER CONSTRAINT SYS_C0012420 NOT NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	D_FECHARELACION      DATE NULL 
);



CREATE PUBLIC SYNONYM TR_PROG_USUARIOS
	 FOR TR_PROG_USUARIOS;




CREATE SYNONYM TR_PROG_USUARIOS
	 FOR TR_PROG_USUARIOS;



CREATE UNIQUE INDEX PK_PROG_USU ON TR_PROG_USUARIOS
(N_ID   ASC);



ALTER TABLE TR_PROG_USUARIOS
	ADD CONSTRAINT  PK_PROG_USU PRIMARY KEY (N_ID);



CREATE TABLE TR_REPEVAZONACT
(
	N_ID                 NUMBER(10) NOT NULL ,
	N_IDREPEVAZONA       NUMBER(10) CONSTRAINT SYS_C0019307 NOT NULL ,
	N_IDESCUELA          NUMBER(10) NULL ,
	D_INICIOPROCESO      TIMESTAMP(6) NULL ,
	D_FINPROCESO         TIMESTAMP(6) NULL ,
	S_RUTA               VARCHAR2(500 BYTE) NULL ,
	N_IDESTATUS          NUMBER(10) CONSTRAINT SYS_C0019308 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_REPEVAZONACT
	 FOR TR_REPEVAZONACT;




CREATE SYNONYM TR_REPEVAZONACT
	 FOR TR_REPEVAZONACT;



CREATE UNIQUE INDEX PK_REPEVAZONACT ON TR_REPEVAZONACT
(N_ID   ASC);



ALTER TABLE TR_REPEVAZONACT
	ADD CONSTRAINT  PK_REPEVAZONACT PRIMARY KEY (N_ID);



CREATE TABLE TR_REQUISITOSDOCUMENTALES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012436 NOT NULL ,
	N_IDMOTIVO           NUMBER CONSTRAINT SYS_C0012437 NOT NULL ,
	N_IDDOCUMENTO        NUMBER CONSTRAINT SYS_C0012438 NOT NULL ,
	N_IDFLUJOGESTIONDET  NUMBER CONSTRAINT SYS_C0012439 NOT NULL ,
	N_REQUERIDO          NUMBER DEFAULT  1  NULL 
);



CREATE PUBLIC SYNONYM TR_REQUISITOSDOCUMENTALES
	 FOR TR_REQUISITOSDOCUMENTALES;




CREATE SYNONYM TR_REQUISITOSDOCUMENTALES
	 FOR TR_REQUISITOSDOCUMENTALES;



CREATE UNIQUE INDEX TR_REQUISITOSDOCUMENTALES_PK1 ON TR_REQUISITOSDOCUMENTALES
(N_IDMOTIVO   ASC,N_IDDOCUMENTO   ASC,N_IDFLUJOGESTIONDET   ASC);



ALTER TABLE TR_REQUISITOSDOCUMENTALES
	ADD CONSTRAINT  TR_REQUISITOSDOCUMENTALES_PK PRIMARY KEY (N_IDMOTIVO,N_IDDOCUMENTO,N_IDFLUJOGESTIONDET);



CREATE TABLE TR_TRAMITEDOCUMENTOS
(
	N_ID                 CHAR(10 BYTE) CONSTRAINT SYS_C0012006 NOT NULL ,
	N_IDMOVPLAZAPERSONA  NUMBER CONSTRAINT SYS_C0012007 NOT NULL ,
	N_IDDOCUMENTO        NUMBER CONSTRAINT SYS_C0012008 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_TRAMITEDOCUMENTOS
	 FOR TR_TRAMITEDOCUMENTOS;




CREATE SYNONYM TR_TRAMITEDOCUMENTOS
	 FOR TR_TRAMITEDOCUMENTOS;



CREATE UNIQUE INDEX PK203 ON TR_TRAMITEDOCUMENTOS
(N_ID   ASC);



ALTER TABLE TR_TRAMITEDOCUMENTOS
	ADD CONSTRAINT  TR_TRAMITEDOCUMENTOS PRIMARY KEY (N_ID);



CREATE  INDEX TR_TRAMITEDOCUMENTOS_INDEX1 ON TR_TRAMITEDOCUMENTOS
(N_IDMOVPLAZAPERSONA   ASC,N_IDDOCUMENTO   ASC);



CREATE TABLE TR_VINCULARALUMNO
(
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012012 NOT NULL ,
	N_IDUSER             NUMBER CONSTRAINT SYS_C0012013 NOT NULL 
);



CREATE PUBLIC SYNONYM TR_VINCULARALUMNO
	 FOR TR_VINCULARALUMNO;




CREATE SYNONYM TR_VINCULARALUMNO
	 FOR TR_VINCULARALUMNO;



CREATE UNIQUE INDEX TR_VINCULARALUMNO_PK ON TR_VINCULARALUMNO
(N_IDALUMNO   ASC,N_IDUSER   ASC);



ALTER TABLE TR_VINCULARALUMNO
	ADD CONSTRAINT  TR_VINCULARALUMNO_PK PRIMARY KEY (N_IDALUMNO,N_IDUSER);



CREATE TABLE TW_AGENDAPERSONA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012367 NOT NULL ,
	D_FECHA              DATE NULL ,
	D_HORA_INICIO        TIMESTAMP(6) NULL ,
	S_DESCRIPCION        VARCHAR2(200 BYTE) NULL ,
	N_IDUSER             NUMBER NULL ,
	D_HORA_FIN           TIMESTAMP(6) NULL ,
	S_TITULO             VARCHAR2(200 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_AGENDAPERSONA
	 FOR TW_AGENDAPERSONA;




CREATE SYNONYM TW_AGENDAPERSONA
	 FOR TW_AGENDAPERSONA;



CREATE UNIQUE INDEX TW_AGENDAPERSONA_PK ON TW_AGENDAPERSONA
(N_ID   ASC);



ALTER TABLE TW_AGENDAPERSONA
	ADD CONSTRAINT  TW_AGENDAPERSONA_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOAPOYOREQUERIDOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012014 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012015 NOT NULL ,
	N_IDTIPOASIGNATURAPERIODOS NUMBER CONSTRAINT SYS_C0012016 NOT NULL ,
	N_IDASIGNATURA       NUMBER CONSTRAINT SYS_C0012017 NOT NULL ,
	S_APOYOALUMNO        VARCHAR2(350 BYTE) NULL ,
	S_OBS_ESP            VARCHAR2(350 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOAPOYOREQUERIDOS
	 FOR TW_ALUMNOAPOYOREQUERIDOS;




CREATE SYNONYM TW_ALUMNOAPOYOREQUERIDOS
	 FOR TW_ALUMNOAPOYOREQUERIDOS;



CREATE UNIQUE INDEX TW_ALUMNOAPOYOREQUERIDOS ON TW_ALUMNOAPOYOREQUERIDOS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOAPOYOREQUERIDOS
	ADD CONSTRAINT  TW_ALUMNOAPOYOREQUERIDOS PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOAPOYOREQUERIDOS_K1 ON TW_ALUMNOAPOYOREQUERIDOS
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDTIPOASIGNATURAPERIODOS   ASC,N_IDASIGNATURA   ASC);



CREATE TABLE TW_ALUMNOASIGNATURAPROMEDIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012026 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012027 NOT NULL ,
	N_IDPLANDEESTUDIOSASIGNATURA NUMBER CONSTRAINT SYS_C0012028 NOT NULL ,
	N_CALIFICACIONPROMEDIO NUMBER(3,1) NULL ,
	S_CALIFICACIONEQUIVALENTE VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOASIGNATURAPROMEDIO
	 FOR TW_ALUMNOASIGNATURAPROMEDIO;




CREATE SYNONYM TW_ALUMNOASIGNATURAPROMEDIO
	 FOR TW_ALUMNOASIGNATURAPROMEDIO;



CREATE UNIQUE INDEX TW_ALUMNOASIGNATURAPROM_PK ON TW_ALUMNOASIGNATURAPROMEDIO
(N_ID   ASC);



ALTER TABLE TW_ALUMNOASIGNATURAPROMEDIO
	ADD CONSTRAINT  TW_ALUMNOASIGNATURAPROM_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOASIGNATURAPROMED_UK1 ON TW_ALUMNOASIGNATURAPROMEDIO
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDPLANDEESTUDIOSASIGNATURA   ASC);



ALTER TABLE TW_ALUMNOASIGNATURAPROMEDIO
ADD CONSTRAINT  TW_ALUMNOASIGNATURAPROMED_UK1 UNIQUE (N_IDALUMNOCICLOESCOLAR,N_IDPLANDEESTUDIOSASIGNATURA);



CREATE TABLE TW_ALUMNOBAJAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012029 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012030 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012031 NOT NULL ,
	N_IDESCUELAAULA      NUMBER CONSTRAINT SYS_C0012032 NOT NULL ,
	N_IDMOTIVOBAJAALUMNO NUMBER CONSTRAINT SYS_C0012033 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(2000 BYTE) NULL ,
	D_FECHAMOVIMIENTO    DATE NULL ,
	N_IDULTIMOMOVIMIENTO NUMBER NULL ,
	N_IDALUMNOCONTACTOS  NUMBER NULL ,
	S_ELEMENTOSENTREGADOS VARCHAR2(2000 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOBAJAS
	 FOR TW_ALUMNOBAJAS;




CREATE SYNONYM TW_ALUMNOBAJAS
	 FOR TW_ALUMNOBAJAS;



CREATE UNIQUE INDEX TW_ALUMNOBAJAS_PK ON TW_ALUMNOBAJAS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOBAJAS
	ADD CONSTRAINT  TW_ALUMNOBAJAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOBAJAS_CK ON TW_ALUMNOBAJAS
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDALUMNO   ASC,N_IDESCUELAAULA   ASC);



CREATE TABLE TW_ALUMNOBAP
(
	N_IDALUMNO           INTEGER NULL ,
	N_IDBAP              NUMBER NULL ,
	D_FECHAULTACT        TIMESTAMP(6) NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012374 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOBAP
	 FOR TW_ALUMNOBAP;




CREATE SYNONYM TW_ALUMNOBAP
	 FOR TW_ALUMNOBAP;



CREATE UNIQUE INDEX TW_ALUMNOBAP_PK ON TW_ALUMNOBAP
(N_ID   ASC);



ALTER TABLE TW_ALUMNOBAP
	ADD CONSTRAINT  TW_ALUMNOBAP_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOBAPAPOYOS
(
	N_IDALUMNO           INTEGER NULL ,
	N_IDBAPAPOYOS        NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	D_FECHAULTACT        TIMESTAMP(6) NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012395 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOBAPAPOYOS
	 FOR TW_ALUMNOBAPAPOYOS;




CREATE SYNONYM TW_ALUMNOBAPAPOYOS
	 FOR TW_ALUMNOBAPAPOYOS;



CREATE UNIQUE INDEX TW_ALUMNOBAPAPOYOS_PK ON TW_ALUMNOBAPAPOYOS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOBAPAPOYOS
	ADD CONSTRAINT  TW_ALUMNOBAPAPOYOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOBECA
(
	N_IDALUMNOCOMPLEMENTO NUMBER CONSTRAINT SYS_C0012034 NOT NULL ,
	N_IDBECA             NUMBER CONSTRAINT SYS_C0012035 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOBECA
	 FOR TW_ALUMNOBECA;




CREATE SYNONYM TW_ALUMNOBECA
	 FOR TW_ALUMNOBECA;



CREATE UNIQUE INDEX TW_ALUMNOBECA_PK ON TW_ALUMNOBECA
(N_IDALUMNOCOMPLEMENTO   ASC,N_IDBECA   ASC);



ALTER TABLE TW_ALUMNOBECA
	ADD CONSTRAINT  TW_ALUMNOBECA_PK PRIMARY KEY (N_IDALUMNOCOMPLEMENTO,N_IDBECA);



CREATE TABLE TW_ALUMNOCALIFICACIONES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012036 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012037 NOT NULL ,
	N_IDTIPOASIGNATURAPERIODOS NUMBER CONSTRAINT SYS_C0012038 NOT NULL ,
	N_IDPLANDEESTUDIOSASIGNATURA NUMBER CONSTRAINT SYS_C0012039 NOT NULL ,
	S_CALIFICACION       VARCHAR2(3 BYTE) NULL ,
	S_CALIFICACIONEQUIVALENTE VARCHAR2(100 BYTE) NULL ,
	S_CALIFCARTILLA      VARCHAR2(20 BYTE) NULL ,
	N_ORIGENFALTAS       NUMBER DEFAULT  1  NULL ,
	D_ALTA               TIMESTAMP(6) DEFAULT  sysdate  NULL ,
	D_MODIFICACION       TIMESTAMP(6) DEFAULT  sysdate  NULL ,
	S_CALIFICACIONANTERIOR VARCHAR2(5 BYTE) NULL ,
	N_IDUSER             NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCALIFICACIONES
	 FOR TW_ALUMNOCALIFICACIONES;




CREATE SYNONYM TW_ALUMNOCALIFICACIONES
	 FOR TW_ALUMNOCALIFICACIONES;



CREATE UNIQUE INDEX PK4024 ON TW_ALUMNOCALIFICACIONES
(N_ID   ASC);



ALTER TABLE TW_ALUMNOCALIFICACIONES
	ADD CONSTRAINT  TW_ALUMNOCALIFICACIONES_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOCALIFICACIONES_INDEX1 ON TW_ALUMNOCALIFICACIONES
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDTIPOASIGNATURAPERIODOS   ASC,N_IDPLANDEESTUDIOSASIGNATURA   ASC);



CREATE TABLE TW_ALUMNOCAPACIDADESDIFERENTES
(
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012040 NOT NULL ,
	N_IDNECESIDADESDIFERENTES NUMBER CONSTRAINT SYS_C0012041 NOT NULL ,
	S_RESPUESTA          VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012042 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012043 NOT NULL ,
	D_ALTA               DATE NULL ,
	D_BAJA               DATE NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCAPACIDADESDIFERENTES
	 FOR TW_ALUMNOCAPACIDADESDIFERENTES;




CREATE SYNONYM TW_ALUMNOCAPACIDADESDIFERENTES
	 FOR TW_ALUMNOCAPACIDADESDIFERENTES;



CREATE UNIQUE INDEX TW_ALUMNOCAPACIDADESDIFER_PK ON TW_ALUMNOCAPACIDADESDIFERENTES
(N_ID   ASC);



ALTER TABLE TW_ALUMNOCAPACIDADESDIFERENTES
	ADD CONSTRAINT  TW_ALUMNOCAPACIDADESDIFER_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOCAPACIDADESDIF_CK ON TW_ALUMNOCAPACIDADESDIFERENTES
(N_IDALUMNO   ASC,N_IDNECESIDADESDIFERENTES   ASC);



CREATE TABLE TW_ALUMNOCICLOESCOLAR
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012044 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012045 NOT NULL ,
	N_IDULTIMOMOVIMIENTO NUMBER NULL ,
	N_IDESCUELAAULA      NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER CONSTRAINT SYS_C0012046 NOT NULL ,
	N_IDORIGENREGISTRO   NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012047 NOT NULL ,
	N_PROMEDIO           NUMBER DEFAULT  0  NULL ,
	N_INASISTENCIAS      NUMBER DEFAULT  0  NULL ,
	N_INCIDENCIAS        NUMBER DEFAULT  0  NULL ,
	N_IDESTATUS          NUMBER NULL ,
	D_PRESENTACION       DATE NULL ,
	N_IDINDICADORPROMOVIDO NUMBER DEFAULT  2  NULL ,
	N_IDSITUACIONALUMNO  NUMBER NULL ,
	N_RECURSANDO         NUMBER DEFAULT  0  NULL ,
	S_FOLIO_EVALUACION   VARCHAR2(20 BYTE) NULL ,
	N_PROMEDIONIVELEDUCATIVO NUMBER NULL ,
	S_CALEQUIVALENTENIVEL VARCHAR2(5 BYTE) NULL ,
	S_CALEQUIVALENTEGRADO VARCHAR2(5 BYTE) NULL ,
	N_MATERIAS_REPROBADAS NUMBER DEFAULT  0  NULL ,
	N_REPROCESAR_PROMEDIOS NUMBER DEFAULT  0  NULL ,
	N_CALITOTALESGRADO   NUMBER DEFAULT  0  NULL ,
	N_CALIREGISTRADAS    NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCICLOESCOLAR
	 FOR TW_ALUMNOCICLOESCOLAR;




CREATE SYNONYM TW_ALUMNOCICLOESCOLAR
	 FOR TW_ALUMNOCICLOESCOLAR;



CREATE UNIQUE INDEX TW_ALUMNOCICLOESCOLAR_PK ON TW_ALUMNOCICLOESCOLAR
(N_ID   ASC);



ALTER TABLE TW_ALUMNOCICLOESCOLAR
	ADD CONSTRAINT  TW_ALUMNOCICLOESCOLAR_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOCICLOESCOLAR_CE2 ON TW_ALUMNOCICLOESCOLAR
(N_IDCICLOESCOLAR   ASC,N_IDALUMNO   ASC);



CREATE  INDEX TW_ALUMNOCICLOESCOLAR_CK ON TW_ALUMNOCICLOESCOLAR
(N_IDESCUELAAULA   ASC,N_IDESTATUS   ASC,N_IDALUMNO   ASC);



CREATE TABLE TW_ALUMNOCICLOESCOLARHISTORICO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012048 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012049 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012050 NOT NULL ,
	N_IDULTIMOMOVIMIENTO NUMBER NULL ,
	N_IDESCUELAAULA      NUMBER CONSTRAINT SYS_C0012051 NOT NULL ,
	N_IDESCUELA          NUMBER NULL ,
	D_OPERACIONALUMNO    TIMESTAMP(6) NULL ,
	N_IDOPERACIONALUMNO  NUMBER NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_IDORIGENREGISTRO   NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_PROMEDIO           NUMBER DEFAULT  0  NULL ,
	N_INASISTENCIAS      NUMBER DEFAULT  0  NULL ,
	N_INCIDENCIAS        NUMBER DEFAULT  0  NULL ,
	N_IDESTATUS          NUMBER NULL ,
	D_PRESENTACION       DATE NULL ,
	N_IDINDICADORPROMOVIDO NUMBER DEFAULT  0  NULL ,
	N_IDSITUACIONALUMNO  NUMBER NULL ,
	N_RECURSANDO         NUMBER DEFAULT  0  NULL ,
	S_FOLIO_EVALUACION   VARCHAR2(20 BYTE) NULL ,
	N_PROMEDIONIVELEDUCATIVO NUMBER NULL ,
	S_CALEQUIVALENTENIVEL VARCHAR2(5 BYTE) NULL ,
	S_CALEQUIVALENTEGRADO VARCHAR2(5 BYTE) NULL ,
	N_MATERIAS_REPROBADAS NUMBER DEFAULT  0  NULL ,
	N_CALITOTALESGRADO   NUMBER DEFAULT  0  NULL ,
	N_CALIREGISTRADAS    NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCICLOESCOLARHISTORICO
	 FOR TW_ALUMNOCICLOESCOLARHISTORICO;




CREATE SYNONYM TW_ALUMNOCICLOESCOLARHISTORICO
	 FOR TW_ALUMNOCICLOESCOLARHISTORICO;



CREATE UNIQUE INDEX TW_ALUMNOCICLOESCOLARHIS_PK ON TW_ALUMNOCICLOESCOLARHISTORICO
(N_ID   ASC);



ALTER TABLE TW_ALUMNOCICLOESCOLARHISTORICO
	ADD CONSTRAINT  TW_ALUMNOCICLOESCOLARHIS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOCICLOESCOLARHIS_CK ON TW_ALUMNOCICLOESCOLARHISTORICO
(N_IDALUMNO   ASC,N_IDALUMNOCICLOESCOLAR   ASC,N_IDESCUELA   ASC);



CREATE TABLE TW_ALUMNOCONTACTOCORREO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012052 NOT NULL ,
	N_IDALUMNOCONTACTOS  NUMBER CONSTRAINT SYS_C0012053 NOT NULL ,
	N_IDTIPOCORREO       NUMBER NULL ,
	S_CORREOELECTRONICO  VARCHAR2(80 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCONTACTOCORREO
	 FOR TW_ALUMNOCONTACTOCORREO;




CREATE SYNONYM TW_ALUMNOCONTACTOCORREO
	 FOR TW_ALUMNOCONTACTOCORREO;



CREATE UNIQUE INDEX TW_ALUMNOCONTACTOCORREO_PK ON TW_ALUMNOCONTACTOCORREO
(N_ID   ASC);



ALTER TABLE TW_ALUMNOCONTACTOCORREO
	ADD CONSTRAINT  TW_ALUMNOCONTACTOCORREO_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOCONTACTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0013182 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0013183 NOT NULL ,
	S_NOMBRES            VARCHAR2(60 BYTE) NULL ,
	S_PRIMERAPELLIDO     VARCHAR2(60 BYTE) NULL ,
	S_SEGUNDOAPELLIDO    VARCHAR2(60 BYTE) NULL ,
	D_FECHNAC            DATE NULL ,
	N_IDESCOLARIDAD      NUMBER CONSTRAINT SYS_C0013184 NOT NULL ,
	N_IDPARENTESCO       NUMBER CONSTRAINT SYS_C0013185 NOT NULL ,
	N_IDCONTACTODOMICILIO NUMBER NULL ,
	N_IDOCUPACION        NUMBER CONSTRAINT SYS_C0013186 NOT NULL ,
	N_IDEDNIASINDIGENAS  NUMBER CONSTRAINT SYS_C0013187 NOT NULL ,
	B_IMAGEN             BLOB NULL ,
	N_IDENTIFEDERDENAC   NUMBER CONSTRAINT SYS_C0013188 NOT NULL ,
	N_IDPAIS             NUMBER NULL ,
	N_IDSEXO             NUMBER NULL ,
	N_IDTIPOSANGRE       NUMBER NULL ,
	N_RECOGEALUMNO       NUMBER DEFAULT  0  NULL ,
	N_RESPONSABLEALUMNO  NUMBER DEFAULT  0  NULL ,
	S_CURP               VARCHAR2(18 BYTE) NULL ,
	N_INDIGENA           NUMBER CONSTRAINT SYS_C0013189 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCONTACTOS
	 FOR TW_ALUMNOCONTACTOS;




CREATE SYNONYM TW_ALUMNOCONTACTOS
	 FOR TW_ALUMNOCONTACTOS;



CREATE UNIQUE INDEX TW_ALUMNOCONTACTOS_PK ON TW_ALUMNOCONTACTOS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD CONSTRAINT  TW_ALUMNOCONTACTOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOCONTACTOS_INDEX1 ON TW_ALUMNOCONTACTOS
(N_IDALUMNO   ASC,N_IDPARENTESCO   ASC);



CREATE TABLE TW_ALUMNOCONTACTOTELEFONO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012054 NOT NULL ,
	N_IDALUMNOCONTACTOS  NUMBER CONSTRAINT SYS_C0012055 NOT NULL ,
	N_IDTIPOTELEFONO     NUMBER CONSTRAINT SYS_C0012056 NOT NULL ,
	S_NUMERO             VARCHAR2(20 BYTE) CONSTRAINT SYS_C0012057 NOT NULL ,
	S_EXTENSION          VARCHAR2(20 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOCONTACTOTELEFONO
	 FOR TW_ALUMNOCONTACTOTELEFONO;




CREATE SYNONYM TW_ALUMNOCONTACTOTELEFONO
	 FOR TW_ALUMNOCONTACTOTELEFONO;



CREATE TABLE TW_ALUMNODATOSESTADISTICOS
(
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012058 NOT NULL ,
	N_IDDATOSESTADISTICOS NUMBER CONSTRAINT SYS_C0012059 NOT NULL ,
	S_RESPUESTADATOESTADISTICO VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNODATOSESTADISTICOS
	 FOR TW_ALUMNODATOSESTADISTICOS;




CREATE SYNONYM TW_ALUMNODATOSESTADISTICOS
	 FOR TW_ALUMNODATOSESTADISTICOS;



CREATE UNIQUE INDEX TW_ALUMNODATOSESTADISTICO_PK ON TW_ALUMNODATOSESTADISTICOS
(N_IDALUMNO   ASC,N_IDDATOSESTADISTICOS   ASC);



ALTER TABLE TW_ALUMNODATOSESTADISTICOS
	ADD CONSTRAINT  TW_ALUMNODATOSESTADISTICO_PK PRIMARY KEY (N_IDALUMNO,N_IDDATOSESTADISTICOS);



CREATE TABLE TW_ALUMNODOCUMENTOS
(
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012060 NOT NULL ,
	N_IDDOCUMENTOS       NUMBER CONSTRAINT SYS_C0012061 NOT NULL ,
	S_IMAGEN             VARCHAR2(250 BYTE) NULL ,
	D_ALTA               DATE NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNODOCUMENTOS
	 FOR TW_ALUMNODOCUMENTOS;




CREATE SYNONYM TW_ALUMNODOCUMENTOS
	 FOR TW_ALUMNODOCUMENTOS;



CREATE UNIQUE INDEX TW_ALUMNODOCUMENTOS_PK ON TW_ALUMNODOCUMENTOS
(N_IDALUMNO   ASC,N_IDDOCUMENTOS   ASC);



ALTER TABLE TW_ALUMNODOCUMENTOS
	ADD CONSTRAINT  TW_ALUMNODOCUMENTOS_PK PRIMARY KEY (N_IDALUMNO,N_IDDOCUMENTOS);



CREATE TABLE TW_ALUMNOINASISTENCIAS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012068 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012069 NOT NULL ,
	N_IDTIPOINASISTENCIA NUMBER CONSTRAINT SYS_C0012070 NOT NULL ,
	N_IDTIPOJUSTINASIST  NUMBER NULL ,
	D_FECHA              DATE NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	D_JUSTIFICACION      DATE NULL ,
	S_USUARIOOPERACION   VARCHAR2(50 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOINASISTENCIAS
	 FOR TW_ALUMNOINASISTENCIAS;




CREATE SYNONYM TW_ALUMNOINASISTENCIAS
	 FOR TW_ALUMNOINASISTENCIAS;



CREATE UNIQUE INDEX PK1811 ON TW_ALUMNOINASISTENCIAS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOINASISTENCIAS
	ADD CONSTRAINT  TW_ALUMNOINASISTENCIAS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOINASISTENCIAS_INDEX1 ON TW_ALUMNOINASISTENCIAS
(N_IDALUMNOCICLOESCOLAR   ASC,D_FECHA   ASC);



CREATE TABLE TW_ALUMNOINCIDENCIA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012071 NOT NULL ,
	N_ESTATUSINCIDENCIA  NUMBER CONSTRAINT SYS_C0012072 NOT NULL ,
	D_ALTA               DATE NULL ,
	D_OPERACION          DATE CONSTRAINT SYS_C0012073 NOT NULL ,
	S_USUARIOALTA        VARCHAR2(50 BYTE) NULL ,
	S_USUARIOOPERACION   VARCHAR2(50 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	S_FOLIOINCIDENCIA    VARCHAR2(100 BYTE) NULL ,
	D_INCIDENCIA         DATE NULL ,
	N_TIPOREGISTRO       NUMBER NULL ,
	N_IDALCESCOLARHISTORICO NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOINCIDENCIA
	 FOR TW_ALUMNOINCIDENCIA;




CREATE SYNONYM TW_ALUMNOINCIDENCIA
	 FOR TW_ALUMNOINCIDENCIA;



CREATE UNIQUE INDEX TW_ALUMNOINCIDENCIA_PK ON TW_ALUMNOINCIDENCIA
(N_ID   ASC);



ALTER TABLE TW_ALUMNOINCIDENCIA
	ADD CONSTRAINT  TW_ALUMNOINCIDENCIA_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOINCIDENCIABITACORA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012074 NOT NULL ,
	N_IDALUMNOINCIDENCIA NUMBER CONSTRAINT SYS_C0012075 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	D_FECHACREACION      DATE NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOINCIDENCIABITACORA
	 FOR TW_ALUMNOINCIDENCIABITACORA;




CREATE SYNONYM TW_ALUMNOINCIDENCIABITACORA
	 FOR TW_ALUMNOINCIDENCIABITACORA;



CREATE UNIQUE INDEX TW_ALUMNOINCIDENCIABITACORA_PK ON TW_ALUMNOINCIDENCIABITACORA
(N_ID   ASC);



ALTER TABLE TW_ALUMNOINCIDENCIABITACORA
	ADD CONSTRAINT  TW_ALUMNOINCIDENCIABITACORA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOINCIDENCIABIT_NUK ON TW_ALUMNOINCIDENCIABITACORA
(N_IDALUMNOINCIDENCIA   ASC,D_FECHACREACION   ASC);



CREATE TABLE TW_ALUMNOINCIDENCIADOCTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012076 NOT NULL ,
	N_IDALUMNOINCIDENCIA NUMBER CONSTRAINT SYS_C0012077 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	S_IMAGEN             VARCHAR2(250 BYTE) NULL ,
	D_FECHAREGISTRO      DATE NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOINCIDENCIADOCTOS
	 FOR TW_ALUMNOINCIDENCIADOCTOS;




CREATE SYNONYM TW_ALUMNOINCIDENCIADOCTOS
	 FOR TW_ALUMNOINCIDENCIADOCTOS;



CREATE UNIQUE INDEX TW_ALUMNOINCIDENCIADOCTOS_PK ON TW_ALUMNOINCIDENCIADOCTOS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOINCIDENCIADOCTOS
	ADD CONSTRAINT  TW_ALUMNOINCIDENCIADOCTOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOINCIDENCIAFALTA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012078 NOT NULL ,
	N_IDALUMNOINCIDENCIA NUMBER CONSTRAINT SYS_C0012079 NOT NULL ,
	N_IDFALTACONDUCTA    NUMBER CONSTRAINT SYS_C0012080 NOT NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOINCIDENCIAFALTA
	 FOR TW_ALUMNOINCIDENCIAFALTA;




CREATE SYNONYM TW_ALUMNOINCIDENCIAFALTA
	 FOR TW_ALUMNOINCIDENCIAFALTA;



CREATE UNIQUE INDEX TW_ALUMNOINSIDENCIAFALTA_PK ON TW_ALUMNOINCIDENCIAFALTA
(N_ID   ASC);



ALTER TABLE TW_ALUMNOINCIDENCIAFALTA
	ADD CONSTRAINT  TW_ALUMNOINSIDENCIAFALTA_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX U_TW_ALUMNOINSIDENCIAFALTA ON TW_ALUMNOINCIDENCIAFALTA
(N_IDALUMNOINCIDENCIA   ASC,N_IDFALTACONDUCTA   ASC);



CREATE TABLE TW_ALUMNOINCIDENCIAMEDIDA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012081 NOT NULL ,
	N_IDALUMNOINCIDENCIA NUMBER CONSTRAINT SYS_C0012082 NOT NULL ,
	N_IDNIVELMEDIDA      NUMBER CONSTRAINT SYS_C0012083 NOT NULL ,
	N_ESTATUS            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOINCIDENCIAMEDIDA
	 FOR TW_ALUMNOINCIDENCIAMEDIDA;




CREATE SYNONYM TW_ALUMNOINCIDENCIAMEDIDA
	 FOR TW_ALUMNOINCIDENCIAMEDIDA;



CREATE UNIQUE INDEX PK1521 ON TW_ALUMNOINCIDENCIAMEDIDA
(N_ID   ASC);



ALTER TABLE TW_ALUMNOINCIDENCIAMEDIDA
	ADD CONSTRAINT  TW_ALUMNOINCIDENCIAMEDIDA_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX U_TW_ALUMNOINCIDENCIAMEDIDA ON TW_ALUMNOINCIDENCIAMEDIDA
(N_IDALUMNOINCIDENCIA   ASC,N_IDNIVELMEDIDA   ASC);



ALTER TABLE TW_ALUMNOINCIDENCIAMEDIDA
ADD CONSTRAINT  U_TW_ALUMNOINCIDENCIAMEDIDA UNIQUE (N_IDALUMNOINCIDENCIA,N_IDNIVELMEDIDA);



CREATE TABLE TW_ALUMNOLIBROS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012084 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER NULL ,
	N_IDPLANDEESTUDIOSASIGNATURA NUMBER CONSTRAINT SYS_C0012085 NOT NULL ,
	N_IDLIBROS           NUMBER(10) NULL ,
	N_ESTATUS            NUMBER NULL ,
	D_FECHAESTATUS       DATE NULL ,
	S_REPONSABLE         VARCHAR2(120 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOLIBROS
	 FOR TW_ALUMNOLIBROS;




CREATE SYNONYM TW_ALUMNOLIBROS
	 FOR TW_ALUMNOLIBROS;



CREATE UNIQUE INDEX TW_ALUMNOLIBROS_PK ON TW_ALUMNOLIBROS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOLIBROS
	ADD CONSTRAINT  TW_ALUMNOLIBROS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOLIBROS_CK ON TW_ALUMNOLIBROS
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDPLANDEESTUDIOSASIGNATURA   ASC,N_IDLIBROS   ASC);



CREATE TABLE TW_ALUMNOMOVIMIENTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012086 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012087 NOT NULL ,
	N_IDMOVIMIENTOALUMNO NUMBER CONSTRAINT SYS_C0012088 NOT NULL ,
	D_MOVIMIENTO         TIMESTAMP(6) NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0012089 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012090 NOT NULL ,
	N_IDESTATUSALUMNO    NUMBER CONSTRAINT SYS_C0012091 NOT NULL ,
	N_IDALUMNOCE_HIST    NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOMOVIMIENTOS
	 FOR TW_ALUMNOMOVIMIENTOS;




CREATE SYNONYM TW_ALUMNOMOVIMIENTOS
	 FOR TW_ALUMNOMOVIMIENTOS;



CREATE UNIQUE INDEX TW_ALUMNOMOVIMIENTOS_PK ON TW_ALUMNOMOVIMIENTOS
(N_ID   ASC);



ALTER TABLE TW_ALUMNOMOVIMIENTOS
	ADD CONSTRAINT  TW_ALUMNOMOVIMIENTOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ALUMNOMOVIMIENTOS_INDEX1 ON TW_ALUMNOMOVIMIENTOS
(N_IDALUMNO   ASC,N_IDESTATUSALUMNO   ASC);



CREATE TABLE TW_ALUMNOOBSERVACIONES
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012092 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012093 NOT NULL ,
	N_IDTIPOASIGNATURAPERIODOS NUMBER CONSTRAINT SYS_C0012094 NOT NULL ,
	S_CALIFICACION       VARCHAR2(5 BYTE) NULL ,
	N_INASISTENCIAS      NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(3000 BYTE) NULL ,
	N_IDINDICADORPROMOVIDO NUMBER NULL ,
	N_PERIODORIESGO      NUMBER DEFAULT  0  NULL ,
	N_ORIGENFALTAS       NUMBER DEFAULT  1  NULL ,
	N_REPROBADAS         NUMBER DEFAULT  0  NULL ,
	S_CALIFICACIONEQUIVALENTE VARCHAR2(5 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOOBSERVACIONES
	 FOR TW_ALUMNOOBSERVACIONES;




CREATE SYNONYM TW_ALUMNOOBSERVACIONES
	 FOR TW_ALUMNOOBSERVACIONES;



CREATE UNIQUE INDEX TW_ALUMNOOBSERVACIONES_PK ON TW_ALUMNOOBSERVACIONES
(N_ID   ASC);



ALTER TABLE TW_ALUMNOOBSERVACIONES
	ADD CONSTRAINT  TW_ALUMNOOBSERVACIONES_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOOBSERVACIONES_CK ON TW_ALUMNOOBSERVACIONES
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDTIPOASIGNATURAPERIODOS   ASC);



CREATE TABLE TW_ALUMNOPERIODOPROMEDIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012095 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012096 NOT NULL ,
	N_IDTIPOASIGNATURAPERIODOS NUMBER CONSTRAINT SYS_C0012097 NOT NULL ,
	N_CALIFICACIONPROMEDIO NUMBER(4,2) NULL ,
	N_INASISTENCIAS      NUMBER NULL ,
	N_IDINDICADORPROMOVIDO NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOPERIODOPROMEDIO
	 FOR TW_ALUMNOPERIODOPROMEDIO;




CREATE SYNONYM TW_ALUMNOPERIODOPROMEDIO
	 FOR TW_ALUMNOPERIODOPROMEDIO;



CREATE UNIQUE INDEX TW_ALUMNOPERIODOPROMEDIO_PK ON TW_ALUMNOPERIODOPROMEDIO
(N_ID   ASC);



ALTER TABLE TW_ALUMNOPERIODOPROMEDIO
	ADD CONSTRAINT  TW_ALUMNOPERIODOPROMEDIO_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOPERIODOPROMEDIO_CK ON TW_ALUMNOPERIODOPROMEDIO
(N_IDALUMNOCICLOESCOLAR   ASC,N_IDTIPOASIGNATURAPERIODOS   ASC);



CREATE TABLE TW_ALUMNOPROMEDIOSNIVEL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012345 NOT NULL ,
	N_IDALUMNO           NUMBER(10) CONSTRAINT SYS_C0025173 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER(10) CONSTRAINT SYS_C0025174 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER(10) CONSTRAINT SYS_C0025175 NOT NULL ,
	N_PROMEDIO           NUMBER(4,1) CONSTRAINT SYS_C0025176 NOT NULL ,
	N_ORIGEN             NUMBER(1) NULL ,
	N_IDTC_MOTIVOPROMEDIOSHIS NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOPROMEDIOSNIVEL
	 FOR TW_ALUMNOPROMEDIOSNIVEL;




CREATE SYNONYM TW_ALUMNOPROMEDIOSNIVEL
	 FOR TW_ALUMNOPROMEDIOSNIVEL;



CREATE UNIQUE INDEX TW_ALUMNOPROMEDIOSNVL_PK ON TW_ALUMNOPROMEDIOSNIVEL
(N_ID   ASC);



ALTER TABLE TW_ALUMNOPROMEDIOSNIVEL
	ADD CONSTRAINT  TW_ALUMNOPROMEDIOSNVL_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ALUMNOPROMEDIOSNIVEL_UK1 ON TW_ALUMNOPROMEDIOSNIVEL
(N_IDALUMNO   ASC,N_IDNIVELEDUCATIVO   ASC,N_IDGRADOESCOLAR   ASC);



ALTER TABLE TW_ALUMNOPROMEDIOSNIVEL
ADD CONSTRAINT  TW_ALUMNOPROMEDIOSNIVEL_UK1 UNIQUE (N_IDALUMNO,N_IDNIVELEDUCATIVO,N_IDGRADOESCOLAR);



CREATE  INDEX TW_ALUMNOPROMEDIOSNIVEL_PK ON TW_ALUMNOPROMEDIOSNIVEL
(N_ID   ASC,N_IDALUMNO   ASC,N_IDNIVELEDUCATIVO   ASC,N_IDGRADOESCOLAR   ASC);



CREATE TABLE TW_ALUMNOPROYECTOS
(
	N_IDALUMNOCOMPLEMENTO NUMBER CONSTRAINT SYS_C0012098 NOT NULL ,
	N_IDPROYECTOS        NUMBER CONSTRAINT SYS_C0012099 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOPROYECTOS
	 FOR TW_ALUMNOPROYECTOS;




CREATE SYNONYM TW_ALUMNOPROYECTOS
	 FOR TW_ALUMNOPROYECTOS;



CREATE TABLE TW_ALUMNORECOMENDACIONES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012357 NOT NULL ,
	D_ALTA               DATE NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER(10) NULL ,
	N_IDALUMNOCONTACTOS  NUMBER(10) NULL ,
	N_IDMOTIVOREC        NUMBER(10) CONSTRAINT SYS_C0012358 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	N_IDRECOMENDACIONTIPO NUMBER(10) CONSTRAINT SYS_C0012359 NOT NULL ,
	N_IDUSUARIO          NUMBER(10) NULL ,
	N_IDTIPOASIGNATURAPERIODOS NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNORECOMENDACIONES
	 FOR TW_ALUMNORECOMENDACIONES;




CREATE SYNONYM TW_ALUMNORECOMENDACIONES
	 FOR TW_ALUMNORECOMENDACIONES;



CREATE UNIQUE INDEX PK_ALREC ON TW_ALUMNORECOMENDACIONES
(N_ID   ASC);



ALTER TABLE TW_ALUMNORECOMENDACIONES
	ADD CONSTRAINT  PK_ALREC PRIMARY KEY (N_ID);



CREATE TABLE TW_ALUMNOSOPCIONESESCUELAS
(
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012100 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012101 NOT NULL ,
	N_NUMEROOPCION       NUMBER CONSTRAINT SYS_C0012102 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012103 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012104 NOT NULL ,
	N_HERMANOSENESCUELA  NUMBER NULL ,
	N_HERMANOSPROCESO    NUMBER NULL ,
	N_IDHERMANO          NUMBER NULL ,
	N_IDHERMANOPROCESO   NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_ALUMNOSOPCIONESESCUELAS
	 FOR TW_ALUMNOSOPCIONESESCUELAS;




CREATE SYNONYM TW_ALUMNOSOPCIONESESCUELAS
	 FOR TW_ALUMNOSOPCIONESESCUELAS;



CREATE UNIQUE INDEX TW_ALUMNOSOPCIONESESCUELA_PK ON TW_ALUMNOSOPCIONESESCUELAS
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC,N_IDALUMNO   ASC,N_NUMEROOPCION   ASC);



ALTER TABLE TW_ALUMNOSOPCIONESESCUELAS
	ADD CONSTRAINT  TW_ALUMNOSOPCIONESESCUELA_PK PRIMARY KEY (N_IDCICLOESCOLAR,N_IDESCUELA,N_IDALUMNO,N_NUMEROOPCION);



CREATE TABLE TW_ASIGNATURALIBROS
(
	N_IDLIBROS           NUMBER CONSTRAINT SYS_C0012105 NOT NULL ,
	N_IDPLANDEESTUDIOSASIGNATURA NUMBER CONSTRAINT SYS_C0012106 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ASIGNATURALIBROS
	 FOR TW_ASIGNATURALIBROS;




CREATE SYNONYM TW_ASIGNATURALIBROS
	 FOR TW_ASIGNATURALIBROS;



CREATE UNIQUE INDEX TW_ASIGNATURALIBROS_PK ON TW_ASIGNATURALIBROS
(N_IDPLANDEESTUDIOSASIGNATURA   ASC,N_IDLIBROS   ASC);



ALTER TABLE TW_ASIGNATURALIBROS
	ADD CONSTRAINT  TW_ASIGNATURALIBROS_PK PRIMARY KEY (N_IDPLANDEESTUDIOSASIGNATURA,N_IDLIBROS);



CREATE TABLE TW_BITACORA
(
	N_ID                 NUMBER NOT NULL ,
	N_IDUSER             NUMBER CONSTRAINT SYS_C0012112 NOT NULL ,
	N_IDPROCESO          NUMBER NULL ,
	D_FECHA              TIMESTAMP(6) NULL ,
	N_IDPERSONALPLAZA    NUMBER NULL ,
	N_IDESCUELA          NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_BITACORA
	 FOR TW_BITACORA;




CREATE SYNONYM TW_BITACORA
	 FOR TW_BITACORA;



CREATE UNIQUE INDEX TW_BITACORA_PK ON TW_BITACORA
(N_ID   ASC);



ALTER TABLE TW_BITACORA
	ADD CONSTRAINT  TW_BITACORA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_BITACORA_CK ON TW_BITACORA
(D_FECHA   ASC,N_IDESCUELA   ASC,N_IDUSER   ASC);



CREATE TABLE TW_CARRERAMAGISTERIAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012115 NOT NULL ,
	S_CLAVEUNICA         VARCHAR2(20 BYTE) NULL ,
	S_FOLIOCIPE          VARCHAR2(20 BYTE) NULL ,
	D_FECHAINGRESO       DATE NULL ,
	D_FECHAINICIO        DATE NULL ,
	D_FECHATERMINO       DATE NULL ,
	N_VERTIENTE          NUMBER NULL ,
	S_NIVEL              NUMBER NULL ,
	N_IDPLAZAASIGNADA    NUMBER CONSTRAINT SYS_C0012116 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_CARRERAMAGISTERIAL
	 FOR TW_CARRERAMAGISTERIAL;




CREATE SYNONYM TW_CARRERAMAGISTERIAL
	 FOR TW_CARRERAMAGISTERIAL;



CREATE UNIQUE INDEX PK350 ON TW_CARRERAMAGISTERIAL
(N_ID   ASC);



ALTER TABLE TW_CARRERAMAGISTERIAL
	ADD CONSTRAINT  TW_CARRERAMAGISTERIAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_COMUNICADODOCUMENTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012117 NOT NULL ,
	S_DESCRIPCIONCOMUNICADO VARCHAR2(4000 BYTE) NULL ,
	S_IMAGEN             VARCHAR2(100 BYTE) NULL ,
	D_FECHAREGISTRO      DATE NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0012118 NOT NULL ,
	N_IDCOMUNICADOS      NUMBER CONSTRAINT SYS_C0012119 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_COMUNICADODOCUMENTOS
	 FOR TW_COMUNICADODOCUMENTOS;




CREATE SYNONYM TW_COMUNICADODOCUMENTOS
	 FOR TW_COMUNICADODOCUMENTOS;



CREATE UNIQUE INDEX PK5151 ON TW_COMUNICADODOCUMENTOS
(N_ID   ASC);



ALTER TABLE TW_COMUNICADODOCUMENTOS
	ADD CONSTRAINT  TW_COMUNICADODOCUMENTOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_COMUNICADOSDESTINATARIOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012124 NOT NULL ,
	N_IDCOMUNICADOS      NUMBER CONSTRAINT SYS_C0012125 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012126 NOT NULL ,
	N_IDESTAUS           NUMBER CONSTRAINT SYS_C0012127 NOT NULL ,
	N_CONFIRMA           NUMBER NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	D_ENVIADO            DATE NULL ,
	D_ESTATUS            DATE NULL ,
	D_LEIDO              DATE NULL 
);



CREATE PUBLIC SYNONYM TW_COMUNICADOSDESTINATARIOS
	 FOR TW_COMUNICADOSDESTINATARIOS;




CREATE SYNONYM TW_COMUNICADOSDESTINATARIOS
	 FOR TW_COMUNICADOSDESTINATARIOS;



CREATE UNIQUE INDEX TW_COMUNICADOSDESTINATARIOS_PK ON TW_COMUNICADOSDESTINATARIOS
(N_ID   ASC);



ALTER TABLE TW_COMUNICADOSDESTINATARIOS
	ADD CONSTRAINT  TW_COMUNICADOSDESTINATARIOS_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_COMUNICADOSDESTINATARI_UK1 ON TW_COMUNICADOSDESTINATARIOS
(N_IDCOMUNICADOS   ASC,N_IDESCUELA   ASC);



ALTER TABLE TW_COMUNICADOSDESTINATARIOS
ADD CONSTRAINT  TW_COMUNICADOSDESTINATARI_UK1 UNIQUE (N_IDCOMUNICADOS,N_IDESCUELA);



CREATE TABLE TW_CONTACTODOMICILIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012139 NOT NULL ,
	S_CALLE              VARCHAR2(60 BYTE) NULL ,
	S_NUMEROEXTERIOR     VARCHAR2(20 BYTE) NULL ,
	S_NUMEROINTERIOR     VARCHAR2(20 BYTE) NULL ,
	N_IDCODIGOPOSTAL     NUMBER CONSTRAINT SYS_C0012140 NOT NULL ,
	N_IDENTIDADFEDERATIVA NUMBER CONSTRAINT SYS_C0012141 NOT NULL ,
	N_IDMUNICIPIO        NUMBER CONSTRAINT SYS_C0012142 NOT NULL ,
	N_IDCIUDAD           NUMBER CONSTRAINT SYS_C0012143 NOT NULL ,
	N_IDCOLONIA          NUMBER CONSTRAINT SYS_C0012144 NOT NULL ,
	S_OTRACOLONIA        VARCHAR2(60 BYTE) NULL ,
	N_IDCONTACTO         NUMBER CONSTRAINT SYS_C0012145 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_CONTACTODOMICILIO
	 FOR TW_CONTACTODOMICILIO;




CREATE SYNONYM TW_CONTACTODOMICILIO
	 FOR TW_CONTACTODOMICILIO;



CREATE UNIQUE INDEX TW_CONTACTODOMICILIO_PK ON TW_CONTACTODOMICILIO
(N_ID   ASC);



ALTER TABLE TW_CONTACTODOMICILIO
	ADD CONSTRAINT  TW_CONTACTODOMICILIO_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_CONTACTODOMICILIO_UK ON TW_CONTACTODOMICILIO
(N_IDCONTACTO   ASC);



CREATE TABLE TW_CORRIGEEVALUACIONES
(
	N_ID                 NUMBER(10) NOT NULL ,
	D_FECHASOL           TIMESTAMP(0) NULL ,
	D_FECHAAUT           TIMESTAMP(0) NULL ,
	D_FECHAVENC          TIMESTAMP(0) NULL ,
	N_IDESCUELAINCIDENCIAPERS NUMBER NULL ,
	N_IDTIPOASIGNATURAPERIODOS NUMBER CONSTRAINT SYS_C0012150 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012151 NOT NULL ,
	N_DIASCAPTURA        NUMBER(10) NULL ,
	N_ESTATUS            NUMBER(10) NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_CORRIGEEVALUACIONES
	 FOR TW_CORRIGEEVALUACIONES;




CREATE SYNONYM TW_CORRIGEEVALUACIONES
	 FOR TW_CORRIGEEVALUACIONES;



CREATE UNIQUE INDEX TW_CORRIGEEVALUACIONES_PK ON TW_CORRIGEEVALUACIONES
(N_ID   ASC);



ALTER TABLE TW_CORRIGEEVALUACIONES
	ADD CONSTRAINT  TW_CORRIGEEVALUACIONES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_CORRIGEEVALUACIONES_CK ON TW_CORRIGEEVALUACIONES
(N_ESTATUS   ASC);



CREATE TABLE TW_DATOSESTADISTICOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012152 NOT NULL ,
	S_PREGUNTA           VARCHAR2(250 BYTE) NULL ,
	S_OPCIONES           VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	N_IDTIPODATO         NUMBER CONSTRAINT SYS_C0012153 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0012154 NOT NULL ,
	N_IDTIPORESPUESTA    NUMBER CONSTRAINT SYS_C0012155 NOT NULL ,
	N_OBLIGATORIO        NUMBER CONSTRAINT SYS_C0012156 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_DATOSESTADISTICOS
	 FOR TW_DATOSESTADISTICOS;




CREATE SYNONYM TW_DATOSESTADISTICOS
	 FOR TW_DATOSESTADISTICOS;



CREATE UNIQUE INDEX TW_DATOSESTADISTICOS_PK ON TW_DATOSESTADISTICOS
(N_ID   ASC);



ALTER TABLE TW_DATOSESTADISTICOS
	ADD CONSTRAINT  TW_DATOSESTADISTICOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_DATOSESTADISTICOS_CK ON TW_DATOSESTADISTICOS
(N_IDNIVELEDUCATIVO   ASC,N_IDTIPODATO   ASC);



CREATE TABLE TW_DATOSREPORTESESPECIALES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012157 NOT NULL ,
	S_VALOR              VARCHAR2(255 BYTE) NULL ,
	N_IDTWREPORTESESPECIALES NUMBER(10) CONSTRAINT SYS_C0012158 NOT NULL ,
	N_IDDATOSREPORTE     NUMBER CONSTRAINT SYS_C0012159 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_DATOSREPORTESESPECIALES
	 FOR TW_DATOSREPORTESESPECIALES;




CREATE SYNONYM TW_DATOSREPORTESESPECIALES
	 FOR TW_DATOSREPORTESESPECIALES;



CREATE UNIQUE INDEX PK1 ON TW_DATOSREPORTESESPECIALES
(N_ID   ASC);



ALTER TABLE TW_DATOSREPORTESESPECIALES
	ADD CONSTRAINT  TW_DATOSREPORTESESPECIALES_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_DOMICILIOPERSONAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012166 NOT NULL ,
	N_IDCIUDAD           NUMBER(10) DEFAULT  1  NULL ,
	S_CALLE              VARCHAR2(60 BYTE) NULL ,
	S_NUMEROEXTERIOR     VARCHAR2(40 BYTE) NULL ,
	S_NUMEROINTERIOR     VARCHAR2(40 BYTE) NULL ,
	N_IDCODIGOPOSTAL     NUMBER CONSTRAINT SYS_C0012167 NOT NULL ,
	N_IDENTIDADFEDERATIVA NUMBER CONSTRAINT SYS_C0012168 NOT NULL ,
	N_IDMUNICIPIODELEGACION NUMBER CONSTRAINT SYS_C0012169 NOT NULL ,
	N_IDLOCALIDADCOLONIA NUMBER CONSTRAINT SYS_C0012170 NOT NULL ,
	S_OTRACOLONIA        VARCHAR2(60 BYTE) NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0012171 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_DOMICILIOPERSONAL
	 FOR TW_DOMICILIOPERSONAL;




CREATE SYNONYM TW_DOMICILIOPERSONAL
	 FOR TW_DOMICILIOPERSONAL;



CREATE UNIQUE INDEX TW_DOMICILIOPERSONAL_PK ON TW_DOMICILIOPERSONAL
(N_ID   ASC);



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD CONSTRAINT  TW_DOMICILIOPERSONAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ENVIONOMINA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012176 NOT NULL ,
	S_QNAINICIO          TIMESTAMP(6) NULL ,
	N_NUMEROREGISTROS    NUMBER NULL ,
	N_NUMEROREGISTROSOK  NUMBER NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012177 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ENVIONOMINA
	 FOR TW_ENVIONOMINA;




CREATE SYNONYM TW_ENVIONOMINA
	 FOR TW_ENVIONOMINA;



CREATE UNIQUE INDEX PK333 ON TW_ENVIONOMINA
(N_ID   ASC);



ALTER TABLE TW_ENVIONOMINA
	ADD CONSTRAINT  TW_ENVIONOMINA_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ESCUELACIFRASCONTROL
(
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012178 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012179 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER CONSTRAINT SYS_C0012180 NOT NULL ,
	N_CAPACIDADESCUELA   NUMBER NULL ,
	N_ASIGNADOSESCUELA   NUMBER NULL ,
	N_DEMANDAESCUELA     NUMBER NULL ,
	N_PREINSCRIPCIONPORINTERNET NUMBER NULL ,
	N_PREINSCRIPCIONESESCUELA NUMBER NULL ,
	N_INSCRIPCIONESESCUELA NUMBER NULL ,
	N_BAJASESCUELA       NUMBER NULL ,
	N_EXTEMPORANEASESCUELA NUMBER NULL ,
	N_SALIDACAMBIOESCUELA NUMBER NULL ,
	N_ENTRADACAMBIOESCUELA NUMBER NULL ,
	N_ID                 NUMBER NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELACIFRASCONTROL
	 FOR TW_ESCUELACIFRASCONTROL;




CREATE SYNONYM TW_ESCUELACIFRASCONTROL
	 FOR TW_ESCUELACIFRASCONTROL;



CREATE UNIQUE INDEX TW_ESCUELACIFRASCONTROL_PK ON TW_ESCUELACIFRASCONTROL
(N_ID   ASC);



ALTER TABLE TW_ESCUELACIFRASCONTROL
	ADD CONSTRAINT  TW_ESCUELACIFRASCONTROL_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ESCUELACIFRASCONTROL_CK ON TW_ESCUELACIFRASCONTROL
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC,N_IDGRADOESCOLAR   ASC);



CREATE TABLE TW_ESCUELAINCIDENCIA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012181 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012182 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012183 NOT NULL ,
	N_ESTATUSINCIDENCIA  NUMBER CONSTRAINT SYS_C0012184 NOT NULL ,
	S_TITULO             VARCHAR2(100 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(515 BYTE) NULL ,
	N_INCIDENCIADENTRO   NUMBER(1) NULL ,
	D_ALTA               DATE NULL ,
	D_OPERACION          DATE DEFAULT  SYSDATE  NULL ,
	S_USUARIOALTA        VARCHAR2(50 BYTE) NULL ,
	S_USUARIOOPERACION   VARCHAR2(50 BYTE) NULL ,
	N_IDINCIDENCIAGRAVEDAD NUMBER CONSTRAINT SYS_C0012185 NOT NULL ,
	D_INICIOCIERREESCUELA DATE NULL ,
	D_FINCIERREESCEULA   DATE NULL ,
	N_INDICADORCIERRE    NUMBER(1) NULL ,
	N_INDICADORAFECTADOS NUMBER(1) NULL ,
	N_SALONESAFECTADOS   NUMBER NULL ,
	N_ALUMNOSAFECTADOS   NUMBER NULL ,
	S_FOLIO              VARCHAR2(20 BYTE) NULL ,
	S_QUIENREPORTA       VARCHAR2(100 BYTE) NULL ,
	S_QUIENATIENDE       VARCHAR2(100 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELAINCIDENCIA
	 FOR TW_ESCUELAINCIDENCIA;




CREATE SYNONYM TW_ESCUELAINCIDENCIA
	 FOR TW_ESCUELAINCIDENCIA;



CREATE UNIQUE INDEX TW_ESCUELAINCIDENCIA_PK ON TW_ESCUELAINCIDENCIA
(N_ID   ASC);



ALTER TABLE TW_ESCUELAINCIDENCIA
	ADD CONSTRAINT  TW_ESCUELAINCIDENCIA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ESCUELAINCIDENCIA_CK ON TW_ESCUELAINCIDENCIA
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC);



CREATE TABLE TW_ESCUELAINCIDENCIABITACORA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012186 NOT NULL ,
	N_IDESCUELAINCIDENCIA NUMBER CONSTRAINT SYS_C0012187 NOT NULL ,
	D_ALTA               DATE NULL ,
	S_USUARIOALTA        VARCHAR2(50 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(515 BYTE) NULL ,
	N_IDBITACORA         NUMBER NULL ,
	D_LECTURA            DATE NULL ,
	S_USUARIOLECTURA     CHAR(50 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELAINCIDENCIABITACORA
	 FOR TW_ESCUELAINCIDENCIABITACORA;




CREATE SYNONYM TW_ESCUELAINCIDENCIABITACORA
	 FOR TW_ESCUELAINCIDENCIABITACORA;



CREATE UNIQUE INDEX PK1829 ON TW_ESCUELAINCIDENCIABITACORA
(N_ID   ASC);



ALTER TABLE TW_ESCUELAINCIDENCIABITACORA
	ADD CONSTRAINT  TW_ESCUELAINCIDENCIABIT_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_ESCUELAINCIDENCIADOCTOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012188 NOT NULL ,
	N_IDESCUELAINCIDENCIA NUMBER CONSTRAINT SYS_C0012189 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	S_IMAGEN             VARCHAR2(250 BYTE) NULL ,
	D_REGISTRO           DATE DEFAULT  SYSDATE  NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELAINCIDENCIADOCTOS
	 FOR TW_ESCUELAINCIDENCIADOCTOS;




CREATE SYNONYM TW_ESCUELAINCIDENCIADOCTOS
	 FOR TW_ESCUELAINCIDENCIADOCTOS;



ALTER TABLE TW_ESCUELAINCIDENCIADOCTOS
	ADD CONSTRAINT  TW_ESCUELAINCIDENCIADOCTOS_PK PRIMARY KEY (N_ID,N_IDESCUELAINCIDENCIA);



CREATE TABLE TW_ESCUELAINCIDENCIAEVENTO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012190 NOT NULL ,
	N_IDESCUELAINCIDENCIA NUMBER CONSTRAINT SYS_C0012191 NOT NULL ,
	N_IDESCUELAEVENTO    NUMBER CONSTRAINT SYS_C0012192 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELAINCIDENCIAEVENTO
	 FOR TW_ESCUELAINCIDENCIAEVENTO;




CREATE SYNONYM TW_ESCUELAINCIDENCIAEVENTO
	 FOR TW_ESCUELAINCIDENCIAEVENTO;



CREATE UNIQUE INDEX TW_ESCUELAINCIDENCIAEVENTO_PK ON TW_ESCUELAINCIDENCIAEVENTO
(N_ID   ASC);



ALTER TABLE TW_ESCUELAINCIDENCIAEVENTO
	ADD CONSTRAINT  TW_ESCUELAINCIDENCIAEVENTO_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ESCUELAINCIDENCIAEVENTO_UCK ON TW_ESCUELAINCIDENCIAEVENTO
(N_IDESCUELAINCIDENCIA   ASC,N_IDESCUELAEVENTO   ASC);



CREATE TABLE TW_ESCUELAINCIDENCIAPER
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012193 NOT NULL ,
	N_IDESCUELAINCIDENCIA NUMBER CONSTRAINT SYS_C0012194 NOT NULL ,
	N_IDINCIDENCIATIPOPERSONA NUMBER CONSTRAINT SYS_C0012195 NOT NULL ,
	N_IDPERSONAL         NUMBER NULL ,
	N_IDALUMNO           NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELAINCIDENCIAPER
	 FOR TW_ESCUELAINCIDENCIAPER;




CREATE SYNONYM TW_ESCUELAINCIDENCIAPER
	 FOR TW_ESCUELAINCIDENCIAPER;



CREATE UNIQUE INDEX PK1981 ON TW_ESCUELAINCIDENCIAPER
(N_ID   ASC);



ALTER TABLE TW_ESCUELAINCIDENCIAPER
	ADD CONSTRAINT  TW_ESCUELAINCIDENCIAPER_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ESCUELAINCIDENCIAPER_CK ON TW_ESCUELAINCIDENCIAPER
(N_IDESCUELAINCIDENCIA   ASC,N_IDINCIDENCIATIPOPERSONA   ASC);



CREATE TABLE TW_ESCUELAINSIDENCIAAPOYOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012196 NOT NULL ,
	N_IDESCUELAINCIDENCIA NUMBER CONSTRAINT SYS_C0012197 NOT NULL ,
	N_IDAPOYOSEXTERNOS   NUMBER CONSTRAINT SYS_C0012198 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELAINSIDENCIAAPOYOS
	 FOR TW_ESCUELAINSIDENCIAAPOYOS;




CREATE SYNONYM TW_ESCUELAINSIDENCIAAPOYOS
	 FOR TW_ESCUELAINSIDENCIAAPOYOS;



CREATE UNIQUE INDEX TW_ESCUELAINSIDENCIAAPOYOS_PK ON TW_ESCUELAINSIDENCIAAPOYOS
(N_ID   ASC);



ALTER TABLE TW_ESCUELAINSIDENCIAAPOYOS
	ADD CONSTRAINT  TW_ESCUELAINSIDENCIAAPOYOS_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ESCUELAINSIDENCIAAPOYOS_CK ON TW_ESCUELAINSIDENCIAAPOYOS
(N_IDESCUELAINCIDENCIA   ASC,N_IDAPOYOSEXTERNOS   ASC);



CREATE TABLE TW_ESCUELALIBROS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012199 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012200 NOT NULL ,
	N_IDLIBROS           NUMBER(10) CONSTRAINT SYS_C0012201 NOT NULL ,
	N_TOTALLIBROS        NUMBER(10) NULL ,
	N_TOTALENTRADAS      NUMBER(10) NULL ,
	N_TOTALSALIDAS       NUMBER(10) NULL ,
	N_ESTATUS            NUMBER NULL ,
	D_FECHAESTATUS       DATE NULL ,
	S_REPONSABLE         VARCHAR2(120 BYTE) NULL ,
	N_ASIGNADOS          NUMBER NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012202 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELALIBROS
	 FOR TW_ESCUELALIBROS;




CREATE SYNONYM TW_ESCUELALIBROS
	 FOR TW_ESCUELALIBROS;



CREATE UNIQUE INDEX TW_ESCUELALIBROS_PK ON TW_ESCUELALIBROS
(N_ID   ASC);



ALTER TABLE TW_ESCUELALIBROS
	ADD CONSTRAINT  TW_ESCUELALIBROS_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_ESCUELALIBROS_CK ON TW_ESCUELALIBROS
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC,N_IDLIBROS   ASC);



CREATE TABLE TW_ESCUELALIBROSMOVS
(
	N_IDESCUELALIBROS    NUMBER CONSTRAINT SYS_C0012203 NOT NULL ,
	D_FECHAMOVIMIENTO    DATE NULL ,
	N_TIPOMOVIMIENTO     NUMBER NULL ,
	N_CANTIDAD           NUMBER(10) NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	N_ESTATUS            NUMBER NULL ,
	D_FECHAESTATUS       DATE NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012204 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_ESCUELALIBROSMOVS
	 FOR TW_ESCUELALIBROSMOVS;




CREATE SYNONYM TW_ESCUELALIBROSMOVS
	 FOR TW_ESCUELALIBROSMOVS;



CREATE UNIQUE INDEX TW_ESCUELALIBROSMOVS_PK ON TW_ESCUELALIBROSMOVS
(N_ID   ASC);



ALTER TABLE TW_ESCUELALIBROSMOVS
	ADD CONSTRAINT  TW_ESCUELALIBROSMOVS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_ESCUELALIBROSMOVS_CK ON TW_ESCUELALIBROSMOVS
(N_IDESCUELALIBROS   ASC,D_FECHAMOVIMIENTO   ASC);



CREATE TABLE TW_FLUJO_DATOS_COMPLEMENT
(
	N_ID                 NUMBER NOT NULL ,
	S_CURP               VARCHAR2(18 BYTE) NULL ,
	S_RFC                VARCHAR2(16 BYTE) NULL ,
	S_PRIMERAPELLIDO     VARCHAR2(60 BYTE) NULL ,
	S_SEGUNDOAPELLIDO    VARCHAR2(60 BYTE) NULL ,
	S_NOMBRE             VARCHAR2(60 BYTE) NULL ,
	N_IDFLUJOBITACORA    NUMBER NULL ,
	S_FOLIO_OFICIO       VARCHAR2(30 BYTE) NULL ,
	S_FOLIO_PRELACION    VARCHAR2(30 BYTE) NULL ,
	D_FECHA_HORA_INCIDENCIA TIMESTAMP(6) NULL ,
	S_CLAVE_CORREO       VARCHAR2(200 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_FLUJO_DATOS_COMPLEMENT
	 FOR TW_FLUJO_DATOS_COMPLEMENT;




CREATE SYNONYM TW_FLUJO_DATOS_COMPLEMENT
	 FOR TW_FLUJO_DATOS_COMPLEMENT;



CREATE UNIQUE INDEX TW_FLUJO_DATOS_COMPLEMENT_PK ON TW_FLUJO_DATOS_COMPLEMENT
(N_ID   ASC);



ALTER TABLE TW_FLUJO_DATOS_COMPLEMENT
	ADD CONSTRAINT  TW_FLUJO_DATOS_COMPLEMENT_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_FLUJOBITACORA
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012440 NOT NULL ,
	N_IDMOVPLAZAPERSONA  NUMBER(10) CONSTRAINT SYS_C0012441 NOT NULL ,
	N_IDFLUJOGESTIONACT  NUMBER(10) CONSTRAINT SYS_C0012442 NOT NULL ,
	N_IDFLUJOGESTIONANT  NUMBER(10) NULL ,
	N_IDUSER             NUMBER(10) NULL ,
	D_ESTATUSSIG         TIMESTAMP(0) NULL ,
	D_ESTATUSANT         TIMESTAMP(0) NULL ,
	N_DIAS               NUMBER(10) NULL ,
	N_IDFLUJOGESTIONDET  NUMBER(10) CONSTRAINT SYS_C0012443 NOT NULL ,
	D_MOVIMIENTO         TIMESTAMP(6) CONSTRAINT SYS_C0012444 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_ACCION             NUMBER NULL ,
	N_IDFLUJO_MOTIVO_RECHAZO NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_FLUJOBITACORA
	 FOR TW_FLUJOBITACORA;




CREATE SYNONYM TW_FLUJOBITACORA
	 FOR TW_FLUJOBITACORA;



CREATE UNIQUE INDEX TW_FLUJOBITACORA_PK1 ON TW_FLUJOBITACORA
(N_ID   ASC);



ALTER TABLE TW_FLUJOBITACORA
	ADD CONSTRAINT  TW_FLUJOBITACORA_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_FLUJOBITACORA_CK ON TW_FLUJOBITACORA
(D_MOVIMIENTO   ASC,N_IDMOVPLAZAPERSONA   ASC);



CREATE TABLE TW_FOLIOSASIGNADOS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012965 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012966 NOT NULL ,
	N_IDTIPOFOLIO        NUMBER(10) CONSTRAINT SYS_C0012967 NOT NULL ,
	N_IDNIVELEDUCATIVO   NUMBER CONSTRAINT SYS_C0012968 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER CONSTRAINT SYS_C0012969 NOT NULL ,
	S_PREFIJOFOLIO       VARCHAR2(20 BYTE) NULL ,
	N_FOLIOINICIO        NUMBER(20) NULL ,
	N_FOLIOFINAL         NUMBER(20) NULL ,
	N_ULTIMOFOLIOASIGNADO NUMBER(20) NULL ,
	N_DIGFOLIO           NUMBER(10) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	D_ASIGNACION         TIMESTAMP(0) NULL ,
	N_ESTATUS            NUMBER(10) NULL ,
	D_ACTUALIZACION      TIMESTAMP(0) NULL ,
	N_IDUSUARIO          NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TW_FOLIOSASIGNADOS
	 FOR TW_FOLIOSASIGNADOS;




CREATE SYNONYM TW_FOLIOSASIGNADOS
	 FOR TW_FOLIOSASIGNADOS;



CREATE UNIQUE INDEX TC_FOLIODSASIGNADOS_PK ON TW_FOLIOSASIGNADOS
(N_ID   ASC);



ALTER TABLE TW_FOLIOSASIGNADOS
	ADD CONSTRAINT  TC_FOLIODSASIGNADOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_FUNCION_GRUPO
(
	N_IDFUNCIONREAL      NUMBER CONSTRAINT SYS_C0012214 NOT NULL ,
	N_GRUPO_ID           NUMBER CONSTRAINT SYS_C0012215 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_FUNCION_GRUPO
	 FOR TW_FUNCION_GRUPO;




CREATE SYNONYM TW_FUNCION_GRUPO
	 FOR TW_FUNCION_GRUPO;



CREATE UNIQUE INDEX TW_FUNCION_GRUPO_PK ON TW_FUNCION_GRUPO
(N_IDFUNCIONREAL   ASC,N_GRUPO_ID   ASC);



ALTER TABLE TW_FUNCION_GRUPO
	ADD CONSTRAINT  TW_FUNCION_GRUPO_PK PRIMARY KEY (N_IDFUNCIONREAL,N_GRUPO_ID);



CREATE UNIQUE INDEX TW_FUNCION_GRUPO_UK ON TW_FUNCION_GRUPO
(N_GRUPO_ID   ASC,N_IDFUNCIONREAL   ASC);



CREATE TABLE TW_GENERAARCHIVOS
(
	D_FECHA              DATE NULL ,
	N_IDPROCESO          NUMBER(10) CONSTRAINT SYS_C0012216 NOT NULL ,
	S_NOMBREARCHIVO      VARCHAR2(300 BYTE) NULL ,
	N_REGISTROS          NUMBER(10) NULL ,
	N_ESTATUS            NUMBER(10) NULL ,
	N_IDUSER             NUMBER(10) CONSTRAINT SYS_C0012217 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012218 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_GENERAARCHIVOS
	 FOR TW_GENERAARCHIVOS;




CREATE SYNONYM TW_GENERAARCHIVOS
	 FOR TW_GENERAARCHIVOS;



CREATE UNIQUE INDEX TW_GENERAARCHIVOS_PK ON TW_GENERAARCHIVOS
(N_ID   ASC);



ALTER TABLE TW_GENERAARCHIVOS
	ADD CONSTRAINT  TW_GENERAARCHIVOS_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_GENERAARCHIVOS_NUK ON TW_GENERAARCHIVOS
(N_IDPROCESO   ASC,D_FECHA   ASC);



CREATE TABLE TW_GROUP_AUTH
(
	N_GROUP_ID           NUMBER CONSTRAINT SYS_C0012219 NOT NULL ,
	N_AUTH_ID            NUMBER CONSTRAINT SYS_C0012220 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_GROUP_AUTH
	 FOR TW_GROUP_AUTH;




CREATE SYNONYM TW_GROUP_AUTH
	 FOR TW_GROUP_AUTH;



CREATE UNIQUE INDEX TW_GROUP_AUTH_PK ON TW_GROUP_AUTH
(N_GROUP_ID   ASC,N_AUTH_ID   ASC);



ALTER TABLE TW_GROUP_AUTH
	ADD CONSTRAINT  TW_GROUP_AUTH_PK PRIMARY KEY (N_GROUP_ID,N_AUTH_ID);



CREATE TABLE TW_HISTORIAACADEMICA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012221 NOT NULL ,
	S_INSTITUCIONEDUCTIVA VARCHAR2(60 BYTE) NULL ,
	S_DESCRIPCIONESTUDIOS VARCHAR2(60 BYTE) NULL ,
	N_GRADUADO           NUMBER NULL ,
	D_FECHAINICIO        TIMESTAMP(6) NULL ,
	D_FECHAFIN           TIMESTAMP(6) NULL ,
	S_UBICACIONDOCUMENTO VARCHAR2(250 BYTE) NULL ,
	S_DESCRIPCIONDOCUMENTO VARCHAR2(250 BYTE) NULL ,
	S_NOCEDULAPROF       VARCHAR2(60 BYTE) NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0012222 NOT NULL ,
	N_IDAREADECONOCIMIENTO NUMBER NULL ,
	N_IDESCUELA          NUMBER NULL ,
	N_IDESCOLARIDAD      NUMBER NULL ,
	N_IDNIVELESTUDIO     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_HISTORIAACADEMICA
	 FOR TW_HISTORIAACADEMICA;




CREATE SYNONYM TW_HISTORIAACADEMICA
	 FOR TW_HISTORIAACADEMICA;



CREATE UNIQUE INDEX TW_HISTORIAACADEMICA_PK ON TW_HISTORIAACADEMICA
(N_ID   ASC);



ALTER TABLE TW_HISTORIAACADEMICA
	ADD CONSTRAINT  TW_HISTORIAACADEMICA_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_IDIOMAS
(
	S_DESCRIPCIONDOCUMENTO VARCHAR2(250 BYTE) NULL ,
	N_IDIDIOMA           NUMBER CONSTRAINT SYS_C0012223 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012224 NOT NULL ,
	N_HABLADO            VARCHAR2(10 BYTE) NULL ,
	N_ESCRITO            VARCHAR2(10 BYTE) NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0012225 NOT NULL ,
	S_UBICACIONDOCUMENTO VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_IDIOMAS
	 FOR TW_IDIOMAS;




CREATE SYNONYM TW_IDIOMAS
	 FOR TW_IDIOMAS;



CREATE UNIQUE INDEX TW_IDIOMAS_PK ON TW_IDIOMAS
(N_ID   ASC);



ALTER TABLE TW_IDIOMAS
	ADD CONSTRAINT  TW_IDIOMAS_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_IDIOMAS_UCK ON TW_IDIOMAS
(N_IDPERSONAL   ASC,N_IDIDIOMA   ASC);



CREATE TABLE TW_INMUEBLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012235 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	D_FUNDACION          DATE NULL ,
	D_ENTREGA            DATE NULL ,
	N_SUPERFICIETERRENO  NUMBER NULL ,
	N_SUPERFICIECONSTRUCCION NUMBER NULL ,
	N_ESPACIOAMPLIADO    NUMBER NULL ,
	N_EDIFICIOSCONSTRUIDOS NUMBER NULL ,
	D_CONSTRUCCION       DATE NULL ,
	N_IDMATERIALCONSTRUCCION NUMBER NULL ,
	N_ADAPTADO           NUMBER NULL ,
	N_ESCALERASEMERGENCIA NUMBER NULL ,
	N_RAMPAS             NUMBER NULL ,
	N_NIVELES            NUMBER NULL ,
	N_ESCALERAS          NUMBER NULL ,
	N_IDPARCELASESCOLARES NUMBER NULL ,
	N_IDORGANISMOSCONSTRUCTORTES NUMBER NULL ,
	N_IDTIPOINMUEBLE     NUMBER NULL ,
	N_IDTIPOTERRENO      NUMBER NULL ,
	N_ESTATUS            NUMBER DEFAULT  1  CONSTRAINT SYS_C0012236 NOT NULL ,
	N_IDPROPIEDADINMUEBLE NUMBER NULL ,
	N_ESTADOSINMUEBLE    NUMBER DEFAULT  4  NULL ,
	N_IDPROPIETARIOSCONSTRUCCION NUMBER NULL ,
	N_IDTIPOCONSTRUCCION NUMBER NULL ,
	N_IDMEDIDAS          NUMBER NULL ,
	N_SUPERFICIELIBRE    NUMBER NULL ,
	D_CREACION           DATE DEFAULT  sysdate  NULL ,
	N_IDINMUEBLEDOMICILIO NUMBER NULL ,
	S_REGFEDINM          VARCHAR2(250 BYTE) NULL ,
	N_IDZONAFED          NUMBER NULL ,
	S_PROPIETARIO        VARCHAR2(250 BYTE) NULL ,
	N_ACREDITACION       NUMBER NULL ,
	N_SUPERFICIEOCUPADA  NUMBER NULL ,
	N_IDOCUPACIONINMUEBLE NUMBER DEFAULT  8  NULL ,
	S_PREDIAL            VARCHAR2(250 BYTE) NULL ,
	S_CFE                VARCHAR2(250 BYTE) NULL ,
	S_SACMEX             VARCHAR2(250 BYTE) NULL ,
	N_INDAABIN           NUMBER NULL ,
	N_CUOTAMANTO         NUMBER NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_IDINMUEBLEUSO      NUMBER NULL ,
	N_IDSITUACION        NUMBER DEFAULT  2  NULL ,
	N_AREARENTABLE       NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_INMUEBLE
	 FOR TW_INMUEBLE;




CREATE SYNONYM TW_INMUEBLE
	 FOR TW_INMUEBLE;



CREATE UNIQUE INDEX TW_INMUEBLE_PK ON TW_INMUEBLE
(N_ID   ASC);



ALTER TABLE TW_INMUEBLE
	ADD CONSTRAINT  TW_INMUEBLE_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_INMUEBLE_IMAGEN
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012244 NOT NULL ,
	N_INMUEBLE_ID        NUMBER CONSTRAINT SYS_C0012245 NOT NULL ,
	S_NOMBRE             VARCHAR2(250 BYTE) NULL ,
	S_RUTA               VARCHAR2(200 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_INMUEBLE_IMAGEN
	 FOR TW_INMUEBLE_IMAGEN;




CREATE SYNONYM TW_INMUEBLE_IMAGEN
	 FOR TW_INMUEBLE_IMAGEN;



CREATE UNIQUE INDEX TW_INMUEBLE_IMAGEN_PK ON TW_INMUEBLE_IMAGEN
(N_ID   ASC);



ALTER TABLE TW_INMUEBLE_IMAGEN
	ADD CONSTRAINT  TW_INMUEBLE_IMAGEN_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_INMUEBLE_LOCAL
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012246 NOT NULL ,
	N_IDINMUEBLE         NUMBER CONSTRAINT SYS_C0012247 NOT NULL ,
	N_ID_TIPOLOCAL       NUMBER CONSTRAINT SYS_C0012248 NOT NULL ,
	N_IDMATERIALCONSTRUCCION NUMBER DEFAULT  0  NULL ,
	N_ID_ESTADOINMUEBLE  NUMBER CONSTRAINT SYS_C0012249 NOT NULL ,
	S_NOMBRE             VARCHAR2(30 BYTE) NULL ,
	N_CAPACIDAD          NUMBER NULL ,
	S_NIVEL              VARCHAR2(20 BYTE) NULL ,
	N_LARGO              NUMBER NULL ,
	N_ANCHO              NUMBER NULL ,
	N_ALTO               NUMBER NULL ,
	N_SUPERFICIETOTAL    NUMBER NULL ,
	S_COMENTARIOS        VARCHAR2(200 BYTE) NULL ,
	N_IDTIPOCONSTRUCCION NUMBER DEFAULT  1  CONSTRAINT SYS_C0012250 NOT NULL ,
	N_IDTIPOSUPERFICIE   NUMBER CONSTRAINT SYS_C0012251 NOT NULL ,
	N_ESTATUS            NUMBER DEFAULT  0  NULL ,
	N_IDCICLOESCOLAR     NUMBER DEFAULT  5  NULL ,
	N_IDORIGEN           NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_INMUEBLE_LOCAL
	 FOR TW_INMUEBLE_LOCAL;




CREATE SYNONYM TW_INMUEBLE_LOCAL
	 FOR TW_INMUEBLE_LOCAL;



CREATE UNIQUE INDEX TC_INMUEBLE_LOCAL_PK ON TW_INMUEBLE_LOCAL
(N_ID   ASC);



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD CONSTRAINT  TC_INMUEBLE_LOCAL_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_INMUEBLEDOMICILIO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012239 NOT NULL ,
	S_CALLE              VARCHAR2(100 BYTE) NULL ,
	S_NUMEROEXTERIOR     VARCHAR2(20 BYTE) NULL ,
	S_NUMEROINTERIOR     VARCHAR2(20 BYTE) NULL ,
	N_IDCODIGOPOSTAL     NUMBER CONSTRAINT SYS_C0012240 NOT NULL ,
	N_IDENTIDADFEDERATIVA NUMBER CONSTRAINT SYS_C0012241 NOT NULL ,
	N_IDMUNICIPIO        NUMBER CONSTRAINT SYS_C0012242 NOT NULL ,
	N_IDCIUDAD           NUMBER DEFAULT  1  NULL ,
	N_IDCOLONIA          NUMBER CONSTRAINT SYS_C0012243 NOT NULL ,
	S_OTRACOLONIA        VARCHAR2(100 BYTE) NULL ,
	S_SECTOR             VARCHAR2(20 BYTE) NULL ,
	N_LONGITUD           NUMBER NULL ,
	N_LATITUD            NUMBER NULL ,
	S_BETWEEN1           VARCHAR2(100 BYTE) NULL ,
	N_SECTOR             NUMBER NULL ,
	N_IDZONAESCOLAR      NUMBER NULL ,
	S_BETWEEN2           VARCHAR2(100 BYTE) NULL ,
	N_IDINMUEBLE         NUMBER NULL ,
	N_IDTIPOVIALIDAD     NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_INMUEBLEDOMICILIO
	 FOR TW_INMUEBLEDOMICILIO;




CREATE SYNONYM TW_INMUEBLEDOMICILIO
	 FOR TW_INMUEBLEDOMICILIO;



CREATE UNIQUE INDEX TW_INMUEBLEDOMICILIO_PK ON TW_INMUEBLEDOMICILIO
(N_ID   ASC);



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD CONSTRAINT  TW_INMUEBLEDOMICILIO_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_INMUEBLESERVICIOS
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012252 NOT NULL ,
	N_IDINMUEBLE         NUMBER CONSTRAINT SYS_C0012253 NOT NULL ,
	N_IDSERVICIO         NUMBER CONSTRAINT SYS_C0012254 NOT NULL ,
	N_IDESTATUSINMUEBLE  NUMBER CONSTRAINT SYS_C0012255 NOT NULL ,
	N_CANTIDAD           NUMBER DEFAULT  0  NULL ,
	N_CAPACIDAD          NUMBER DEFAULT  0  NULL ,
	S_OBSERVACIONES      VARCHAR2(200 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_INMUEBLESERVICIOS
	 FOR TW_INMUEBLESERVICIOS;




CREATE SYNONYM TW_INMUEBLESERVICIOS
	 FOR TW_INMUEBLESERVICIOS;



CREATE UNIQUE INDEX TW_INMUEBLESERVICIOS_PK ON TW_INMUEBLESERVICIOS
(N_ID   ASC);



ALTER TABLE TW_INMUEBLESERVICIOS
	ADD CONSTRAINT  TW_INMUEBLESERVICIOS_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_INMUEBLESERVICIOS_CK ON TW_INMUEBLESERVICIOS
(N_IDINMUEBLE   ASC,N_IDSERVICIO   ASC);



CREATE TABLE TW_MOVPLAZAPERSONAPLAZAS
(
	N_IDMOVPLAZAPERSONA  NUMBER NULL ,
	S_PLAZA              VARCHAR2(27 BYTE) NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	D_FECHA              TIMESTAMP(6) NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012445 NOT NULL ,
	N_IDPLAZA            NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_MOVPLAZAPERSONAPLAZAS
	 FOR TW_MOVPLAZAPERSONAPLAZAS;




CREATE SYNONYM TW_MOVPLAZAPERSONAPLAZAS
	 FOR TW_MOVPLAZAPERSONAPLAZAS;



CREATE UNIQUE INDEX TW_MOVPLAZAPERSONAPLAZAS_PK ON TW_MOVPLAZAPERSONAPLAZAS
(N_ID   ASC);



ALTER TABLE TW_MOVPLAZAPERSONAPLAZAS
	ADD CONSTRAINT  TW_MOVPLAZAPERSONAPLAZAS_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_NOPROMOPLANDEACCION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012263 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012264 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012265 NOT NULL ,
	N_ESTATUSINCIDENCIA  NUMBER CONSTRAINT SYS_C0012266 NOT NULL ,
	S_TITULO             VARCHAR2(100 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	D_ALTA               DATE NULL ,
	D_OPERACION          DATE DEFAULT  SYSDATE  NULL ,
	S_USUARIOALTA        VARCHAR2(50 BYTE) NULL ,
	S_USUARIOOPERACION   VARCHAR2(50 BYTE) NULL ,
	N_IDMOTIVOPLANDEACCION NUMBER CONSTRAINT SYS_C0012267 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012268 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_NOPROMOPLANDEACCION
	 FOR TW_NOPROMOPLANDEACCION;




CREATE SYNONYM TW_NOPROMOPLANDEACCION
	 FOR TW_NOPROMOPLANDEACCION;



CREATE UNIQUE INDEX PK5135 ON TW_NOPROMOPLANDEACCION
(N_ID   ASC);



ALTER TABLE TW_NOPROMOPLANDEACCION
	ADD CONSTRAINT  TW_NOPROMOPLANDEACCION_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PERSONAFALTAS
(
	N_ID                 NUMBER(10) NOT NULL ,
	N_IDPERSONA          NUMBER(10) CONSTRAINT SYS_C0012280 NOT NULL ,
	N_IDPERSONALGRUPO    NUMBER(10) CONSTRAINT SYS_C0012281 NOT NULL ,
	N_IDPERSONAHORARIO   NUMBER(10) NULL ,
	D_FECHA              DATE NULL ,
	N_IDTIPOMOVIMIENTO   NUMBER NULL ,
	N_IDCLASIFICACIONINC NUMBER NULL ,
	T_HORAENTRADA        TIMESTAMP(0) NULL ,
	N_ESTATUS            NUMBER(10) NULL ,
	N_CICLOESCOLAR       NUMBER(10) NULL ,
	N_ESTATUS_NMA        NUMBER(10) NULL ,
	N_ESTATUS_NMB        NUMBER(10) NULL ,
	N_ESTATUS_NMC        NUMBER(10) NULL ,
	N_ESTATUS_A2         NUMBER(10) NULL ,
	N_ESTATUS_A4         NUMBER(10) NULL ,
	N_ESTATUS_S3         NUMBER(10) NULL ,
	N_ESTATUS_S4         NUMBER(10) NULL ,
	N_ESTATUS_S6         NUMBER(10) NULL ,
	N_ESTATUS_S13        NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONAFALTAS
	 FOR TW_PERSONAFALTAS;




CREATE SYNONYM TW_PERSONAFALTAS
	 FOR TW_PERSONAFALTAS;



CREATE UNIQUE INDEX TW_PERSONAFALTAS_PK ON TW_PERSONAFALTAS
(N_ID   ASC);



ALTER TABLE TW_PERSONAFALTAS
	ADD CONSTRAINT  TW_PERSONAFALTAS_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_PERSONAFALTAS_INDEX1 ON TW_PERSONAFALTAS
(N_IDPERSONALGRUPO   ASC,N_IDPERSONAHORARIO   ASC,N_IDTIPOMOVIMIENTO   ASC,D_FECHA   ASC,N_ID   ASC);



CREATE TABLE TW_PERSONAFALTASCOMENT
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012282 NOT NULL ,
	N_IDINASISNOTAS      NUMBER(10) CONSTRAINT SYS_C0012283 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONAFALTASCOMENT
	 FOR TW_PERSONAFALTASCOMENT;




CREATE SYNONYM TW_PERSONAFALTASCOMENT
	 FOR TW_PERSONAFALTASCOMENT;



CREATE TABLE TW_PERSONAFALTASJUSTIFICA
(
	N_ID                 NUMBER(10) NOT NULL ,
	N_IDPERSONAFALTAS    NUMBER(10) CONSTRAINT SYS_C0012284 NOT NULL ,
	D_FECHA              DATE NULL ,
	N_IDMOTIVOFALTA      NUMBER CONSTRAINT SYS_C0012285 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONAFALTASJUSTIFICA
	 FOR TW_PERSONAFALTASJUSTIFICA;




CREATE SYNONYM TW_PERSONAFALTASJUSTIFICA
	 FOR TW_PERSONAFALTASJUSTIFICA;



CREATE UNIQUE INDEX TW_PERSONAFALTASJUSTIFICA_PK ON TW_PERSONAFALTASJUSTIFICA
(N_ID   ASC);



ALTER TABLE TW_PERSONAFALTASJUSTIFICA
	ADD CONSTRAINT  TW_PERSONAFALTASJUSTIFICA_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PERSONALCICLOESCOLAR
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0029854 NOT NULL ,
	N_IDPERSONAL         NUMBER(10) NULL ,
	N_IDCICLOESCOLAR     NUMBER(10) NULL ,
	N_IDESCUELA          NUMBER(10) NULL ,
	N_FALTAS             NUMBER(10) NULL ,
	N_RETARDOSA          NUMBER(10) NULL ,
	N_RETARDOSB          NUMBER(10) NULL ,
	N_NOTAMALA           NUMBER(10) NULL ,
	N_AMONESTACION       NUMBER(10) NULL ,
	N_SUSPENSIONES       NUMBER(10) NULL ,
	N_FALTASJUSTIFICADAS NUMBER(10) NULL ,
	N_RETARDOA_JUSTIF    NUMBER(10) NULL ,
	N_RETARDOB_JUSTIF    NUMBER(10) NULL ,
	N_DESCUENTOSAPLICADOS NUMBER(10) NULL ,
	N_DESCUENTOSPORAPLICAR NUMBER(10) NULL ,
	N_DIASECONOMICOS     CHAR(10 BYTE) NULL ,
	N_IDMOVIMIENTO_ULTIMO NUMBER(10) NULL ,
	D_ULTIMOMOVIMIENTO   TIMESTAMP(6) NULL ,
	N_PLAZAS             NUMBER(10) NULL ,
	N_LICENCIASCONGOCE   NUMBER(10) NULL ,
	N_LICENCIASSINGOCE   NUMBER(10) NULL ,
	N_TIPOCATEGORIA      NUMBER(10) NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONALCICLOESCOLAR
	 FOR TW_PERSONALCICLOESCOLAR;



CREATE UNIQUE INDEX TW_PERCICLO_PK ON TW_PERSONALCICLOESCOLAR
(N_ID   ASC);



ALTER TABLE TW_PERSONALCICLOESCOLAR
	ADD CONSTRAINT  TW_PERCICLO_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PERSONALCORREO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012286 NOT NULL ,
	S_CORREOELECTRONICO  VARCHAR2(60 BYTE) NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0012287 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONALCORREO
	 FOR TW_PERSONALCORREO;




CREATE SYNONYM TW_PERSONALCORREO
	 FOR TW_PERSONALCORREO;



CREATE UNIQUE INDEX TW_PERSONALCORREO_PK ON TW_PERSONALCORREO
(N_ID   ASC);



ALTER TABLE TW_PERSONALCORREO
	ADD CONSTRAINT  TW_PERSONALCORREO_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PERSONALDIALECTO
(
	S_DESCRIPCIONDOCUMENTO VARCHAR2(250 BYTE) NULL ,
	N_IDPERSONALDIALECTO NUMBER CONSTRAINT SYS_C0012288 NOT NULL ,
	N_ID                 NUMBER CONSTRAINT SYS_C0012289 NOT NULL ,
	N_HABLADO            VARCHAR2(10 BYTE) NULL ,
	N_ESCRITO            VARCHAR2(10 BYTE) NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0012290 NOT NULL ,
	S_UBICACIONDOCUMENTO VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONALDIALECTO
	 FOR TW_PERSONALDIALECTO;




CREATE SYNONYM TW_PERSONALDIALECTO
	 FOR TW_PERSONALDIALECTO;



CREATE UNIQUE INDEX PKPERSONALDIALECTO ON TW_PERSONALDIALECTO
(N_ID   ASC);



ALTER TABLE TW_PERSONALDIALECTO
	ADD CONSTRAINT  TW_PERSONALDIALECTO_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PERSONALTELEFONOS
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012298 NOT NULL ,
	S_TELEFONO           VARCHAR2(20 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL ,
	N_IDTIPOTELEFONO     NUMBER CONSTRAINT SYS_C0012299 NOT NULL ,
	N_IDPERSONAL         NUMBER CONSTRAINT SYS_C0012300 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_PERSONALTELEFONOS
	 FOR TW_PERSONALTELEFONOS;




CREATE SYNONYM TW_PERSONALTELEFONOS
	 FOR TW_PERSONALTELEFONOS;



CREATE UNIQUE INDEX TW_PERSONALTELEFONOS_PK ON TW_PERSONALTELEFONOS
(N_ID   ASC);



ALTER TABLE TW_PERSONALTELEFONOS
	ADD CONSTRAINT  TW_PERSONALTELEFONOS_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PLANTILLAAUTORIZADA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012305 NOT NULL ,
	N_IDREGLASPLANTILLA  NUMBER CONSTRAINT SYS_C0012306 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012307 NOT NULL ,
	N_IDESCUELASAULA     NUMBER NULL ,
	N_IDPERSONAPLAZA     NUMBER NULL ,
	D_ALTA               DATE NULL ,
	N_HORAS              NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012308 NOT NULL ,
	N_TIPOREPORTE        NUMBER NULL ,
	N_VACANTE            NUMBER DEFAULT  1  NULL ,
	N_HORASASIGNADAS     NUMBER NULL ,
	N_HORASREALES        NUMBER NULL ,
	N_ORIGENREGISTRO     NUMBER NULL ,
	N_TIPORECURSO        NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_PLANTILLAAUTORIZADA
	 FOR TW_PLANTILLAAUTORIZADA;




CREATE SYNONYM TW_PLANTILLAAUTORIZADA
	 FOR TW_PLANTILLAAUTORIZADA;



CREATE UNIQUE INDEX TW_PLANTILLAAUTORIZADA_PK ON TW_PLANTILLAAUTORIZADA
(N_ID   ASC);



ALTER TABLE TW_PLANTILLAAUTORIZADA
	ADD CONSTRAINT  TW_PLANTILLAAUTORIZADA_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_PLANTILLAAUTORIZADA_CK ON TW_PLANTILLAAUTORIZADA
(N_IDESCUELA   ASC,N_IDCICLOESCOLAR   ASC,N_IDPERSONAPLAZA   ASC);



CREATE TABLE TW_PROMOCONCONDICION
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012315 NOT NULL ,
	D_ALTA               DATE NULL ,
	S_TITULO             VARCHAR2(100 BYTE) NULL ,
	S_OBSERVACIONES      VARCHAR2(500 BYTE) NULL ,
	S_USUARIOALTA        VARCHAR2(50 BYTE) NULL ,
	N_IDMOTIVOPLANDEACCION NUMBER CONSTRAINT SYS_C0012316 NOT NULL ,
	N_IDALUMNOCICLOESCOLAR NUMBER CONSTRAINT SYS_C0012317 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_PROMOCONCONDICION
	 FOR TW_PROMOCONCONDICION;




CREATE SYNONYM TW_PROMOCONCONDICION
	 FOR TW_PROMOCONCONDICION;



CREATE UNIQUE INDEX TW_PROMOCONCONDICION_PK ON TW_PROMOCONCONDICION
(N_ID   ASC);



ALTER TABLE TW_PROMOCONCONDICION
	ADD CONSTRAINT  TW_PROMOCONCONDICION_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_PROMOCONCONDICIONDOC
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012320 NOT NULL ,
	D_ALTA               DATE NULL ,
	S_USUARIOALTA        VARCHAR2(50 BYTE) NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	S_IMAGEN             VARCHAR2(250 BYTE) NULL ,
	N_IDPROMOCONCONDICION NUMBER CONSTRAINT SYS_C0012321 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_PROMOCONCONDICIONDOC
	 FOR TW_PROMOCONCONDICIONDOC;




CREATE SYNONYM TW_PROMOCONCONDICIONDOC
	 FOR TW_PROMOCONCONDICIONDOC;



CREATE UNIQUE INDEX TW_PROMOCONCONDICIONDOC_PK ON TW_PROMOCONCONDICIONDOC
(N_ID   ASC);



CREATE TABLE TW_REPEVA
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0019295 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER(10) NULL ,
	D_EMISION            TIMESTAMP(6) NULL ,
	N_IDESCUELA          NUMBER(10) NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_IDUSUARIO          NUMBER(10) NULL ,
	D_INICIOPROCESO      TIMESTAMP(6) NULL ,
	D_FINPROCESO         TIMESTAMP(6) NULL ,
	N_NUM_CTS            NUMBER(38) NULL ,
	N_NUM_CTS_PROCESADOS NUMBER(10) NULL ,
	N_IDESTATUS          NUMBER(10) CONSTRAINT SYS_C0019296 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_REPEVA
	 FOR TW_REPEVA;




CREATE SYNONYM TW_REPEVA
	 FOR TW_REPEVA;



CREATE UNIQUE INDEX PK_REPEVA ON TW_REPEVA
(N_ID   ASC);



ALTER TABLE TW_REPEVA
	ADD CONSTRAINT  PK_REPEVA PRIMARY KEY (N_ID);



CREATE TABLE TW_REPEVAZONA
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0019300 NOT NULL ,
	N_IDREPEVA           NUMBER(10) CONSTRAINT SYS_C0019301 NOT NULL ,
	D_INICIOPROCESO      TIMESTAMP(6) NULL ,
	D_FINPROCESO         TIMESTAMP(6) NULL ,
	N_NUM_CTS            NUMBER(38) NULL ,
	N_NUM_CTS_PROCESADOS NUMBER(10) NULL ,
	N_IDESTATUS          NUMBER(10) CONSTRAINT SYS_C0019302 NOT NULL ,
	N_IDZONA             NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_REPEVAZONA
	 FOR TW_REPEVAZONA;




CREATE SYNONYM TW_REPEVAZONA
	 FOR TW_REPEVAZONA;



CREATE UNIQUE INDEX PK_REPEVAZONA ON TW_REPEVAZONA
(N_ID   ASC);



ALTER TABLE TW_REPEVAZONA
	ADD CONSTRAINT  PK_REPEVAZONA PRIMARY KEY (N_ID);



CREATE TABLE TW_REPORTESESPECIALES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012322 NOT NULL ,
	N_IDREPORTESESPECIALES NUMBER(10) CONSTRAINT SYS_C0012323 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(60 BYTE) NULL ,
	D_FECHA              DATE NULL ,
	N_IDPERSONAL         NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_REPORTESESPECIALES
	 FOR TW_REPORTESESPECIALES;




CREATE SYNONYM TW_REPORTESESPECIALES
	 FOR TW_REPORTESESPECIALES;



CREATE UNIQUE INDEX TW_REPORTESESPECIALES_PK ON TW_REPORTESESPECIALES
(N_ID   ASC);



ALTER TABLE TW_REPORTESESPECIALES
	ADD CONSTRAINT  TW_REPORTESESPECIALES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_REPORTESESPECIALES_CK ON TW_REPORTESESPECIALES
(N_IDPERSONAL   ASC,N_IDREPORTESESPECIALES   ASC);



CREATE TABLE TW_SEGREPORTES
(
	N_ID                 NUMBER(10) CONSTRAINT SYS_C0012402 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012403 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012404 NOT NULL ,
	N_IDPROCESO          NUMBER CONSTRAINT SYS_C0012405 NOT NULL ,
	D_FECHA              TIMESTAMP(6) NULL ,
	S_OBSERVACIONES      NVARCHAR2(250) NULL ,
	S_REPORTES           NVARCHAR2(250) NULL ,
	N_IDUSUARIO          NUMBER(10) NULL ,
	N_IDEST911           NUMBER NULL ,
	N_ID911MOTIVO        NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_SEGREPORTES
	 FOR TW_SEGREPORTES;




CREATE SYNONYM TW_SEGREPORTES
	 FOR TW_SEGREPORTES;



CREATE UNIQUE INDEX TW_SEGREPORTES_PK ON TW_SEGREPORTES
(N_ID   ASC);



ALTER TABLE TW_SEGREPORTES
	ADD CONSTRAINT  TW_SEGREPORTES_PK PRIMARY KEY (N_ID);



CREATE  INDEX TW_SEGREPORTES_CK ON TW_SEGREPORTES
(N_IDCICLOESCOLAR   ASC,N_IDESCUELA   ASC,N_IDPROCESO   ASC,D_FECHA   ASC);



CREATE TABLE TW_SERVICIODETALLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012324 NOT NULL ,
	N_IDINMUEBLESERVICIO NUMBER NULL ,
	N_IDESTATUSDETALLE   NUMBER NULL ,
	N_CANTIDAD           NUMBER DEFAULT  0  NULL ,
	N_CAPACIDAD          NUMBER DEFAULT  0  NULL ,
	S_OBSERVACIONES      VARCHAR2(200 BYTE) NULL ,
	N_IDDETALLESERVICIO  NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_SERVICIODETALLE
	 FOR TW_SERVICIODETALLE;




CREATE SYNONYM TW_SERVICIODETALLE
	 FOR TW_SERVICIODETALLE;



CREATE UNIQUE INDEX TW_SERVICIODETALLE_PK ON TW_SERVICIODETALLE
(N_ID   ASC);



ALTER TABLE TW_SERVICIODETALLE
	ADD CONSTRAINT  TW_SERVICIODETALLE_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_SOLICITUDPERSONA
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012325 NOT NULL ,
	N_TIPOSOLICITUD      NUMBER NULL ,
	D_FECHASOLICITUD     DATE NULL ,
	D_FECHAINICIO        DATE NULL ,
	D_FECHATERMINO       DATE NULL ,
	N_IDMOVPLAZAPERSONA  NUMBER NULL ,
	N_IDESCUELA          NUMBER NULL ,
	N_IDCICLOESCOLAR     NUMBER NULL ,
	N_IDFUNCIONREAL      NUMBER NULL ,
	S_GRUPOSASIGNADOS    VARCHAR2(100 BYTE) NULL ,
	N_HORASSEMANA        NUMBER(4,1) NULL ,
	N_ESTATUS            NUMBER NULL ,
	D_FECHAATENCION      DATE NULL ,
	N_IDPLAZAASIGNADA    NUMBER NULL 
);



CREATE PUBLIC SYNONYM TW_SOLICITUDPERSONA
	 FOR TW_SOLICITUDPERSONA;




CREATE SYNONYM TW_SOLICITUDPERSONA
	 FOR TW_SOLICITUDPERSONA;



CREATE UNIQUE INDEX TW_SOLICITUDPERSONA_PK ON TW_SOLICITUDPERSONA
(N_ID   ASC);



ALTER TABLE TW_SOLICITUDPERSONA
	ADD CONSTRAINT  TW_SOLICITUDPERSONA_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_TOTALESCALIFICACIONESGRUPO
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012328 NOT NULL ,
	N_IDESUELASAULAS     NUMBER CONSTRAINT SYS_C0012329 NOT NULL ,
	N_IDTIPOASIGNATURA   NUMBER CONSTRAINT SYS_C0012330 NOT NULL ,
	N_TIPOASIGNATURAPERIODOS NUMBER CONSTRAINT SYS_C0012331 NOT NULL ,
	N_ESTATUSTERMINADO   NUMBER NULL ,
	N_MATRICULA          NUMBER NULL ,
	N_CALIFICADOS        NUMBER NULL ,
	N_JUSTIFICADOS       NUMBER NULL ,
	N_FALTA1CALIFICA     NUMBER NULL ,
	N_FALTA2CALIFICA     NUMBER NULL ,
	N_FALTA3CALIFICA     NUMBER NULL ,
	N_FALTA4CALIFICA     NUMBER NULL ,
	N_FALTA5CALIFICA     NUMBER NULL ,
	N_FALTA6CALIFICA     NUMBER NULL ,
	N_FALTA7CALIFICA     NUMBER NULL ,
	N_FALTA8CALIFICA     NUMBER NULL ,
	N_FALTA9CALIFICA     NUMBER NULL ,
	N_FALTA10CALIFICA    NUMBER NULL ,
	D_FECHAMODIFICACION  TIMESTAMP(6) DEFAULT  sysdate-1  NULL 
);



CREATE PUBLIC SYNONYM TW_TOTALESCALIFICACIONESGRUPO
	 FOR TW_TOTALESCALIFICACIONESGRUPO;




CREATE SYNONYM TW_TOTALESCALIFICACIONESGRUPO
	 FOR TW_TOTALESCALIFICACIONESGRUPO;



CREATE UNIQUE INDEX TW_TOTALESCALIFICACIONESG_PK ON TW_TOTALESCALIFICACIONESGRUPO
(N_ID   ASC);



ALTER TABLE TW_TOTALESCALIFICACIONESGRUPO
	ADD CONSTRAINT  TW_TOTALESCALIFICACIONESG_PK PRIMARY KEY (N_ID);



CREATE UNIQUE INDEX TW_TOTALESCALGRUPO_CK ON TW_TOTALESCALIFICACIONESGRUPO
(N_IDESUELASAULAS   ASC,N_IDTIPOASIGNATURA   ASC,N_TIPOASIGNATURAPERIODOS   ASC);



CREATE TABLE TW_USER
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012332 NOT NULL ,
	S_CURP               VARCHAR2(18 BYTE) NULL ,
	S_EMAIL              VARCHAR2(75 BYTE) NULL ,
	S_PASSWD             VARCHAR2(100 BYTE) NULL ,
	N_ESTATUS            NUMBER(1) NULL ,
	N_QUESTION_ID        NUMBER NULL ,
	S_SECRET_ANS         VARCHAR2(200 BYTE) NULL ,
	N_TOKEN              NUMBER NULL ,
	D_CAMBIO             TIMESTAMP(6) DEFAULT  NULL  NULL ,
	N_INTENTOS           NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM TW_USER
	 FOR TW_USER;




CREATE SYNONYM TW_USER
	 FOR TW_USER;



CREATE UNIQUE INDEX TW_USER_PK ON TW_USER
(N_ID   ASC);



ALTER TABLE TW_USER
	ADD CONSTRAINT  TW_USER_PK PRIMARY KEY (N_ID);



CREATE TABLE TW_USER_GROUP
(
	N_USER_ID            NUMBER CONSTRAINT SYS_C0012335 NOT NULL ,
	N_GROUP_ID           NUMBER CONSTRAINT SYS_C0012336 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_USER_GROUP
	 FOR TW_USER_GROUP;




CREATE SYNONYM TW_USER_GROUP
	 FOR TW_USER_GROUP;



CREATE UNIQUE INDEX TW_USER_GROUP_PK ON TW_USER_GROUP
(N_USER_ID   ASC,N_GROUP_ID   ASC);



ALTER TABLE TW_USER_GROUP
	ADD CONSTRAINT  TW_USER_GROUP_PK PRIMARY KEY (N_USER_ID,N_GROUP_ID);



CREATE TABLE TW_USUARIODETALLE
(
	N_ID                 NUMBER CONSTRAINT SYS_C0012337 NOT NULL ,
	S_SEGUNDOAPELLIDO    VARCHAR2(60 BYTE) NULL ,
	S_PRIMERAPELLIDO     VARCHAR2(60 BYTE) NULL ,
	S_NOMBRE             VARCHAR2(60 BYTE) NULL ,
	D_NACIMIENTO         DATE NULL ,
	N_IDSEXO             NUMBER NULL ,
	N_IDESTADONACIMIENTO NUMBER CONSTRAINT SYS_C0012338 NOT NULL ,
	N_IDPARENTESCO       NUMBER CONSTRAINT SYS_C0012339 NOT NULL ,
	N_USER_ID            NUMBER CONSTRAINT SYS_C0012340 NOT NULL ,
	N_IDESCOLARIDAD      NUMBER CONSTRAINT SYS_C0012341 NOT NULL 
);



CREATE PUBLIC SYNONYM TW_USUARIODETALLE
	 FOR TW_USUARIODETALLE;




CREATE SYNONYM TW_USUARIODETALLE
	 FOR TW_USUARIODETALLE;



CREATE UNIQUE INDEX TW_USUARIODETALLE_PK ON TW_USUARIODETALLE
(N_ID   ASC);



ALTER TABLE TW_USUARIODETALLE
	ADD CONSTRAINT  TW_USUARIODETALLE_PK PRIMARY KEY (N_ID);



CREATE TABLE US_ALUMNOINCIDENCIA
(
	N_IDALUMNOINCIDENCIA NUMBER CONSTRAINT SYS_C0012472 NOT NULL ,
	S_FOLIOINCIDENCIA    VARCHAR2(250 BYTE) NULL ,
	DT_INCIDENCIA        TIMESTAMP(6) CONSTRAINT SYS_C0012473 NOT NULL ,
	N_IDINSCRIPCION      NUMBER CONSTRAINT SYS_C0012474 NOT NULL ,
	N_IDESTATUS          NUMBER CONSTRAINT SYS_C0012475 NOT NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0012476 NOT NULL ,
	D_ALTA               DATE CONSTRAINT SYS_C0012477 NOT NULL ,
	D_MOD                DATE CONSTRAINT SYS_C0012478 NOT NULL ,
	N_IDTIPOINCIDENCIA   NUMBER CONSTRAINT SYS_C0012479 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) NULL 
);



CREATE PUBLIC SYNONYM US_ALUMNOINCIDENCIA
	 FOR US_ALUMNOINCIDENCIA;




CREATE SYNONYM US_ALUMNOINCIDENCIA
	 FOR US_ALUMNOINCIDENCIA;



CREATE UNIQUE INDEX SYS_C0013702 ON US_ALUMNOINCIDENCIA
(N_IDALUMNOINCIDENCIA   ASC);



ALTER TABLE US_ALUMNOINCIDENCIA
	ADD CONSTRAINT  SYS_C0013702 PRIMARY KEY (N_IDALUMNOINCIDENCIA);



CREATE TABLE US_ASIGNATURA
(
	N_IDASIGNATURA       NUMBER CONSTRAINT SYS_C0012494 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012495 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) CONSTRAINT SYS_C0012496 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) CONSTRAINT SYS_C0012497 NOT NULL ,
	N_PROMEDIOMINIMO     NUMBER CONSTRAINT SYS_C0012498 NOT NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0012499 NOT NULL ,
	D_ALTA               DATE CONSTRAINT SYS_C0012500 NOT NULL ,
	D_MOD                DATE CONSTRAINT SYS_C0012501 NOT NULL ,
	N_IDTIPOASIGNATURA   NUMBER CONSTRAINT SYS_C0012502 NOT NULL ,
	N_IDGRADOESCOLAR     NUMBER NULL ,
	N_IDCAMPOFORMATIVO   NUMBER NULL ,
	N_NOCONSECUTIVA      NUMBER DEFAULT  0  NULL 
);



CREATE PUBLIC SYNONYM US_ASIGNATURA
	 FOR US_ASIGNATURA;




CREATE SYNONYM US_ASIGNATURA
	 FOR US_ASIGNATURA;



CREATE UNIQUE INDEX SYS_C0013705 ON US_ASIGNATURA
(N_IDASIGNATURA   ASC);



ALTER TABLE US_ASIGNATURA
	ADD CONSTRAINT  SYS_C0013705 PRIMARY KEY (N_IDASIGNATURA);



CREATE TABLE US_ESCUELAAULA
(
	N_IDESCUELAAULA      NUMBER CONSTRAINT SYS_C0012605 NOT NULL ,
	S_OBSERVACIONES      VARCHAR2(250 BYTE) NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012606 NOT NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0012607 NOT NULL ,
	D_ALTA               DATE CONSTRAINT SYS_C0012608 NOT NULL ,
	D_MOD                DATE CONSTRAINT SYS_C0012609 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012610 NOT NULL ,
	N_IDUSOAULA          NUMBER NULL ,
	N_IDINMUEBLELOCAL    NUMBER NULL ,
	N_CAPACIDAD          NUMBER NULL 
);



CREATE PUBLIC SYNONYM US_ESCUELAAULA
	 FOR US_ESCUELAAULA;




CREATE SYNONYM US_ESCUELAAULA
	 FOR US_ESCUELAAULA;



CREATE UNIQUE INDEX SYS_C0013724 ON US_ESCUELAAULA
(N_IDESCUELAAULA   ASC);



ALTER TABLE US_ESCUELAAULA
	ADD CONSTRAINT  SYS_C0013724 PRIMARY KEY (N_IDESCUELAAULA);



CREATE TABLE US_ESTATUS
(
	N_IDESTATUS          NUMBER CONSTRAINT SYS_C0012626 NOT NULL ,
	N_CLASE              NUMBER CONSTRAINT SYS_C0012627 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012628 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) CONSTRAINT SYS_C0012629 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) CONSTRAINT SYS_C0012630 NOT NULL 
);



CREATE PUBLIC SYNONYM US_ESTATUS
	 FOR US_ESTATUS;




CREATE SYNONYM US_ESTATUS
	 FOR US_ESTATUS;



CREATE UNIQUE INDEX SYS_C0013727 ON US_ESTATUS
(N_IDESTATUS   ASC);



ALTER TABLE US_ESTATUS
	ADD CONSTRAINT  SYS_C0013727 PRIMARY KEY (N_IDESTATUS);



CREATE TABLE US_INSCRIPCION
(
	N_IDINSCRIPCION      NUMBER CONSTRAINT SYS_C0012704 NOT NULL ,
	N_IDUSUARIO          NUMBER CONSTRAINT SYS_C0012705 NOT NULL ,
	D_ALTA               DATE CONSTRAINT SYS_C0012706 NOT NULL ,
	D_MOD                DATE CONSTRAINT SYS_C0012707 NOT NULL ,
	N_IDESTATUS          NUMBER CONSTRAINT SYS_C0012708 NOT NULL ,
	N_IDESCUELA          NUMBER CONSTRAINT SYS_C0012709 NOT NULL ,
	N_IDGRUPO            NUMBER CONSTRAINT SYS_C0012710 NOT NULL ,
	N_IDALUMNO           NUMBER CONSTRAINT SYS_C0012711 NOT NULL ,
	N_IDCICLOESCOLAR     NUMBER CONSTRAINT SYS_C0012712 NOT NULL ,
	N_IDGRUPOTALLER      NUMBER NULL ,
	N_IDTIPOINSCRIPCION  NUMBER NULL ,
	N_HISTORIALCAPTURADO NUMBER NULL 
);



CREATE PUBLIC SYNONYM US_INSCRIPCION
	 FOR US_INSCRIPCION;




CREATE SYNONYM US_INSCRIPCION
	 FOR US_INSCRIPCION;



CREATE UNIQUE INDEX SYS_C0013737 ON US_INSCRIPCION
(N_IDINSCRIPCION   ASC);



ALTER TABLE US_INSCRIPCION
	ADD CONSTRAINT  SYS_C0013737 PRIMARY KEY (N_IDINSCRIPCION);



CREATE TABLE US_PLANESTUDIODETALLE
(
	N_IDPLANDETALLE      NUMBER CONSTRAINT SYS_C0012764 NOT NULL ,
	N_IDUSUARIO          NUMBER NULL ,
	N_HORASSEMANA        NUMBER CONSTRAINT SYS_C0012765 NOT NULL ,
	N_HORASCICLOESCOLAR  NUMBER CONSTRAINT SYS_C0012766 NOT NULL ,
	D_ALTA               DATE CONSTRAINT SYS_C0012767 NOT NULL ,
	D_MOD                DATE CONSTRAINT SYS_C0012768 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012769 NOT NULL ,
	N_IDPLANESTUDIOS     NUMBER NULL ,
	N_IDPERIODOCALIF     NUMBER NULL ,
	N_IDASIGNATURA       NUMBER NULL ,
	N_HORASDIA           NUMBER NULL ,
	N_PRIORIDADHORARIO   NUMBER NULL ,
	N_IDTURNOESCOLAR     NUMBER NULL ,
	N_ORDEN              NUMBER NULL 
);



CREATE PUBLIC SYNONYM US_PLANESTUDIODETALLE
	 FOR US_PLANESTUDIODETALLE;




CREATE SYNONYM US_PLANESTUDIODETALLE
	 FOR US_PLANESTUDIODETALLE;



CREATE UNIQUE INDEX SYS_C0013745 ON US_PLANESTUDIODETALLE
(N_IDPLANDETALLE   ASC);



ALTER TABLE US_PLANESTUDIODETALLE
	ADD CONSTRAINT  SYS_C0013745 PRIMARY KEY (N_IDPLANDETALLE);



CREATE TABLE US_TIPOASIGNATURA
(
	N_IDTIPOASIGNATURA   NUMBER CONSTRAINT SYS_C0012824 NOT NULL ,
	S_CLAVE              VARCHAR2(20 BYTE) CONSTRAINT SYS_C0012825 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) CONSTRAINT SYS_C0012826 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012827 NOT NULL 
);



CREATE PUBLIC SYNONYM US_TIPOASIGNATURA
	 FOR US_TIPOASIGNATURA;




CREATE SYNONYM US_TIPOASIGNATURA
	 FOR US_TIPOASIGNATURA;



CREATE UNIQUE INDEX SYS_C0013754 ON US_TIPOASIGNATURA
(N_IDTIPOASIGNATURA   ASC);



ALTER TABLE US_TIPOASIGNATURA
	ADD CONSTRAINT  SYS_C0013754 PRIMARY KEY (N_IDTIPOASIGNATURA);



CREATE TABLE US_TIPOINCIDENCIA
(
	N_IDTIPOINCIDENCIA   NUMBER CONSTRAINT SYS_C0012836 NOT NULL ,
	S_CLAVE              VARCHAR2(25 BYTE) CONSTRAINT SYS_C0012837 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) CONSTRAINT SYS_C0012838 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012839 NOT NULL 
);



CREATE PUBLIC SYNONYM US_TIPOINCIDENCIA
	 FOR US_TIPOINCIDENCIA;




CREATE SYNONYM US_TIPOINCIDENCIA
	 FOR US_TIPOINCIDENCIA;



CREATE UNIQUE INDEX SYS_C0013757 ON US_TIPOINCIDENCIA
(N_IDTIPOINCIDENCIA   ASC);



ALTER TABLE US_TIPOINCIDENCIA
	ADD CONSTRAINT  SYS_C0013757 PRIMARY KEY (N_IDTIPOINCIDENCIA);



CREATE TABLE US_TIPOINSCRIPCION
(
	N_IDTIPOINSCRIPCION  NUMBER CONSTRAINT SYS_C0012840 NOT NULL ,
	S_CLAVE              VARCHAR2(25 BYTE) CONSTRAINT SYS_C0012841 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(250 BYTE) CONSTRAINT SYS_C0012842 NOT NULL ,
	N_ESTATUS            NUMBER CONSTRAINT SYS_C0012843 NOT NULL 
);



CREATE PUBLIC SYNONYM US_TIPOINSCRIPCION
	 FOR US_TIPOINSCRIPCION;




CREATE SYNONYM US_TIPOINSCRIPCION
	 FOR US_TIPOINSCRIPCION;



CREATE UNIQUE INDEX SYS_C0013758 ON US_TIPOINSCRIPCION
(N_IDTIPOINSCRIPCION   ASC);



ALTER TABLE US_TIPOINSCRIPCION
	ADD CONSTRAINT  SYS_C0013758 PRIMARY KEY (N_IDTIPOINSCRIPCION);



ALTER TABLE FB_PROGESCMEDIOPAGO
	ADD (CONSTRAINT FK_MEDIOPAGO_FBPROGESC FOREIGN KEY (N_IDMEDIOPAGO) REFERENCES FC_MEDIOPAGO (N_ID));



ALTER TABLE FB_PROGRAMAESCUELA
	ADD (CONSTRAINT FK_PROGESC_LOGPROGESC FOREIGN KEY (N_IDPROGRAMAESCUELA) REFERENCES FW_PROGRAMAESCUELA (N_ID));



ALTER TABLE FB_PROGRAMAESCUELAMONTO
	ADD (CONSTRAINT FK_PROGESC_LOGMON FOREIGN KEY (N_IDPROGRAMAESCUELA) REFERENCES FW_PROGRAMAESCUELA (N_ID));



ALTER TABLE FR_PROG_COMUNICADO
	ADD (CONSTRAINT FK_PROG_COM FOREIGN KEY (N_IDPROGRAMA) REFERENCES FC_PROGRAMA (N_ID));



ALTER TABLE FR_PROGRAMABIEN
	ADD (CONSTRAINT FC_BIEN_PROGRABIEN FOREIGN KEY (N_IDBIEN) REFERENCES FC_BIEN (N_ID));



ALTER TABLE FR_PROGRAMABIEN
	ADD (CONSTRAINT FK_PROG_FR_PROGRAB FOREIGN KEY (N_IDPROGRAMA) REFERENCES FC_PROGRAMA (N_ID));



ALTER TABLE FW_PROGRAMAESCUELA
	ADD (CONSTRAINT FK_PROG_PROGESC FOREIGN KEY (N_IDPROGRAMA) REFERENCES FC_PROGRAMA (N_ID));



ALTER TABLE FW_PROGRAMAESCUELA
	ADD (CONSTRAINT FK_MEDIOPAGO_PROGESC FOREIGN KEY (N_IDMEDIOPAGO) REFERENCES FC_MEDIOPAGO (N_ID));



ALTER TABLE IB_ARCHIVOSEQUIVALENCIAS
	ADD (CONSTRAINT IB_EQUIV_IC_ACCIONES_FK FOREIGN KEY (N_IDACCION) REFERENCES IC_ARCHIVOSACCIONESUSUSARIO (N_ID));



ALTER TABLE IB_ARCHIVOSEQUIVALENCIAS
	ADD (CONSTRAINT IB_EQUIV_IR_ARCHIVOS_FK FOREIGN KEY (N_IDEQUIVALENCIA, N_IDCAMPOBUDA, N_IDTABLASBUDA, N_IDCATALOGOS, N_IDCAMPOSAE, N_IDTABLASSAE, N_IDNIVELEDUCATIVO) REFERENCES IR_ARCHIVOSEQUIVALENCIAS (N_ID, N_IDCAMPOBUDA, N_IDTABLASBUDA, N_IDCATALOGOS, N_IDCAMPOSAE, N_IDTABLASSAE, N_IDNIVELEDUCATIVO));



ALTER TABLE IB_ARCHIVOSEQUIVALENCIAS
	ADD (CONSTRAINT IB_EQUIV_TW_USER_FK FOREIGN KEY (N_IDUSER) REFERENCES TW_USER (N_ID));



ALTER TABLE IB_ARCHIVOSVALIDADOS
	ADD (CONSTRAINT IB_ARCVALID_TW_USER_FK FOREIGN KEY (N_IDUSER) REFERENCES TW_USER (N_ID));



ALTER TABLE IB_CARGA_ARCHZIP
	ADD (CONSTRAINT IB_CARGA_AZIP_FK FOREIGN KEY (N_ID_CARGA) REFERENCES IB_CARGA (N_ID));



ALTER TABLE IB_CARGA_EXCEPCIONES
	ADD (CONSTRAINT IC_ARCHCARGA_EXCEP_FK FOREIGN KEY (N_IDARCHCARGA) REFERENCES IC_CARGA_ARCHIVOS (N_ID));



ALTER TABLE IB_CARGA_EXCEPCIONES
	ADD (CONSTRAINT IC_CARGA_EXCEP_FK FOREIGN KEY (N_IDCARGA) REFERENCES IB_CARGA (N_ID));



ALTER TABLE IB_CARGA_EXCEPCIONES
	ADD (CONSTRAINT IC_ERROR_EXCEP_FK FOREIGN KEY (N_IDERROR) REFERENCES IC_ERRORES_CARGA (N_ID));



ALTER TABLE IB_CARGA_EXCREG_ARC
	ADD (CONSTRAINT IC_ARCHCARGA_EXCREG_FK FOREIGN KEY (N_ID_ARCHIVOSCARGA) REFERENCES IC_CARGA_ARCHIVOS (N_ID));



ALTER TABLE IB_CARGA_EXCREG_ARC
	ADD (CONSTRAINT REFIB_CARGA222 FOREIGN KEY (N_IDCARGA) REFERENCES IB_CARGA (N_ID));



ALTER TABLE IB_CARGA_PERSONAL_CORREO
	ADD (CONSTRAINT IB_CARGA_PERSONAL_CORREO FOREIGN KEY (N_ID_CARGA) REFERENCES IB_CARGA (N_ID));



ALTER TABLE IB_CARGA_PRI_ARCHSIIEWEB
	ADD (CONSTRAINT REFIB_CARGA235 FOREIGN KEY (N_ID_CARGA) REFERENCES IB_CARGA (N_ID));



ALTER TABLE IB_CARGA_PROCESAR
	ADD (CONSTRAINT REFIC_CARGA_PASOS_PROCESAR223 FOREIGN KEY (N_ID_CARGA_PASO) REFERENCES IC_CARGA_PASOS_PROCESAR (N_ID));



ALTER TABLE IB_CARGA_PROCESAR
	ADD (CONSTRAINT IB_CARGA_CPROCESAR_FK FOREIGN KEY (N_ID_CARGA) REFERENCES IB_CARGA (N_ID));



ALTER TABLE SC_FORMATOS
	ADD (CONSTRAINT FK_T_N_ID_S_N_IDNIVELEDUCATIVO FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE SR_INTERVENCIONES_VISITAS
	ADD (CONSTRAINT FK_DIMENSION FOREIGN KEY (N_DIMENSION) REFERENCES SC_DIMENSIONES (N_DIMENSION));



ALTER TABLE SR_INTERVENCIONES_VISITAS
	ADD (CONSTRAINT FK_INTERVENCION FOREIGN KEY (N_INTERVENCION) REFERENCES SC_INTERVENCIONES (N_INTERVENCION));



ALTER TABLE SR_INTERVENCIONES_VISITAS
	ADD (CONSTRAINT FK_PROPOSITO FOREIGN KEY (N_PROPOSITO) REFERENCES SC_PROPOSITOS (N_PROPOSITO));



ALTER TABLE SR_INTERVENCIONES_VISITAS
	ADD (CONSTRAINT FK_RESPONSABLE FOREIGN KEY (N_RESPONSABLE) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE SR_INTERVENCIONES_VISITAS
	ADD (CONSTRAINT FK_VISITA FOREIGN KEY (N_VISITA) REFERENCES SW_VISITAS (N_VISITA));



ALTER TABLE SR_PROPOSITO_ACCIONES
	ADD (CONSTRAINT FK_PROP_ACCION FOREIGN KEY (N_ID_ACCION) REFERENCES SC_ACCIONES_MEJORA (N_ACCION));



ALTER TABLE SR_PROPOSITO_ACCIONES
	ADD (CONSTRAINT FK_PROP_INTERVENCION FOREIGN KEY (N_ID_PROPOSITO) REFERENCES SR_INTERVENCIONES_VISITAS (N_INTERVENCION_VISITA));



ALTER TABLE SR_PROPOSITO_ACCIONES
	ADD (CONSTRAINT FK_PROP_RESPONSABLE FOREIGN KEY (N_ID_RESPONSABLE) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE SW_VISITAS
	ADD (CONSTRAINT FK_ESTATUSVISITA FOREIGN KEY (N_ESTATUSVISITAS) REFERENCES SC_ESTATUSVISITA (N_ESTATUSVISITA));



ALTER TABLE SW_VISITAS
	ADD (CONSTRAINT FK_SC_TIPOVISITA FOREIGN KEY (N_TIPOVISITA) REFERENCES SC_TIPOVISITA (N_TIPOVISITA));



ALTER TABLE SW_VISITAS
	ADD (CONSTRAINT FK_SUPERVISOR FOREIGN KEY (N_SUPERVISOR) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE SW_VISITAS
	ADD (CONSTRAINT FK_T_N_ID_S_N_CENTRO FOREIGN KEY (N_CENTRO) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE SW_VISITAS
	ADD (CONSTRAINT FK_ZONA FOREIGN KEY (N_ZONA) REFERENCES TC_ZONAESCOLAR (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_DIALECTOINDI_FK FOREIGN KEY (N_IDDIALECTOINDIGENA) REFERENCES TC_DIALECTOINDIGENA (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_ENTFED_FK FOREIGN KEY (N_IDENTIFEDERDENAC) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_ESTATUSALUMN_FK FOREIGN KEY (N_IDESTATUS) REFERENCES TC_ESTATUSALUMNO (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_ETNIASINDIGE_FK1 FOREIGN KEY (N_IDINDIGENA) REFERENCES TC_ETNIASINDIGENAS (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_NIVELEDUCA_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_ORIGENREGISTRO_FK FOREIGN KEY (N_IDORIGENREGISTRO) REFERENCES TC_ORIGENREGISTRO (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_PAIS_FK FOREIGN KEY (N_IDPAIS) REFERENCES TC_PAIS (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_SEXO_FK FOREIGN KEY (N_IDSEXO) REFERENCES TC_SEXO (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_SITUACIONALU_FK FOREIGN KEY (N_IDSITUACIONALUMNO) REFERENCES TC_SITUACIONALUMNO (N_ID));



ALTER TABLE TC_ALUMNO
	ADD (CONSTRAINT TC_ALUMNO_TC_USACONDADOS_FK FOREIGN KEY (N_IDUSACONDADOS) REFERENCES TC_USACONDADOS (N_ID));



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD (CONSTRAINT TC_ALUMNOCOMPLE_TC_AGUDEVI_FK FOREIGN KEY (N_IDAGUDEZAVISUAL) REFERENCES TC_AGUDEZAVISUAL (N_ID));



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD (CONSTRAINT TC_ALUMNOCOMPLE_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD (CONSTRAINT TC_ALUMNOCOMPLE_TC_NIVNUT_FK FOREIGN KEY (N_IDNIVELNUTRICION) REFERENCES TC_NIVELNUTRICION (N_ID));



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD (CONSTRAINT TC_ALUMNOCOMPLE_TC_TIPODOC_FK FOREIGN KEY (N_IDTIPODOCUMENTOPROBATORIO) REFERENCES TC_TIPODOCUMENTO (N_ID));



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD (CONSTRAINT TC_ALUMNOCOMPLE_TC_TIPOSAN_FK FOREIGN KEY (N_IDTIPOSANGRE) REFERENCES TC_TIPOSANGRE (N_ID));



ALTER TABLE TC_ALUMNOCOMPLEMENTO
	ADD (CONSTRAINT TW_ALUMNOSOPCESC_TC_DEREH_FK FOREIGN KEY (N_IDDERECHOHABIENCIA1) REFERENCES TC_DERECHOHABIENCIA (N_ID));



ALTER TABLE TC_ASIGNATURABLOQUE
	ADD (CONSTRAINT REFTC_ASIGNATURAS1 FOREIGN KEY (N_IDASIGNATURAS) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TC_ASIGNATURABLOQUE
	ADD (CONSTRAINT REFTC_BLOQUETIPOTEXTO24 FOREIGN KEY (N_IDBLOQUETIPOTEXTO) REFERENCES TC_BLOQUETIPOTEXTO (N_ID));



ALTER TABLE TC_ASIGNATURABLOQUEAPRE
	ADD (CONSTRAINT REFTC_ASIGNATURABLOQUE11 FOREIGN KEY (N_IDASIGNATURABLOQUE) REFERENCES TC_ASIGNATURABLOQUE (N_ID));



ALTER TABLE TC_ASIGNATURABLOQUEAPRECON
	ADD (CONSTRAINT REFTC_ASIGNATURABLOQUEAPRE27 FOREIGN KEY (N_IDASIGNATURABLOQUEAPRE) REFERENCES TC_ASIGNATURABLOQUEAPRE (N_ID));



ALTER TABLE TC_ASIGNATURABLOQUECOFA
	ADD (CONSTRAINT REFTC_ASIGNATURABLOQUE12 FOREIGN KEY (N_IDASIGNATURABLOQUE) REFERENCES TC_ASIGNATURABLOQUE (N_ID));



ALTER TABLE TC_ASIGNATURACALIFICACIONES
	ADD (CONSTRAINT TC_ASIGNATCALIF_TC_ASIGNATU_FK FOREIGN KEY (N_IDASIGNATURA) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TC_ASIGNATURAGRADO
	ADD (CONSTRAINT TC_ASIGNAGRADO_TC_ASIGNA_FK FOREIGN KEY (N_IDASIGNATURA) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TC_ASIGNATURAGRADO
	ADD (CONSTRAINT TC_ASIGNAGRADO_TC_GRADOE_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TC_ASIGNATURAS
	ADD (CONSTRAINT TC_ASIGNATURAS_TC_CAMPOFORM_FK FOREIGN KEY (N_IDCAMPOFORMATIVO) REFERENCES TC_CAMPOFORMATIVO (N_ID));



ALTER TABLE TC_ASIGNATURAS
	ADD (CONSTRAINT TC_ASIGNATURAS_TC_CICLOESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_ASIGNATURAS
	ADD (CONSTRAINT TC_ASIGNA_TC_GRADOE_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TC_ASIGNATURAS
	ADD (CONSTRAINT TC_ASIGNA_TC_NIVELEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_ASIGNATURAS
	ADD (CONSTRAINT TC_ASIGNA_TC_TIPOASI_FK FOREIGN KEY (N_IDTIPOASIGNATURA) REFERENCES TC_TIPOASIGNATURA (N_ID));



ALTER TABLE TC_CALENDARIOESCOLAR
	ADD (CONSTRAINT TC_CALENDAES_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_CALENDARIOESCOLAR
	ADD (CONSTRAINT TC_CALENDESC_TC_NIVELEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_CALENDARIOESCOLAR
	ADD (CONSTRAINT TC_CALENDESC_TC_PROCESO_FK FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TC_CATALOGOCAMPO
	ADD (CONSTRAINT TC_CATALCAMPO__TC_CATAL_FK FOREIGN KEY (N_IDCATALOGO) REFERENCES TC_CATALOGO (N_ID));



ALTER TABLE TC_CIUDAD
	ADD (CONSTRAINT TC_CIUDAD_TC_ENTFEDE_FK FOREIGN KEY (N_ID) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TC_CODIGOPOSTAL
	ADD (CONSTRAINT TC_CODPOS_TC_MUNIDELE_FK FOREIGN KEY (N_IDMUNICIPIO) REFERENCES TC_MUNICIPIODELEGACIONES (N_ID));



ALTER TABLE TC_COLONIA
	ADD (CONSTRAINT TC_COLONIA_TC_MUNICIP_FK FOREIGN KEY (N_IDMUNICIPIO) REFERENCES TC_MUNICIPIODELEGACIONES (N_ID));



ALTER TABLE TC_CONSULTA_REPORTES
	ADD (CONSTRAINT TC_CONSULTA_REPORTES_TC_N_FK1 FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_CUINORMATIVA
	ADD (CONSTRAINT CUINORM_CICLOESCOLA_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_CUINORMATIVA
	ADD (CONSTRAINT CUINORM_CUITIPOINFO_FK FOREIGN KEY (N_IDCUITIPOINFO) REFERENCES TC_CUITIPOINFO (N_ID));



ALTER TABLE TC_CUINORMATIVA
	ADD (CONSTRAINT CUINORM_MODULOS_FK FOREIGN KEY (N_IDCUIMODULOS) REFERENCES TC_CUIMODULOS (N_ID));



ALTER TABLE TC_CUINORMATIVA
	ADD (CONSTRAINT CUINORM_NIVELEDUCATIVO_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_CUINORMATIVA
	ADD (CONSTRAINT CUINORM_SERVICIOESC_FK FOREIGN KEY (N_IDSERVICIOESCUELA) REFERENCES TC_SERVICIOESCUELA (N_ID));



ALTER TABLE TC_DATOSREPORTESESPECIALES
	ADD (CONSTRAINT TC_DATREPESP_TC_REPESP_FK FOREIGN KEY (N_IDREPORTESESPECIALES) REFERENCES TC_REPORTESESPECIALES (N_ID));



ALTER TABLE TC_DETALLESERVICIO
	ADD (CONSTRAINT TC_DETALLESERV_TC_SERV_FK FOREIGN KEY (N_IDSERVICIO) REFERENCES TC_SERVICIO (N_ID));



ALTER TABLE TC_DIAINHABIL
	ADD (CONSTRAINT TC_DIAINHABIL_TC_CICLESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_DIAINHABIL
	ADD (CONSTRAINT TC_DIAINHABIL_TC_TIPOPERS_FK FOREIGN KEY (N_IDTIPOPERSONAL_FR) REFERENCES TC_TIPOPERSONAL_FR (N_ID));



ALTER TABLE TC_DIRECCIONOPERATIVA
	ADD (CONSTRAINT TC_DIROPERATIVA_TC_COORSEC_FK FOREIGN KEY (N_IDCOORDINACIONSECTORIAL) REFERENCES TC_COORDINACIONSECTORIAL (N_ID));



ALTER TABLE TC_DIRECCIONOPERATIVA
	ADD (CONSTRAINT tc_direccionoperativa_TcnivelE FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_DOCTOINMUEBLE
	ADD (CONSTRAINT TC_DOCTOINM_DOCTOACRE_FK FOREIGN KEY (N_IDDOCTOACREDITACION) REFERENCES TC_DOCTOACREDITACION (N_ID));



ALTER TABLE TC_DOCTOINMUEBLE
	ADD (CONSTRAINT TC_DOCTOINM_INMUE_FK FOREIGN KEY (N_IDUNMUEBLE) REFERENCES TW_INMUEBLE (N_ID));



ALTER TABLE TC_DOCUMENTOSGRADO
	ADD (CONSTRAINT TC_DOCTOSGRADO_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_DOCUMENTOSGRADO
	ADD (CONSTRAINT TC_DOCTOSGRADO_TC_DOCTO_FK FOREIGN KEY (N_IDDOCUMENTOS) REFERENCES TC_DOCUMENTOS (N_ID));



ALTER TABLE TC_DOCUMENTOSGRADO
	ADD (CONSTRAINT TC_DOCTOSGRADO_TC_GRADOESC_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TC_DOCUMENTOSGRADO
	ADD (CONSTRAINT ESTATUS_REINSCRIPCION FOREIGN KEY (N_IDTIPOINSCRIPCION) REFERENCES US_TIPOINSCRIPCION (N_IDTIPOINSCRIPCION));



ALTER TABLE TC_EDADGRADO
	ADD (CONSTRAINT TC_EDADGRADO_GRADOESC_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TC_EDADGRADO
	ADD (CONSTRAINT TC_EDADGRADO_TC_CICLOESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_ENTIDADESFEDERATIVAS
	ADD (CONSTRAINT TC_ENTIDADESFEDERAT_TC_PAIS_FK FOREIGN KEY (N_IDPAIS) REFERENCES TC_PAIS (N_ID));



ALTER TABLE TC_EQUIVALENCIA_PROMEDIO
	ADD (CONSTRAINT TC_EQUIV_PROM_TAP_FK FOREIGN KEY (N_IDTIPOASIGNATURA) REFERENCES TC_TIPOASIGNATURA (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_ESTRUCTURA FOREIGN KEY (N_IDESTRUCTURA) REFERENCES TC_ESTRUCTURA (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_DEPENDENCIA_FK1 FOREIGN KEY (N_IDDEPENDENCIAOPERATIVA) REFERENCES TC_DEPENDENCIAOPERATIVA (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_DEPENDENCIA_FK2 FOREIGN KEY (N_IDDEPENDENCIANORMATIVA) REFERENCES TC_DEPENDENCIANORMATIVA (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_ESTATUSALUM_FK1 FOREIGN KEY (N_IDESTATUS) REFERENCES TC_ESTATUSALUMNO (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_MODALIDAD_FK1 FOREIGN KEY (N_IDMODALIDAD) REFERENCES TC_MODALIDAD (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_NIVELEDUCAT_FK1 FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_SERVICIOESC_FK1 FOREIGN KEY (N_IDSERVICIOESCUELA) REFERENCES TC_SERVICIOESCUELA (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_SERVICIOREG_FK1 FOREIGN KEY (N_IDSERVICIOREGIONAL) REFERENCES TC_SERVICIOREGIONAL (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_SOSTENIMIEN_FK1 FOREIGN KEY (N_IDSOSTENIMIENTO) REFERENCES TC_SOSTENIMIENTO (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_TIPOESCUELA_FK1 FOREIGN KEY (N_IDTIPOESCUELA) REFERENCES TC_TIPOESCUELA (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_TIPOINCORPO_FK1 FOREIGN KEY (N_IDTIPOINCORPORACIONSEP) REFERENCES TC_TIPOINCORPORACIONSEP (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_TURNOSESCOL_FK1 FOREIGN KEY (N_IDTURNOESCOLAR) REFERENCES TC_TURNOSESCOLAR (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TC_ZONAESCOLAR_FK1 FOREIGN KEY (N_IDZONAESCOLAR) REFERENCES TC_ZONAESCOLAR (N_ID));



ALTER TABLE TC_ESCUELA
	ADD (CONSTRAINT TC_ESCUELA_TW_INMUEBLE_FK1 FOREIGN KEY (N_IDINMUEBLE) REFERENCES TW_INMUEBLE (N_ID));



ALTER TABLE TC_ESCUELAAULA
	ADD (CONSTRAINT TC_ESCUELAAULA_FK1 FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_ESCUELAAULA
	ADD (CONSTRAINT TC_ESCUELAAULA_FK3 FOREIGN KEY (N_IDUSOAULA) REFERENCES TC_USOAULAS (N_ID));



ALTER TABLE TC_ESCUELAAULA
	ADD (CONSTRAINT TC_ESCUELAAULA_FK6 FOREIGN KEY (N_IDINMUEBLELOCAL) REFERENCES TW_INMUEBLE_LOCAL (N_ID));



ALTER TABLE TC_ESCUELAAULA
	ADD (CONSTRAINT TC_ESCUELAAULA_TC_ESCUELA_FK1 FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TC_ESCUELAAULAHISTORICO
	ADD (CONSTRAINT TC_ESCUELAAULAHIS_FK6 FOREIGN KEY (N_IDINMUEBLELOCAL) REFERENCES TW_INMUEBLE_LOCAL (N_ID));



ALTER TABLE TC_ESCUELAAULAHISTORICO
	ADD (CONSTRAINT TC_ESCUELAAULAHIS_TC_ESC_FK1 FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TC_ESCUELAAULAHISTORICO
	ADD (CONSTRAINT TC_ESCUELAAULAHIS_FK1 FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_ESCUELAAULAHISTORICO
	ADD (CONSTRAINT TC_ESCUELAAULAHIS_FK3 FOREIGN KEY (N_IDUSOAULA) REFERENCES TC_USOAULAS (N_ID));



ALTER TABLE TC_ESTADO_INMUEBLE
	ADD (CONSTRAINT TC_EDO_INM_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_ETNIASINDIGENAS
	ADD (CONSTRAINT TC_ETNIAIND_TC_MUNIC_ETN_FK FOREIGN KEY (N_IDMUNICIPIOETNIA) REFERENCES TC_MUNICIPIOETNIAS (N_ID));



ALTER TABLE TC_FALTACONDUCTA
	ADD (CONSTRAINT TC_FALTACOND_TC_NIVFAL_FK FOREIGN KEY (N_IDNIVELFALTA) REFERENCES TC_NIVELFALTA (N_ID));



ALTER TABLE TC_FLUJOGESTIONDET
	ADD (CONSTRAINT TC_FLUGESDE_TC_FLUJOGES_PK FOREIGN KEY (N_IDFLUJOGESTION) REFERENCES TC_FLUJOGESTION (N_ID));



ALTER TABLE TC_FUNCIONREAL
	ADD (CONSTRAINT TC_FUNCREAL_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_FUNCIONREAL
	ADD (CONSTRAINT TC_FUNCIONREAL_MODALIDAD_FK FOREIGN KEY (N_IDMODALIDAD) REFERENCES TC_MODALIDAD (N_ID));



ALTER TABLE TC_FUNCIONREAL
	ADD (CONSTRAINT tc_funcionreal_frtipo_FK FOREIGN KEY (N_IDFUNCIONREALTIPO) REFERENCES TC_FUNCIONREALTIPO (N_ID));



ALTER TABLE TC_GRADOESCOLAR
	ADD (CONSTRAINT TC_GRADESC_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_GROUP
	ADD (CONSTRAINT TC_GROUP_GROUP_BIENES FOREIGN KEY (N_ID_GROUP_BIENES) REFERENCES TC_GROUP_BIENES (N_ID));



ALTER TABLE TC_GRUPOS
	ADD (CONSTRAINT TC_GRUP_TC_GRADESC_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TC_JEFATURASECTORIAL
	ADD (CONSTRAINT TC_JEFSEC_TC_DIROPERA_FK FOREIGN KEY (N_IDDIRECCIONOPERATIVA) REFERENCES TC_DIRECCIONOPERATIVA (N_ID));



ALTER TABLE TC_LIBROS
	ADD (CONSTRAINT TC_LIBROS_TC_ASIGNAT_FK FOREIGN KEY (N_IDASIGNATURA) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TC_LIBROS
	ADD (CONSTRAINT TC_LIBROS_TC_LIBDIRIG_FK FOREIGN KEY (N_IDLIBRODIRIGIDO) REFERENCES TC_LIBRODIRIGIDO (N_ID));



ALTER TABLE TC_LIBROS
	ADD (CONSTRAINT TC_LIBROS_TC_LIBUSO_FK FOREIGN KEY (N_IDLIBROUSO) REFERENCES TC_LIBROUSO (N_ID));



ALTER TABLE TC_MENU
	ADD (CONSTRAINT MENU_MODULO_FK FOREIGN KEY (N_IDMODULO) REFERENCES TC_MODULO (N_ID));



ALTER TABLE TC_MENU
	ADD (CONSTRAINT MENU_AUT FOREIGN KEY (S_AUTHORITY) REFERENCES TC_AUTHORITIES (S_DESCRIPTION));



ALTER TABLE TC_MODALIDAD
	ADD (CONSTRAINT TC_MODALIDAD_NIVELE FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_MODALIDAD_FR
	ADD (CONSTRAINT TC_FUNCIONREAL_FK FOREIGN KEY (N_IDFUNCIONREAL_ASI) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TC_MOTIVO
	ADD (CONSTRAINT TC_MOTIVO_TC_MOVIM_FK FOREIGN KEY (N_IDMOVIMIENTO) REFERENCES TC_MOVIMIENTO (N_ID));



ALTER TABLE TC_MOTIVO
	ADD (CONSTRAINT TC_MOTIVO_TC_PROCPERS_FK FOREIGN KEY (N_IDPROCESOSPERSONAL) REFERENCES TC_PROCESOSPERSONAL (N_ID));



ALTER TABLE TC_MOTIVOFUNCIONREAL
	ADD (CONSTRAINT TC_MOTFUNREAL_TC_SITLAB_FK FOREIGN KEY (N_IDSITUACIONLABORAL) REFERENCES TC_SITUACIONLABORAL (N_ID));



ALTER TABLE TC_MOTIVOPROCESOS
	ADD (CONSTRAINT TC_MOTIVOPROC_TC_PROCPER_FK FOREIGN KEY (N_IDPROCESOSPERSONAL) REFERENCES TC_PROCESOSPERSONAL (N_ID));



ALTER TABLE TC_MOVIMIENTO
	ADD (CONSTRAINT TC_MOVIM_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_MOVIMIENTO
	ADD (CONSTRAINT TC_MOVIM_TC_SERVESC_FK FOREIGN KEY (N_IDSERVICIOESCUELA) REFERENCES TC_SERVICIOESCUELA (N_ID));



ALTER TABLE TC_MOVIMIENTOALUMNO
	ADD (CONSTRAINT TC_MOVALU_TC_PROCESO_FK FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TC_MOVIMIENTOALUMNO
	ADD (CONSTRAINT TC_MOVALUM_TC_ESTATALUM_FK FOREIGN KEY (N_IDESTATUSALUMNO) REFERENCES TC_ESTATUSALUMNO (N_ID));



ALTER TABLE TC_MOVIMIENTOALUMNO
	ADD (CONSTRAINT TC_MOVALUM_TC_FORMCORRE_FK FOREIGN KEY (N_IDFORMATOCORREO) REFERENCES TC_FORMATOCORREO (N_ID));



ALTER TABLE TC_MUNICIPIODELEGACIONES
	ADD (CONSTRAINT TC_MUNICDEL_TC_ENTIFED_FK FOREIGN KEY (N_IDENTIDADFEDERATIVA) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TC_NECESIDADESESPECIALES
	ADD (CONSTRAINT TC_NECESESPE_TC_NIVELEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_NIVELAUTORIZACION
	ADD (CONSTRAINT TC_NIVAUTO_TC_CATEGO_FK FOREIGN KEY (N_IDCATEGORIA) REFERENCES TC_CATEGORIA (N_ID));



ALTER TABLE TC_NIVELFALTA
	ADD (CONSTRAINT TC_NIVFAL_TC_NIVFALED_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_NIVELFALTA
	ADD (CONSTRAINT TC_NIVFAL_TC_NIVFALTIP_FK FOREIGN KEY (N_IDNIVELFALTATIPO) REFERENCES TC_NIVELFALTATIPO (N_ID));



ALTER TABLE TC_NIVELMEDIDA
	ADD (CONSTRAINT TC_NIVMEDI_TC_MEDIS_FK FOREIGN KEY (N_IDMEDIDADISCIPLINA) REFERENCES TC_MEDIDADISCIPLINA (N_ID));



ALTER TABLE TC_NIVELMEDIDA
	ADD (CONSTRAINT TC_NIVMEDI_TC_NIVFAL_FK FOREIGN KEY (N_IDNIVELFALTA) REFERENCES TC_NIVELFALTA (N_ID));



ALTER TABLE TC_PAIS
	ADD (CONSTRAINT REFTC_REGION466 FOREIGN KEY (N_IDREGION) REFERENCES TC_REGION (N_ID));



ALTER TABLE TC_PARAMETROVALOR
	ADD (CONSTRAINT TC_PARAMVAL_TC_CICES_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_PARAMETROVALOR
	ADD (CONSTRAINT TC_PARAMVAL_TC_NIVED_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_PARAMETROVALOR
	ADD (CONSTRAINT TC_PARAMVAL_TC_PARAM_FK FOREIGN KEY (N_IDPARAMETRO) REFERENCES TC_PARAMETRO (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_SITUACION FOREIGN KEY (N_SITUACIONLABORALPER) REFERENCES TC_SITUACIONLABORAL (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_ENTFED_FK FOREIGN KEY (N_IDENTFEDNAC) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_ESCOLARIDAD_FK FOREIGN KEY (N_IDNIVELESTUDIO) REFERENCES TC_ESCOLARIDAD (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_ESTCIV_FK FOREIGN KEY (N_IDESTADOCIVIL) REFERENCES TC_ESTADOCIVIL (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_ORIPER_FK FOREIGN KEY (N_IDORIGENPERSONA) REFERENCES TC_ORIGENPERSONA (N_ID) ON DELETE SET NULL);



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_SEXO_FK FOREIGN KEY (N_IDSEXO) REFERENCES TC_SEXO (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_TIPEMP_FK FOREIGN KEY (N_IDTIPOEMPLEADO) REFERENCES TC_TIPOEMPLEADO (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TC_TIPSAN_FK FOREIGN KEY (N_IDTIPOSANGRE) REFERENCES TC_TIPOSANGRE (N_ID));



ALTER TABLE TC_PERSONAL
	ADD (CONSTRAINT TC_PERSONAL_TW_USER_FK FOREIGN KEY (N_IDUSUARIO) REFERENCES TW_USER (N_ID));



ALTER TABLE TC_PERSONALPLAZA
	ADD (CONSTRAINT TC_PERSOPLAZ_TC_FUNRE_FK FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TC_PERSONALPLAZA
	ADD (CONSTRAINT TC_PERSOPLAZ_TC_MOTFUNR_FK FOREIGN KEY (N_IDMOTIVOFUNCIONREAL) REFERENCES TC_MOTIVOFUNCIONREAL (N_ID));



ALTER TABLE TC_PERSONALPLAZAESCUELA
	ADD (CONSTRAINT TC_PERPZAES_TC_ESCUE_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TC_PERSONALPLAZAESCUELA
	ADD (CONSTRAINT TC_PERPZAES_TC_PERPZA_FK FOREIGN KEY (N_IDPERSONAPLAZA) REFERENCES TC_PERSONALPLAZA (N_ID));



ALTER TABLE TC_PERSONALPLAZAESCUELA
	ADD (CONSTRAINT TC_PERPZAES_TC_PZAASIG_FK FOREIGN KEY (N_IDPLAZAASIGNADA) REFERENCES TR_PLAZAASIGNADA (N_ID));



ALTER TABLE TC_PERSONALPLAZAESCUELAHIST
	ADD (CONSTRAINT TC_PERPZAESH_TC_ESC_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TC_PERSONALPLAZAESCUELAHIST
	ADD (CONSTRAINT TC_PERPZAESH_TC_PERPZA_FK FOREIGN KEY (N_IDPERSONAPLAZA) REFERENCES TC_PERSONALPLAZA (N_ID));



ALTER TABLE TC_PERSONALPLAZAHISTORICO
	ADD (CONSTRAINT TC_PERPZAH_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_PERSONALPLAZAHISTORICO
	ADD (CONSTRAINT TC_PERPZAH_TC_FUNCREA_FK FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TC_PERSONALPLAZAHISTORICO
	ADD (CONSTRAINT TC_PERPZAH_TC_MOTFUNR_FK FOREIGN KEY (N_IDMOTIVOFUNCIONREAL) REFERENCES TC_MOTIVOFUNCIONREAL (N_ID));



ALTER TABLE TC_PERSONALPLAZAHISTORICO
	ADD (CONSTRAINT TC_PERPZAH_TC_TC_PERPZA_FK FOREIGN KEY (N_IDPERSONAPLAZA) REFERENCES TC_PERSONALPLAZA (N_ID));



ALTER TABLE TC_PLANDEESTUDIOSASIGNATURA
	ADD (CONSTRAINT TC_PLANESTAS_TC_ASIGNA_FK FOREIGN KEY (N_IDASIGNATURA) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TC_PLANDEESTUDIOSASIGNATURA
	ADD (CONSTRAINT TC_PLANESTAS_TC_PLANEST_FK FOREIGN KEY (N_IDPLANESTUDIOS) REFERENCES TC_PLANESTUDIOS (N_ID));



ALTER TABLE TC_PLANDEESTUDIOSASIGNATURA
	ADD (CONSTRAINT TC_PLANESTAS_TC_TIPOASIG_FK FOREIGN KEY (N_IDTIPOASIGNATURA) REFERENCES TC_TIPOASIGNATURA (N_ID));



ALTER TABLE TC_PLANESTUDIOS
	ADD (CONSTRAINT TC_PLANESTU_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_PLANESTUDIOS
	ADD (CONSTRAINT TC_PLANESTU_TC_GRADES_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TC_PLAZA
	ADD (CONSTRAINT TC_PLAZA_CATEGORIA_FK FOREIGN KEY (N_IDCATEGORIA) REFERENCES TC_CATEGORIA (N_ID));



ALTER TABLE TC_PLAZA
	ADD (CONSTRAINT TC_PLAZA_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TC_PLAZA
	ADD (CONSTRAINT TC_PLAZA_SUBUNIDAD_FK1 FOREIGN KEY (N_IDSUBUNIDAD) REFERENCES TC_SUBUNIDAD (N_ID));



ALTER TABLE TC_PROCESOSDATOS
	ADD (CONSTRAINT TC_PROCESOSDATOS_TC_NIVEL_FK1 FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_PROCESOSDATOS
	ADD (CONSTRAINT TC_PROCESOSDATOS_TC_PROCE_FK1 FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TC_REGLAPLANTILLA
	ADD (CONSTRAINT TC_REGPLAN_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_REGLAPLANTILLA
	ADD (CONSTRAINT TC_REGPLAN_TC_FUNCREA_FK FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TC_REGLAPLANTILLA
	ADD (CONSTRAINT TC_REGPLAN_TC_MODALI_FK FOREIGN KEY (N_IDMODALIDAD) REFERENCES TC_MODALIDAD (N_ID));



ALTER TABLE TC_REGLAPLANTILLA
	ADD (CONSTRAINT TC_REGPLAN_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_RUTAREPORTE
	ADD (CONSTRAINT TC_RUTAREP_TC_NIVED_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_RUTAREPORTE
	ADD (CONSTRAINT TC_RUTAREP_TC_CICES_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_RUTAREPORTE
	ADD (CONSTRAINT TC_RUTAREP_TC_PROCESO_FK FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TC_SUBUNIDAD
	ADD (CONSTRAINT TC_SUBUNIDAD_FK1 FOREIGN KEY (N_IDUNIDAD) REFERENCES TC_UNIDAD (N_ID));



ALTER TABLE TC_TIPOASIGNATURA
	ADD (CONSTRAINT TC_TIPOAS_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_TIPOASIGNATURA
	ADD (CONSTRAINT TC_TIPOAS_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_TIPOASIGNATURAPERIODOS
	ADD (CONSTRAINT TC_TIPOASPE_TC_CICLESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TC_TIPOASIGNATURAPERIODOS
	ADD (CONSTRAINT TC_TIPOASPE_TC_TIPOASI_FK FOREIGN KEY (N_IDTIPOASIGNATURA) REFERENCES TC_TIPOASIGNATURA (N_ID));



ALTER TABLE TC_TURNOSESCOLAR
	ADD (CONSTRAINT TC_TURNO_SERVESC__FK FOREIGN KEY (N_IDSERVICIOESCUELA) REFERENCES TC_SERVICIOESCUELA (N_ID));



ALTER TABLE TC_TURNOSESCOLAR
	ADD (CONSTRAINT TC_TURNO_NIVEL__FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TC_TURNOSESCOLAR
	ADD (CONSTRAINT TC_TURNO_MODALIDAD__FK FOREIGN KEY (N_IDMODALIDAD) REFERENCES TC_MODALIDAD (N_ID));



ALTER TABLE TC_UR
	ADD (CONSTRAINT TC_UR_FK1 FOREIGN KEY (N_IDURDEPARTAMENTO) REFERENCES TC_URDEPARTAMENTO (N_ID));



ALTER TABLE TC_UR
	ADD (CONSTRAINT TC_UR_FK2 FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TC_USACONDADOS
	ADD (CONSTRAINT TC_USACON_TC_USAEDOS_FK FOREIGN KEY (N_IDUSAESTADOS) REFERENCES TC_USAESTADOS (N_ID));



ALTER TABLE TC_ZONAESCOLAR
	ADD (CONSTRAINT TC_ZONESC_TC_JEFSECT_FK FOREIGN KEY (N_IDJEFATURASECTORIAL) REFERENCES TC_JEFATURASECTORIAL (N_ID));



ALTER TABLE TC_ZONAESCOLAR
	ADD (CONSTRAINT tc_zonaescolar_TcnivelE FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TR_CAPTUROINASISTENCIAS
	ADD (CONSTRAINT TR_CAPTUINASIS_TC_CICESC_FK FOREIGN KEY (N_IDCICLO) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TR_CAPTUROINASISTENCIAS
	ADD (CONSTRAINT TR_CAPTUINASIS_TC_ESCUE_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_CATEGORIAFUNCIONREAL
	ADD (CONSTRAINT TR_CATEGFUNREAL_TC_CATEGO_FK FOREIGN KEY (N_IDCATEGORIA) REFERENCES TC_CATEGORIA (N_ID));



ALTER TABLE TR_CATEGORIAFUNCIONREAL
	ADD (CONSTRAINT TR_CATEGFUNREAL_TC_FUNNREA_FK FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TR_CATEGORIAPORMOTIVO
	ADD (CONSTRAINT TR_CATMOTIVO_TCCATEGO_FK FOREIGN KEY (N_IDCATEGORIA) REFERENCES TC_CATEGORIA (N_ID));



ALTER TABLE TR_CATEGORIAPORMOTIVO
	ADD (CONSTRAINT TR_CATMOTIVO_TC_TIPOPERS_FK FOREIGN KEY (N_TIPO_PERSONAL) REFERENCES TC_TIPOPERSONAL (N_ID));



ALTER TABLE TR_COLONIACP
	ADD (CONSTRAINT TR_COLONCP_TCCODPOS_FK FOREIGN KEY (N_IDCODIGOPOSTAL) REFERENCES TC_CODIGOPOSTAL (N_ID));



ALTER TABLE TR_COLONIACP
	ADD (CONSTRAINT TR_COLONCP_TC_COLO_FK FOREIGN KEY (N_IDCOLONIA) REFERENCES TC_COLONIA (N_ID));



ALTER TABLE TR_DETALLEENVIONOMINA
	ADD (CONSTRAINT TR_DETENVNOM_TW_ENVNOM_FK FOREIGN KEY (N_IDENVIOMOMINA) REFERENCES TW_ENVIONOMINA (N_ID));



ALTER TABLE TR_ESCUELAPROGRAMAS
	ADD (CONSTRAINT TR_ESCPROG_TC_CICLESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TR_ESCUELAPROGRAMAS
	ADD (CONSTRAINT TR_ESCPROG_TC_ESCUE_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_ESCUELAPROGRAMAS
	ADD (CONSTRAINT TR_ESCPROG_TC_PROG_FK FOREIGN KEY (N_IDPROGRAMA) REFERENCES TC_PROGRAMA (N_ID));



ALTER TABLE TR_ESCUELATELEFONO
	ADD (CONSTRAINT TR_ESCTEL_TC_ESC_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_ESCUELATELEFONO
	ADD (CONSTRAINT TR_ESCTEL_TC_TIPTEL_FK FOREIGN KEY (N_IDTIPOTELEFONO) REFERENCES TC_TIPOTELEFONO (N_ID));



ALTER TABLE TR_FALTASINASISTENCIASNOTAS
	ADD (CONSTRAINT TR_FALTINASNOT_TR_INASISNOT_FK FOREIGN KEY (N_IDINASISTENCIASNOTAS) REFERENCES TR_INASISTENCIASNOTAS (N_ID));



ALTER TABLE TR_FALTASINASISTENCIASNOTAS
	ADD (CONSTRAINT TR_FALTINASNOT_TW_PERSFAL_FK FOREIGN KEY (N_IDFALTASINASISTENCIAS) REFERENCES TW_PERSONAFALTAS (N_ID));



ALTER TABLE TR_FOLIOALUMNO
	ADD (CONSTRAINT ALUCICESC_FOLALU FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TR_FOLIOALUMNO
	ADD (CONSTRAINT TIPFOL_FOLALU FOREIGN KEY (N_IDTIPOFOLIO) REFERENCES TC_TIPOSFOLIOS (N_ID));



ALTER TABLE TR_FOLIOTRAMITE
	ADD (CONSTRAINT TR_FOLTRAM_TC_ESC_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_FUNCIONREALASIGNATURA
	ADD (CONSTRAINT TR_FUCREASIG_TC_ASIGNA_DK FOREIGN KEY (N_IDASIGNATURAS) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TR_FUNCIONREALASIGNATURA
	ADD (CONSTRAINT TR_FUCREASIG_TC_FUNCREA_FK FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TR_GROUPFLUJO
	ADD (CONSTRAINT TR_GROFLU_TC_FLUGESDE_FK FOREIGN KEY (N_IDFLUJOGESTIONDET) REFERENCES TC_FLUJOGESTIONDET (N_ID));



ALTER TABLE TR_GROUPFLUJO
	ADD (CONSTRAINT TR_GROFLU_TC_GROUP_FK FOREIGN KEY (N_IDGROUP) REFERENCES TC_GROUP (N_ID));



ALTER TABLE TR_GRUPO_CAT
	ADD (CONSTRAINT TR_GRUPO_CAT_FK_CAT FOREIGN KEY (N_IDCATALOGOS) REFERENCES TC_CATALOGO (N_ID));



ALTER TABLE TR_GRUPO_CAT
	ADD (CONSTRAINT TR_GRUPO_CAT_FK_GRU FOREIGN KEY (N_IDGROUP) REFERENCES TC_GROUP (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TC_CICLESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TC_CLASIINC_FK FOREIGN KEY (N_IDCALSIFICAINCIDENCIA) REFERENCES TC_CLASIFICAINCIDENCIAS (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TC_PERSON_FK FOREIGN KEY (N_IDPERSONA) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TC_TIPOMOV_FK FOREIGN KEY (N_IDTIPOMOV) REFERENCES TC_TIPOMOVIMIENTO_IR (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TR_PERSGRH_FK FOREIGN KEY (N_PGRUPO) REFERENCES TR_PERSONALGRUPOHISTORICO (N_ID));



ALTER TABLE TR_INASISTENCIASNOTAS
	ADD (CONSTRAINT TR_INASISNOT_TR_PERSHORHIS_FK FOREIGN KEY (N_PHORARIO) REFERENCES TR_PERSONAHORARIOHISTORICO (N_ID));



ALTER TABLE TR_MOVIMIENTOSCICLO
	ADD (CONSTRAINT TR_MOVIMCICL_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TR_MOVIMIENTOSCICLO
	ADD (CONSTRAINT TR_MOVIMCICL__TC_PROCE_FK FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPLAZAPERSONA_TC_TIPOB_FK FOREIGN KEY (N_IDTIPO_BECA) REFERENCES TC_TIPO_BECA (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPLAZAPERSONA_TC_TIPOLBFK FOREIGN KEY (N_IDTIPO_LICENCIA_BECA) REFERENCES TC_TIPO_LIC_BECA (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPZAPER_TC_CICLESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPZAPER_TC_ESCUE_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPZAPER_TC_MOTIVO_FK FOREIGN KEY (N_IDMOTIVO) REFERENCES TC_MOTIVO (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPZAPER_TC_PERSON_FK FOREIGN KEY (N_IDPERSONA) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT N_SITUACIONLABORALPER_FK FOREIGN KEY (N_SITUACIONLABORALPER) REFERENCES TC_SITUACIONLABORAL (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONA
	ADD (CONSTRAINT TR_MOVPZAPER_TC_FLUGESDE_FK FOREIGN KEY (N_IDFLUJOGESTIONDET) REFERENCES TC_FLUJOGESTIONDET (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONADET
	ADD (CONSTRAINT TR_MOVPZAPERDET_TC_MOVPZAPE_FK FOREIGN KEY (N_IDMOVPLAZAPERSONA) REFERENCES TR_MOVPLAZAPERSONA (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONADET
	ADD (CONSTRAINT TR_MOVPZAPERDET_TC_PERPZAES_FK FOREIGN KEY (N_IDPERSONALPLAZAESCUELA) REFERENCES TC_PERSONALPLAZAESCUELA (N_ID) ON DELETE SET NULL);



ALTER TABLE TR_MOVPLAZAPERSONADET
	ADD (CONSTRAINT TR_MOVPZAPERDET_TC_PZAASIG_FK FOREIGN KEY (N_IDPLAZAASIGNADA) REFERENCES TR_PLAZAASIGNADA (N_ID));



ALTER TABLE TR_MOVPLAZAPERSONADET
	ADD (CONSTRAINT TR_MOVPZAPERDET_TC_SITUALAB_FK FOREIGN KEY (N_SITUACIONLABORALPPE) REFERENCES TC_SITUACIONLABORAL (N_ID) ON DELETE SET NULL);



ALTER TABLE TR_PERSONAHORARIO
	ADD (CONSTRAINT TR_PERSHOR_TC_ESCAUL_FK FOREIGN KEY (N_IDESCUELASAULA) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TR_PERSONAHORARIO
	ADD (CONSTRAINT TR_PERSHOR_TC_PLAESAS_FK FOREIGN KEY (N_IDPLANESTUDIOASIGNATURA) REFERENCES TC_PLANDEESTUDIOSASIGNATURA (N_ID));



ALTER TABLE TR_PERSONAHORARIO
	ADD (CONSTRAINT TR_PERSHOR_TR_PERSGRU_FK FOREIGN KEY (N_IDPERSONALGRUPO) REFERENCES TR_PERSONALGRUPO (N_ID));



ALTER TABLE TR_PERSONAHORARIOHISTORICO
	ADD (CONSTRAINT TR_PERSHORHIS_TC_ESCAUL_FK FOREIGN KEY (N_IDESCUELASAULA) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TR_PERSONAHORARIOHISTORICO
	ADD (CONSTRAINT TR_PERSHORHIS_TC_PLAESTAS_FK FOREIGN KEY (N_IDPLANESTUDIOASIGNATURA) REFERENCES TC_PLANDEESTUDIOSASIGNATURA (N_ID));



ALTER TABLE TR_PERSONALGRUPO
	ADD (CONSTRAINT TR_PERGRU_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TR_PERSONALGRUPO
	ADD (CONSTRAINT TR_PERGRU_TC_ESCAUL_FK FOREIGN KEY (N_IDESCUELASAULA) REFERENCES TC_ESCUELAAULA (N_ID) ON DELETE SET NULL);



ALTER TABLE TR_PERSONALGRUPO
	ADD (CONSTRAINT TR_PERGRU_TC_PERPLA_FK FOREIGN KEY (N_IDPERSONAPLAZA) REFERENCES TC_PERSONALPLAZA (N_ID));



ALTER TABLE TR_PLAZAASIGNADA
	ADD (CONSTRAINT TR_PLAASI_TC_ESCUELA_FK FOREIGN KEY (N_CCTPAGO) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TR_PLAZAASIGNADA
	ADD (CONSTRAINT TR_PLAASI_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TR_PLAZAASIGNADA
	ADD (CONSTRAINT TR_PLAASI_TC_PLAZA_FK FOREIGN KEY (N_IDPLAZA) REFERENCES TC_PLAZA (N_ID));



ALTER TABLE TR_PLAZAASIGNADA
	ADD (CONSTRAINT TR_PLAZAASIGNADA_MOTIVO_FK FOREIGN KEY (N_TIPONOMBRAMIENTO) REFERENCES TC_MOTIVO (N_ID));



ALTER TABLE TR_PROG_USUARIOS
	ADD (CONSTRAINT FK_PROG_USER FOREIGN KEY (N_IDPROGRAMA) REFERENCES FC_PROGRAMA (N_ID));



ALTER TABLE TR_REPEVAZONACT
	ADD (CONSTRAINT TR_REPEVAZONACT_ZONA_FK FOREIGN KEY (N_IDREPEVAZONA) REFERENCES TW_REPEVAZONA (N_ID));



ALTER TABLE TR_REPEVAZONACT
	ADD (CONSTRAINT TR_REPEVAZONACT_ESTATUS_FK FOREIGN KEY (N_IDESTATUS) REFERENCES TC_REPEVAESTATUS (N_ID));



ALTER TABLE TR_REQUISITOSDOCUMENTALES
	ADD (CONSTRAINT TR_REQDOC_TC_DOCUME_FK FOREIGN KEY (N_IDDOCUMENTO) REFERENCES TC_DOCUMENTOS (N_ID));



ALTER TABLE TR_REQUISITOSDOCUMENTALES
	ADD (CONSTRAINT TR_REQ_D_TC_FLUJOGESDET_FK FOREIGN KEY (N_IDFLUJOGESTIONDET) REFERENCES TC_FLUJOGESTIONDET (N_ID));



ALTER TABLE TR_TRAMITEDOCUMENTOS
	ADD (CONSTRAINT TR_TRADOC_TC_DOCUMENTOS_FK FOREIGN KEY (N_IDDOCUMENTO) REFERENCES TC_DOCUMENTOS (N_ID));



ALTER TABLE TR_TRAMITEDOCUMENTOS
	ADD (CONSTRAINT TR_TRADOC_TR_MOVPLAPER_FK FOREIGN KEY (N_IDMOVPLAZAPERSONA) REFERENCES TR_MOVPLAZAPERSONA (N_ID));



ALTER TABLE TR_VINCULARALUMNO
	ADD (CONSTRAINT TR_VINCULARALUMNO_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TR_VINCULARALUMNO
	ADD (CONSTRAINT TR_VINCULARALUMNO_TW_USER_FK FOREIGN KEY (N_IDUSER) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_AGENDAPERSONA
	ADD (CONSTRAINT tw_agendapersona_tc_user_PK FOREIGN KEY (N_IDUSER) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_ALUMNOAPOYOREQUERIDOS
	ADD (CONSTRAINT TW_ALUAPOREQ_TC_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOAPOYOREQUERIDOS
	ADD (CONSTRAINT TW_ALUAPOREQ_TC_ASIG_FK FOREIGN KEY (N_IDASIGNATURA) REFERENCES TC_ASIGNATURAS (N_ID));



ALTER TABLE TW_ALUMNOAPOYOREQUERIDOS
	ADD (CONSTRAINT TW_ALUAPOREQ_TC_TIPASIPER_FK FOREIGN KEY (N_IDTIPOASIGNATURAPERIODOS) REFERENCES TC_TIPOASIGNATURAPERIODOS (N_ID));



ALTER TABLE TW_ALUMNOASIGNATURAPROMEDIO
	ADD (CONSTRAINT TW_ALUASIPRO_TC_PLAESTASI_FK FOREIGN KEY (N_IDPLANDEESTUDIOSASIGNATURA) REFERENCES TC_PLANDEESTUDIOSASIGNATURA (N_ID));



ALTER TABLE TW_ALUMNOASIGNATURAPROMEDIO
	ADD (CONSTRAINT TW_ALUASIPRO_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOBAJAS
	ADD (CONSTRAINT TW_ALUBAJ_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOBAJAS
	ADD (CONSTRAINT TW_ALUBAJ_TC_MOTBAJALU_FK FOREIGN KEY (N_IDMOTIVOBAJAALUMNO) REFERENCES TC_MOTIVOBAJAALUMNO (N_ID));



ALTER TABLE TW_ALUMNOBAJAS
	ADD (CONSTRAINT TW_ALUMNOBAJAS_TC_ESCUELA_FK1 FOREIGN KEY (N_IDESCUELAAULA) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TW_ALUMNOBAJAS
	ADD (CONSTRAINT TW_ALUMNOBAJAS_TW_ALUMNOC_FK1 FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOBAJAS
	ADD (CONSTRAINT TW_ALUMNOB_TW_ALUCON_PK FOREIGN KEY (N_IDALUMNOCONTACTOS) REFERENCES TW_ALUMNOCONTACTOS (N_ID));



ALTER TABLE TW_ALUMNOBAP
	ADD (CONSTRAINT TW_ALUMNOBAP_FK1 FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOBAP
	ADD (CONSTRAINT TW_ALUMNOBAP_TC_BAP_FK1 FOREIGN KEY (N_IDBAP) REFERENCES TC_BAP (N_ID));



ALTER TABLE TW_ALUMNOBAPAPOYOS
	ADD (CONSTRAINT TW_ALUBAP_TC_BAPAPAPOYOS_FK1 FOREIGN KEY (N_IDBAPAPOYOS) REFERENCES TC_BAPAPOYOS (N_ID));



ALTER TABLE TW_ALUMNOBAPAPOYOS
	ADD (CONSTRAINT TW_ALUMNOBAPAPAPOYOS_FK1 FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOBECA
	ADD (CONSTRAINT TW_ALUMNOBECA_TC_ALUCOM_FK FOREIGN KEY (N_IDALUMNOCOMPLEMENTO) REFERENCES TC_ALUMNOCOMPLEMENTO (N_ID));



ALTER TABLE TW_ALUMNOBECA
	ADD (CONSTRAINT TW_ALUMNOBECA_TC_BECA_FK FOREIGN KEY (N_IDBECA) REFERENCES TC_BECA (N_ID));



ALTER TABLE TW_ALUMNOCALIFICACIONES
	ADD (CONSTRAINT TW_ALUCAL_TC_PLAESTASI_FK FOREIGN KEY (N_IDPLANDEESTUDIOSASIGNATURA) REFERENCES TC_PLANDEESTUDIOSASIGNATURA (N_ID));



ALTER TABLE TW_ALUMNOCALIFICACIONES
	ADD (CONSTRAINT TW_ALUCAL_TC_TIPASIPER_FK FOREIGN KEY (N_IDTIPOASIGNATURAPERIODOS) REFERENCES TC_TIPOASIGNATURAPERIODOS (N_ID));



ALTER TABLE TW_ALUMNOCALIFICACIONES
	ADD (CONSTRAINT TW_ALUCAL_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOCAPACIDADESDIFERENTES
	ADD (CONSTRAINT TW_ALUCAPDIF_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOCAPACIDADESDIFERENTES
	ADD (CONSTRAINT TW_ALUCAPDIF_TC_NECESP_FK FOREIGN KEY (N_IDNECESIDADESDIFERENTES) REFERENCES TC_NECESIDADESESPECIALES (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLAR
	ADD (CONSTRAINT TW_ACE_INDPROM_FK FOREIGN KEY (N_IDINDICADORPROMOVIDO) REFERENCES TC_INDICADORPROMOVIDO (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLAR
	ADD (CONSTRAINT TW_ALUCICES_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLAR
	ADD (CONSTRAINT TW_ALUCICES_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLAR
	ADD (CONSTRAINT TW_ALUCICES_TC_ESCAUL_FK FOREIGN KEY (N_IDESCUELAAULA) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLAR
	ADD (CONSTRAINT TW_ALUCICES_TC_ESTALU_FK FOREIGN KEY (N_IDESTATUS) REFERENCES TC_ESTATUSALUMNO (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLARHISTORICO
	ADD (CONSTRAINT TW_ALUCICESCH_TC_ALUCICE_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLARHISTORICO
	ADD (CONSTRAINT TW_ALUCICESCH_TC_ALU_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLARHISTORICO
	ADD (CONSTRAINT TW_ALUCICESCH_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLARHISTORICO
	ADD (CONSTRAINT TW_ALUCICESCH_TC_ESCAUL_FK FOREIGN KEY (N_IDESCUELAAULA) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TW_ALUMNOCICLOESCOLARHISTORICO
	ADD (CONSTRAINT TW_ALUCICESCH_TC_ESTALU_FK FOREIGN KEY (N_IDESTATUS) REFERENCES TC_ESTATUSALUMNO (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOCORREO
	ADD (CONSTRAINT TW_ALUCONCOR_TC_TIPCOR_FK FOREIGN KEY (N_IDTIPOCORREO) REFERENCES TC_TIPOCORREO (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOCORREO
	ADD (CONSTRAINT TW_ALUCONCOR_TW_ALUCON_FK FOREIGN KEY (N_IDALUMNOCONTACTOS) REFERENCES TW_ALUMNOCONTACTOS (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALCONTACTOS_DIALIND FOREIGN KEY (N_INDIGENA) REFERENCES TC_DIALECTOINDIGENA (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALUCON_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALUCON_TC_ESCO_FK FOREIGN KEY (N_IDESCOLARIDAD) REFERENCES TC_ESCOLARIDAD (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALUCON_TC_ETNIND_FK FOREIGN KEY (N_IDEDNIASINDIGENAS) REFERENCES TC_ETNIASINDIGENAS (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALUCON_TC_OCUPA_FK FOREIGN KEY (N_IDOCUPACION) REFERENCES TC_OCUPACION (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALUCON_TC_PARENT_FK FOREIGN KEY (N_IDPARENTESCO) REFERENCES TC_PARENTESCO (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOS
	ADD (CONSTRAINT TW_ALUMNOCONTACTOS_ENTNAC FOREIGN KEY (N_IDENTIFEDERDENAC) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOTELEFONO
	ADD (CONSTRAINT TW_ALUCONTEL_TC_TIPTEL_PK FOREIGN KEY (N_IDTIPOTELEFONO) REFERENCES TC_TIPOTELEFONO (N_ID));



ALTER TABLE TW_ALUMNOCONTACTOTELEFONO
	ADD (CONSTRAINT TW_ALUCONTEL_TW_ALUCON_PK FOREIGN KEY (N_IDALUMNOCONTACTOS) REFERENCES TW_ALUMNOCONTACTOS (N_ID));



ALTER TABLE TW_ALUMNODATOSESTADISTICOS
	ADD (CONSTRAINT TW_ALUDATEST_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNODATOSESTADISTICOS
	ADD (CONSTRAINT TW_ALUDATEST_TC_DATEST_FK FOREIGN KEY (N_IDDATOSESTADISTICOS) REFERENCES TC_DATOSESTADISTICOSBORR (N_ID));



ALTER TABLE TW_ALUMNODOCUMENTOS
	ADD (CONSTRAINT TW_ALUDOC_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNODOCUMENTOS
	ADD (CONSTRAINT TW_ALUDOC_TC_DOCUMENTOS_FK FOREIGN KEY (N_IDDOCUMENTOS) REFERENCES TC_DOCUMENTOS (N_ID));



ALTER TABLE TW_ALUMNOINASISTENCIAS
	ADD (CONSTRAINT TW_ALUINA_TC_TIPOINASIS_FK FOREIGN KEY (N_IDTIPOINASISTENCIA) REFERENCES TC_TIPOINASISTENCIAS (N_ID));



ALTER TABLE TW_ALUMNOINASISTENCIAS
	ADD (CONSTRAINT TW_ALUINA_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIA
	ADD (CONSTRAINT TW_ALUINC_TC_ESTINCALU_FK FOREIGN KEY (N_ESTATUSINCIDENCIA) REFERENCES TC_ESTATUSINCIDENCIA_ALUM (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIA
	ADD (CONSTRAINT TW_ALUMNOINCIDENCIA_ACEH_FK FOREIGN KEY (N_IDALCESCOLARHISTORICO) REFERENCES TW_ALUMNOCICLOESCOLARHISTORICO (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIABITACORA
	ADD (CONSTRAINT TW_ALUINCBIT_TW_ALUINC_FK FOREIGN KEY (N_IDALUMNOINCIDENCIA) REFERENCES TW_ALUMNOINCIDENCIA (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIABITACORA
	ADD (CONSTRAINT TW_ALUINCBIT_TW_USER_FK FOREIGN KEY (N_IDUSUARIO) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIADOCTOS
	ADD (CONSTRAINT TW_ALUINCDOCTOSTW_ALUINC_FK FOREIGN KEY (N_IDALUMNOINCIDENCIA) REFERENCES TW_ALUMNOINCIDENCIA (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIAFALTA
	ADD (CONSTRAINT TW_ALUINCFALTA_TC_FALTCON_FK FOREIGN KEY (N_IDFALTACONDUCTA) REFERENCES TC_FALTACONDUCTA (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIAFALTA
	ADD (CONSTRAINT TW_ALUINCFALTA_TW_ALUINC_FK FOREIGN KEY (N_IDALUMNOINCIDENCIA) REFERENCES TW_ALUMNOINCIDENCIA (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIAMEDIDA
	ADD (CONSTRAINT TW_ALUINCMED_TC_NIVMEDIDA_FK FOREIGN KEY (N_IDNIVELMEDIDA) REFERENCES TC_NIVELMEDIDA (N_ID));



ALTER TABLE TW_ALUMNOINCIDENCIAMEDIDA
	ADD (CONSTRAINT TW_ALUINCMED_TW_ALUINC_FK FOREIGN KEY (N_IDALUMNOINCIDENCIA) REFERENCES TW_ALUMNOINCIDENCIA (N_ID));



ALTER TABLE TW_ALUMNOLIBROS
	ADD (CONSTRAINT TW_ALULIBROS_TC_LIBROS_FK FOREIGN KEY (N_IDLIBROS) REFERENCES TC_LIBROS (N_ID));



ALTER TABLE TW_ALUMNOLIBROS
	ADD (CONSTRAINT TW_ALULIBROS_TC_PLAESTASI_FK FOREIGN KEY (N_IDPLANDEESTUDIOSASIGNATURA) REFERENCES TC_PLANDEESTUDIOSASIGNATURA (N_ID));



ALTER TABLE TW_ALUMNOLIBROS
	ADD (CONSTRAINT TW_ALULIBROS_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOMOVIMIENTOS
	ADD (CONSTRAINT TW_ALUMOV_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOMOVIMIENTOS
	ADD (CONSTRAINT TW_ALUMOV_TC_ESTALU_FK FOREIGN KEY (N_IDESTATUSALUMNO) REFERENCES TC_ESTATUSALUMNO (N_ID));



ALTER TABLE TW_ALUMNOMOVIMIENTOS
	ADD (CONSTRAINT TW_ALUMOV_TC_MOVALU_FK FOREIGN KEY (N_IDMOVIMIENTOALUMNO) REFERENCES TC_MOVIMIENTOALUMNO (N_ID));



ALTER TABLE TW_ALUMNOMOVIMIENTOS
	ADD (CONSTRAINT TW_ALUMOV_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCE_HIST) REFERENCES TW_ALUMNOCICLOESCOLARHISTORICO (N_ID));



ALTER TABLE TW_ALUMNOOBSERVACIONES
	ADD (CONSTRAINT TW_ALUOBS_TC_INDPRO_FK FOREIGN KEY (N_IDINDICADORPROMOVIDO) REFERENCES TC_INDICADORPROMOVIDO (N_ID));



ALTER TABLE TW_ALUMNOOBSERVACIONES
	ADD (CONSTRAINT TW_ALUOBS_TC_TIPASIPER_FK FOREIGN KEY (N_IDTIPOASIGNATURAPERIODOS) REFERENCES TC_TIPOASIGNATURAPERIODOS (N_ID));



ALTER TABLE TW_ALUMNOOBSERVACIONES
	ADD (CONSTRAINT TW_ALUOBS_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOPERIODOPROMEDIO
	ADD (CONSTRAINT TW_ALUPERPRO_TC_INDPRO_FK FOREIGN KEY (N_IDINDICADORPROMOVIDO) REFERENCES TC_INDICADORPROMOVIDO (N_ID));



ALTER TABLE TW_ALUMNOPERIODOPROMEDIO
	ADD (CONSTRAINT TW_ALUPERPRO_TC_TIPASIPER_FK FOREIGN KEY (N_IDTIPOASIGNATURAPERIODOS) REFERENCES TC_TIPOASIGNATURAPERIODOS (N_ID));



ALTER TABLE TW_ALUMNOPERIODOPROMEDIO
	ADD (CONSTRAINT TW_ALUPERPRO_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOPROMEDIOSNIVEL
	ADD (CONSTRAINT TW_ALUMNOPROMEDIOSNIVEL_AL FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOPROMEDIOSNIVEL
	ADD (CONSTRAINT TW_ALUMNOPROMEDIOSNIVEL_GD FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOPROMEDIOSNIVEL
	ADD (CONSTRAINT TW_ALUMNOPROMEDIOSNIVEL_NVL FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TW_ALUMNOPROMEDIOSNIVEL
	ADD (CONSTRAINT tw_alumnopromN_tc_movpromh_PK FOREIGN KEY (N_IDTC_MOTIVOPROMEDIOSHIS) REFERENCES TC_MOTIVOPROMEDIOSHIS (N_ID));



ALTER TABLE TW_ALUMNOPROYECTOS
	ADD (CONSTRAINT TW_ALUMPROY_TC_ALUCOM_FK FOREIGN KEY (N_IDALUMNOCOMPLEMENTO) REFERENCES TC_ALUMNOCOMPLEMENTO (N_ID));



ALTER TABLE TW_ALUMNOPROYECTOS
	ADD (CONSTRAINT TW_ALUMPROY_TC_PROYECTOS_FK FOREIGN KEY (N_IDPROYECTOS) REFERENCES TC_PROYECTOS (N_ID));



ALTER TABLE TW_ALUMNORECOMENDACIONES
	ADD (CONSTRAINT REFTC_RECOMENDACIONTIPO22 FOREIGN KEY (N_IDRECOMENDACIONTIPO) REFERENCES TC_RECOMENDACIONTIPO (N_ID));



ALTER TABLE TW_ALUMNORECOMENDACIONES
	ADD (CONSTRAINT REFTC_MOTIVOREC21 FOREIGN KEY (N_IDMOTIVOREC) REFERENCES TC_MOTIVOREC (N_ID));



ALTER TABLE TW_ALUMNOSOPCIONESESCUELAS
	ADD (CONSTRAINT TW_ALUOPCESC_TC_ALUMNO_FK FOREIGN KEY (N_IDHERMANO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ALUMNOSOPCIONESESCUELAS
	ADD (CONSTRAINT TW_ALUOPCESC_TC_CICLOESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ALUMNOSOPCIONESESCUELAS
	ADD (CONSTRAINT TW_ALUOPCESC_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_ALUMNOSOPCIONESESCUELAS
	ADD (CONSTRAINT TW_ALUOPCESC_TC_ALUMNOHP_FK FOREIGN KEY (N_IDHERMANOPROCESO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ASIGNATURALIBROS
	ADD (CONSTRAINT TW_ASIGLIBROS_TC_LIBROS_FK FOREIGN KEY (N_IDLIBROS) REFERENCES TC_LIBROS (N_ID));



ALTER TABLE TW_ASIGNATURALIBROS
	ADD (CONSTRAINT TW_ASIGLIBROS_TC_PLAESTASI_FK FOREIGN KEY (N_IDPLANDEESTUDIOSASIGNATURA) REFERENCES TC_PLANDEESTUDIOSASIGNATURA (N_ID));



ALTER TABLE TW_BITACORA
	ADD (CONSTRAINT TW_BITACORA_N_IDESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_BITACORA
	ADD (CONSTRAINT TW_BITACORA_N_IDPPLAZA_FK FOREIGN KEY (N_IDPERSONALPLAZA) REFERENCES TC_PERSONALPLAZA (N_ID));



ALTER TABLE TW_BITACORA
	ADD (CONSTRAINT TW_BITACORA_N_IDPROCESO_FK FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TW_BITACORA
	ADD (CONSTRAINT TW_BITACORA_N_IDUSER_FK FOREIGN KEY (N_IDUSER) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_CARRERAMAGISTERIAL
	ADD (CONSTRAINT TW_CARMAG_FK FOREIGN KEY (N_IDPLAZAASIGNADA) REFERENCES TR_PLAZAASIGNADA (N_ID));



ALTER TABLE TW_COMUNICADODOCUMENTOS
	ADD (CONSTRAINT TW_COMDOC_TW_COMUNICADOS_FK FOREIGN KEY (N_IDCOMUNICADOS) REFERENCES TW_COMUNICADOS (N_ID));



ALTER TABLE TW_COMUNICADODOCUMENTOS
	ADD (CONSTRAINT TW_COMDOC_TW_USER_FK FOREIGN KEY (N_IDUSUARIO) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_COMUNICADOSDESTINATARIOS
	ADD (CONSTRAINT TW_COMDES_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_COMUNICADOSDESTINATARIOS
	ADD (CONSTRAINT TW_COMDES_TW_COMUNICADOS_FK FOREIGN KEY (N_IDCOMUNICADOS) REFERENCES TW_COMUNICADOS (N_ID));



ALTER TABLE TW_COMUNICADOSDESTINATARIOS
	ADD (CONSTRAINT TW_COMDES_TW_USER_FK FOREIGN KEY (N_IDUSUARIO) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_CONTACTODOMICILIO
	ADD (CONSTRAINT TW_CONDOM_TC_CIUDAD_FK FOREIGN KEY (N_IDCIUDAD) REFERENCES TC_CIUDAD (N_ID));



ALTER TABLE TW_CONTACTODOMICILIO
	ADD (CONSTRAINT TW_CONDOM_TC_CODPOS_FK FOREIGN KEY (N_IDCODIGOPOSTAL) REFERENCES TC_CODIGOPOSTAL (N_ID));



ALTER TABLE TW_CONTACTODOMICILIO
	ADD (CONSTRAINT TW_CONDOM_TC_COLONIA_FK FOREIGN KEY (N_IDCOLONIA) REFERENCES TC_COLONIA (N_ID));



ALTER TABLE TW_CONTACTODOMICILIO
	ADD (CONSTRAINT TW_CONDOM_TC_ENTFED_FK FOREIGN KEY (N_IDENTIDADFEDERATIVA) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TW_CORRIGEEVALUACIONES
	ADD (CONSTRAINT TW_COREVA_TC_TIPASIPER_FK FOREIGN KEY (N_IDTIPOASIGNATURAPERIODOS) REFERENCES TC_TIPOASIGNATURAPERIODOS (N_ID));



ALTER TABLE TW_CORRIGEEVALUACIONES
	ADD (CONSTRAINT TW_COREVA_TW_ESCINCPER_FK FOREIGN KEY (N_IDESCUELAINCIDENCIAPERS) REFERENCES TW_ESCUELAINCIDENCIAPER (N_ID));



ALTER TABLE TW_CORRIGEEVALUACIONES
	ADD (CONSTRAINT N_IDCICLOESCOLAR_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_DATOSESTADISTICOS
	ADD (CONSTRAINT TW_DATEST_TC_NIVEDU_FK FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TW_DATOSESTADISTICOS
	ADD (CONSTRAINT TW_DATEST_TC_TIPDAT_FK FOREIGN KEY (N_IDTIPODATO) REFERENCES TC_TIPODEDATO (N_ID));



ALTER TABLE TW_DATOSESTADISTICOS
	ADD (CONSTRAINT TW_DATEST_TC_TIPRES_FK FOREIGN KEY (N_IDTIPORESPUESTA) REFERENCES TC_TIPORESPUESTA (N_ID));



ALTER TABLE TW_DATOSREPORTESESPECIALES
	ADD (CONSTRAINT TW_DATREPESP_TC_DATREPESP_FK FOREIGN KEY (N_IDDATOSREPORTE) REFERENCES TC_DATOSREPORTESESPECIALES (N_ID));



ALTER TABLE TW_DATOSREPORTESESPECIALES
	ADD (CONSTRAINT TW_DATREPESP_TW_REPESP_FK FOREIGN KEY (N_IDTWREPORTESESPECIALES) REFERENCES TW_REPORTESESPECIALES (N_ID));



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD (CONSTRAINT TW_DOMPER_TC_CIUDAD_FK FOREIGN KEY (N_IDCIUDAD) REFERENCES TC_CIUDAD (N_ID));



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD (CONSTRAINT TW_DOMPER_TC_CODPOS_FK FOREIGN KEY (N_IDCODIGOPOSTAL) REFERENCES TC_CODIGOPOSTAL (N_ID));



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD (CONSTRAINT TW_DOMPER_TC_COLONIA_FK FOREIGN KEY (N_IDLOCALIDADCOLONIA) REFERENCES TC_COLONIA (N_ID));



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD (CONSTRAINT TW_DOMPER_TC_ENTFED_FK FOREIGN KEY (N_IDENTIDADFEDERATIVA) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD (CONSTRAINT TW_DOMPER_TC_MUNDEL_FK FOREIGN KEY (N_IDMUNICIPIODELEGACION) REFERENCES TC_MUNICIPIODELEGACIONES (N_ID));



ALTER TABLE TW_DOMICILIOPERSONAL
	ADD (CONSTRAINT TW_DOMPER_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_ESCUELACIFRASCONTROL
	ADD (CONSTRAINT TW_ESCCIFCON_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ESCUELACIFRASCONTROL
	ADD (CONSTRAINT TW_ESCCIFCON_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_ESCUELACIFRASCONTROL
	ADD (CONSTRAINT TW_ESCCIFCON_TC_GRADOESC_FK FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIA
	ADD (CONSTRAINT TW_ESCUINC_TC_CICLOESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIA
	ADD (CONSTRAINT TW_ESCUINC_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIABITACORA
	ADD (CONSTRAINT TW_ESCINCBIT_TW_ESCINC_FK FOREIGN KEY (N_IDESCUELAINCIDENCIA) REFERENCES TW_ESCUELAINCIDENCIA (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIABITACORA
	ADD (CONSTRAINT TW_ESCUELAINCIDENCIABITAC_FK2 FOREIGN KEY (N_IDBITACORA) REFERENCES TW_ESCUELAINCIDENCIABITACORA (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIADOCTOS
	ADD (CONSTRAINT TW_ESCINCDOCTO_TW_ESCINC_FK FOREIGN KEY (N_IDESCUELAINCIDENCIA) REFERENCES TW_ESCUELAINCIDENCIA (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIAEVENTO
	ADD (CONSTRAINT TW_ESCINCEVE_TW_ESCINC_FK FOREIGN KEY (N_IDESCUELAINCIDENCIA) REFERENCES TW_ESCUELAINCIDENCIA (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIAEVENTO
	ADD (CONSTRAINT TW_ESCUELAINCIDENCIAEVENT_FK1 FOREIGN KEY (N_IDESCUELAEVENTO) REFERENCES TC_ESCUELAEVENTO (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIAPER
	ADD (CONSTRAINT TW_ESCINCPER_TC_ALUMNO_FK FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIAPER
	ADD (CONSTRAINT TW_ESCINCPER_TC_INCTIPPER_FK FOREIGN KEY (N_IDINCIDENCIATIPOPERSONA) REFERENCES TC_INCIDENCIATIPOPERSONA (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIAPER
	ADD (CONSTRAINT TW_ESCINCPER_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_ESCUELAINCIDENCIAPER
	ADD (CONSTRAINT TW_ESCINCPER_TWESCINC_FK FOREIGN KEY (N_IDESCUELAINCIDENCIA) REFERENCES TW_ESCUELAINCIDENCIA (N_ID));



ALTER TABLE TW_ESCUELAINSIDENCIAAPOYOS
	ADD (CONSTRAINT TW_ESCINCAPO_TC_APOEXT_FK FOREIGN KEY (N_IDAPOYOSEXTERNOS) REFERENCES TC_APOYOSEXTERNOS (N_ID));



ALTER TABLE TW_ESCUELAINSIDENCIAAPOYOS
	ADD (CONSTRAINT TW_ESCINCAPO_TW_ESCINC_FK FOREIGN KEY (N_IDESCUELAINCIDENCIA) REFERENCES TW_ESCUELAINCIDENCIA (N_ID));



ALTER TABLE TW_ESCUELALIBROS
	ADD (CONSTRAINT TW_ESCLIBROS_TC_CICLOESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_ESCUELALIBROS
	ADD (CONSTRAINT TW_ESCLIBROS_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_ESCUELALIBROS
	ADD (CONSTRAINT TW_ESCLIBROS_TC_LIBROS_FK FOREIGN KEY (N_IDLIBROS) REFERENCES TC_LIBROS (N_ID));



ALTER TABLE TW_ESCUELALIBROSMOVS
	ADD (CONSTRAINT TW_ESCLIBROSMOV_TW_ESCLIB_FK FOREIGN KEY (N_IDESCUELALIBROS) REFERENCES TW_ESCUELALIBROS (N_ID));



ALTER TABLE TW_FLUJO_DATOS_COMPLEMENT
	ADD (CONSTRAINT TW_FLUJO_DATOS_COMPLEMENT_FK1 FOREIGN KEY (N_IDFLUJOBITACORA) REFERENCES TW_FLUJOBITACORA (N_ID));



ALTER TABLE TW_FLUJOBITACORA
	ADD (CONSTRAINT TW_FLUJOBIT_TC_FLUJOGESDET_FK FOREIGN KEY (N_IDFLUJOGESTIONDET) REFERENCES TC_FLUJOGESTIONDET (N_ID));



ALTER TABLE TW_FLUJOBITACORA
	ADD (CONSTRAINT TW_FLUJOB_TC_FLUJO_M_R_FK FOREIGN KEY (N_IDFLUJO_MOTIVO_RECHAZO) REFERENCES TC_FLUJO_MOTIVO_RECHAZO (N_ID));



ALTER TABLE TW_FOLIOSASIGNADOS
	ADD (CONSTRAINT CICLOESC_FOLASIG FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_FOLIOSASIGNADOS
	ADD (CONSTRAINT GRAESC_FOLASI FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE TW_FOLIOSASIGNADOS
	ADD (CONSTRAINT NIVEDU_FOLASIG FOREIGN KEY (N_IDNIVELEDUCATIVO) REFERENCES TC_NIVELEDUCATIVO (N_ID));



ALTER TABLE TW_FOLIOSASIGNADOS
	ADD (CONSTRAINT TIPFOL_FOLASI FOREIGN KEY (N_IDTIPOFOLIO) REFERENCES TC_TIPOSFOLIOS (N_ID));



ALTER TABLE TW_FUNCION_GRUPO
	ADD (CONSTRAINT TW_FUN_GRUPO_TC_FUNCIONREAL_FK FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TW_FUNCION_GRUPO
	ADD (CONSTRAINT TW_FUN_GRUPO_TC_GROUP_FK FOREIGN KEY (N_GRUPO_ID) REFERENCES TC_GROUP (N_ID));



ALTER TABLE TW_GENERAARCHIVOS
	ADD (CONSTRAINT TW_GENERAARCHIVOS_TW_USER_FK FOREIGN KEY (N_IDUSER) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_GENERAARCHIVOS
	ADD (CONSTRAINT TW_GENERAARCH_TC_PROCESOS_FK FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TW_GROUP_AUTH
	ADD (CONSTRAINT TW_GROUP_AUTH_TC_AUTHORIT_FK1 FOREIGN KEY (N_AUTH_ID) REFERENCES TC_AUTHORITIES (N_ID));



ALTER TABLE TW_HISTORIAACADEMICA
	ADD (CONSTRAINT TW_HISACA_TC_AREACONOC_FK FOREIGN KEY (N_IDAREADECONOCIMIENTO) REFERENCES TC_AREADECONOCIMIENTO (N_ID));



ALTER TABLE TW_HISTORIAACADEMICA
	ADD (CONSTRAINT TW_HISACA_TC_ESCOLARIDAD_FK FOREIGN KEY (N_IDESCOLARIDAD) REFERENCES TC_ESCOLARIDAD (N_ID));



ALTER TABLE TW_HISTORIAACADEMICA
	ADD (CONSTRAINT TW_HISACA_TC_ESTUDIOESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESTUDIOESCUELA (N_ID));



ALTER TABLE TW_HISTORIAACADEMICA
	ADD (CONSTRAINT TW_HISACA_TC_NIVELESTUDIO_FK FOREIGN KEY (N_IDNIVELESTUDIO) REFERENCES TC_NIVELESTUDIO (N_ID));



ALTER TABLE TW_HISTORIAACADEMICA
	ADD (CONSTRAINT TW_HISACA_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_IDIOMAS
	ADD (CONSTRAINT TW_IDIOMAS_TC_IDIOMAS_FK FOREIGN KEY (N_IDIDIOMA) REFERENCES TC_IDIOMAS (N_ID));



ALTER TABLE TW_IDIOMAS
	ADD (CONSTRAINT TW_IDIOMAS_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_EST_IMN_FK FOREIGN KEY (N_ESTADOSINMUEBLE) REFERENCES TC_ESTADO_INMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_MAT_CONS_FK FOREIGN KEY (N_IDMATERIALCONSTRUCCION) REFERENCES TC_MATERIALCONSTRUCCION (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_MEDIDAS_FK1 FOREIGN KEY (N_IDMEDIDAS) REFERENCES TC_MEDIDAS (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_PARC_ESC_FK FOREIGN KEY (N_IDPARCELASESCOLARES) REFERENCES TC_PARCELASESCOLARES (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_PROP_CONS_FK FOREIGN KEY (N_IDPROPIETARIOSCONSTRUCCION) REFERENCES TC_PROPIETARIOSCONSTRUCCION (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_PROP_INM_FK FOREIGN KEY (N_IDPROPIEDADINMUEBLE) REFERENCES TC_PROPIEDADINMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_TIPOTERREN_FK1 FOREIGN KEY (N_IDTIPOTERRENO) REFERENCES TC_TIPOTERRENO (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_TIPO_CONS_FK FOREIGN KEY (N_IDTIPOCONSTRUCCION) REFERENCES TC_TIPO_CONSTRUCCION (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INMUEBLE_TC_TIPO_INM_FK FOREIGN KEY (N_IDTIPOINMUEBLE) REFERENCES TC_TIPOINMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INM_ZONAFED_FK FOREIGN KEY (N_IDZONAFED) REFERENCES TC_ZONAFEDERAL (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INM_OCUP_FK FOREIGN KEY (N_IDOCUPACIONINMUEBLE) REFERENCES TC_OCUPACIONINMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TW_INM_USO_FK FOREIGN KEY (N_IDINMUEBLEUSO) REFERENCES TC_INMUEBLEUSO (N_ID));



ALTER TABLE TW_INMUEBLE
	ADD (CONSTRAINT TC_INMUEBLESITUACION_INM_FK FOREIGN KEY (N_IDSITUACION) REFERENCES TC_INMUEBLESITUACION (N_ID));



ALTER TABLE TW_INMUEBLE_IMAGEN
	ADD (CONSTRAINT TW_INMUEBLE_IMAGEN_TW_INM_FK1 FOREIGN KEY (N_INMUEBLE_ID) REFERENCES TW_INMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD (CONSTRAINT TW_INM_LOC_TC_EST_INM_FK FOREIGN KEY (N_ID_ESTADOINMUEBLE) REFERENCES TC_ESTADO_INMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD (CONSTRAINT TW_INM_LOC_TC_MATCONS_FK FOREIGN KEY (N_IDMATERIALCONSTRUCCION) REFERENCES TC_MATERIALCONSTRUCCION (N_ID));



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD (CONSTRAINT TW_INM_LOC_TC_TIPO_CONS_FK FOREIGN KEY (N_IDTIPOCONSTRUCCION) REFERENCES TC_TIPO_CONSTRUCCION (N_ID));



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD (CONSTRAINT TW_INM_LOC_TC_TIPO_LOCAL_FK FOREIGN KEY (N_ID_TIPOLOCAL) REFERENCES TC_TIPO_LOCAL (N_ID));



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD (CONSTRAINT TW_INM_LOC_TC_TIPO_SUP_FK FOREIGN KEY (N_IDTIPOSUPERFICIE) REFERENCES TC_TIPOSUPERFICIE (N_ID));



ALTER TABLE TW_INMUEBLE_LOCAL
	ADD (CONSTRAINT TW_INM_LOC_TW_INMUEBLE_FK FOREIGN KEY (N_IDINMUEBLE) REFERENCES TW_INMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT TW_INMDOM_TC_CIUDAD_FK FOREIGN KEY (N_IDCIUDAD) REFERENCES TC_CIUDAD (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT TW_INMDOM_TC_CODPOS_FK FOREIGN KEY (N_IDCODIGOPOSTAL) REFERENCES TC_CODIGOPOSTAL (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT TW_INMDOM_TC_COLONIA_FK FOREIGN KEY (N_IDCOLONIA) REFERENCES TC_COLONIA (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT TW_INMDOM_TC_ENTFED_FK FOREIGN KEY (N_IDENTIDADFEDERATIVA) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT TW_INMDOM_TC_MUNDEL_FK FOREIGN KEY (N_IDMUNICIPIO) REFERENCES TC_MUNICIPIODELEGACIONES (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT N_IDINMUEBLE_FK FOREIGN KEY (N_IDINMUEBLE) REFERENCES TW_INMUEBLE (N_ID));



ALTER TABLE TW_INMUEBLEDOMICILIO
	ADD (CONSTRAINT TW_INMDOM_TC_TIPOVIAL_FK FOREIGN KEY (N_IDTIPOVIALIDAD) REFERENCES TC_TIPOVIALIDAD (N_ID));



ALTER TABLE TW_INMUEBLESERVICIOS
	ADD (CONSTRAINT TW_INMUEBLESER_TC_SERVICIO_FK FOREIGN KEY (N_IDSERVICIO) REFERENCES TC_SERVICIO (N_ID));



ALTER TABLE TW_INMUEBLESERVICIOS
	ADD (CONSTRAINT TW_INMUEBLESER_TW_INMUEBLE_FK FOREIGN KEY (N_IDINMUEBLE) REFERENCES TW_INMUEBLE (N_ID));



ALTER TABLE TW_MOVPLAZAPERSONAPLAZAS
	ADD (CONSTRAINT TW_MOVPPPLAZAS_PLAZA FOREIGN KEY (N_IDPLAZA) REFERENCES TC_PLAZA (N_ID));



ALTER TABLE TW_MOVPLAZAPERSONAPLAZAS
	ADD (CONSTRAINT TW_MOVPLAZAPERP_TR_MOVPLAZAPFK FOREIGN KEY (N_IDMOVPLAZAPERSONA) REFERENCES TR_MOVPLAZAPERSONA (N_ID));



ALTER TABLE TW_NOPROMOPLANDEACCION
	ADD (CONSTRAINT TW_NOPROPLAACC_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_NOPROMOPLANDEACCION
	ADD (CONSTRAINT TW_NOPROPLAACC_TW_MOTPLAACC_FK FOREIGN KEY (N_IDMOTIVOPLANDEACCION) REFERENCES TC_MOTIVOPLANDEACCION (N_ID));



ALTER TABLE TW_NOPROMOPLANDEACCION
	ADD (CONSTRAINT TW_NOPROPLAACC_TC_CICESC_FK FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_NOPROMOPLANDEACCION
	ADD (CONSTRAINT TW_NOPROPLAACC_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_PERSONAFALTAS
	ADD (CONSTRAINT TW_PERFAL_TC_CICLOESC_FK FOREIGN KEY (N_CICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_PERSONAFALTAS
	ADD (CONSTRAINT TW_PERFAL_TC_CLASIFINCID_FK FOREIGN KEY (N_IDCLASIFICACIONINC) REFERENCES TC_CLASIFICAINCIDENCIAS (N_ID));



ALTER TABLE TW_PERSONAFALTAS
	ADD (CONSTRAINT TW_PERFAL_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONA) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_PERSONAFALTAS
	ADD (CONSTRAINT TW_PERFAL_TC_TIPOMOV_FK FOREIGN KEY (N_IDTIPOMOVIMIENTO) REFERENCES TC_TIPOMOVIMIENTO_IR (N_ID));



ALTER TABLE TW_PERSONAFALTAS
	ADD (CONSTRAINT TW_PERFAL_TR_PERSHORHIS_FK FOREIGN KEY (N_IDPERSONAHORARIO) REFERENCES TR_PERSONAHORARIOHISTORICO (N_ID));



ALTER TABLE TW_PERSONAFALTASCOMENT
	ADD (CONSTRAINT TW_PERFALCOM_TR_INASISNOTAS_FK FOREIGN KEY (N_IDINASISNOTAS) REFERENCES TR_INASISTENCIASNOTAS (N_ID));



ALTER TABLE TW_PERSONAFALTASJUSTIFICA
	ADD (CONSTRAINT TW_PERFALJUS_TW_PERFAL_FK FOREIGN KEY (N_IDPERSONAFALTAS) REFERENCES TW_PERSONAFALTAS (N_ID));



ALTER TABLE TW_PERSONALCICLOESCOLAR
	ADD (CONSTRAINT TW_PERSONALCICLOESCOLAR__FK1 FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_PERSONALCICLOESCOLAR
	ADD (CONSTRAINT TW_PERSONALCICLOESCOLAR__FK2 FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_PERSONALCICLOESCOLAR
	ADD (CONSTRAINT TW_PERSONALCICLOESCOLAR__FK3 FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_PERSONALCORREO
	ADD (CONSTRAINT TW_PERCOR_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_PERSONALDIALECTO
	ADD (CONSTRAINT TW_PERDIA_TC_DIALINDIGENA_FK FOREIGN KEY (N_IDPERSONALDIALECTO) REFERENCES TC_DIALECTOINDIGENA (N_ID));



ALTER TABLE TW_PERSONALDIALECTO
	ADD (CONSTRAINT TW_PERDIA_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_PERSONALTELEFONOS
	ADD (CONSTRAINT TW_PER_TEL_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_PERSONALTELEFONOS
	ADD (CONSTRAINT TW_PER_TEL_TC_TIPOTELEFONO_FK FOREIGN KEY (N_IDTIPOTELEFONO) REFERENCES TC_TIPOTELEFONO (N_ID));



ALTER TABLE TW_PLANTILLAAUTORIZADA
	ADD (CONSTRAINT TW_PLANAUT_TC_ESCUELAAULA_FK FOREIGN KEY (N_IDESCUELASAULA) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TW_PLANTILLAAUTORIZADA
	ADD (CONSTRAINT TW_PLANAUT_TC_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_PLANTILLAAUTORIZADA
	ADD (CONSTRAINT TW_PLANAUT_TC_PERPLA_FK FOREIGN KEY (N_IDPERSONAPLAZA) REFERENCES TC_PERSONALPLAZA (N_ID));



ALTER TABLE TW_PLANTILLAAUTORIZADA
	ADD (CONSTRAINT TW_PLANAUT_TC_REGLAPLAN_FK FOREIGN KEY (N_IDREGLASPLANTILLA) REFERENCES TC_REGLAPLANTILLA (N_ID));



ALTER TABLE TW_PROMOCONCONDICION
	ADD (CONSTRAINT TW_PCONCOND_TC_MOTPLAN_FK FOREIGN KEY (N_IDMOTIVOPLANDEACCION) REFERENCES TC_MOTIVOPLANDEACCION (N_ID));



ALTER TABLE TW_PROMOCONCONDICION
	ADD (CONSTRAINT TW_PCONCOND_TW_ALUCICESC_FK FOREIGN KEY (N_IDALUMNOCICLOESCOLAR) REFERENCES TW_ALUMNOCICLOESCOLAR (N_ID));



ALTER TABLE TW_PROMOCONCONDICIONDOC
	ADD (CONSTRAINT TW_PCONCONDOC_TW_PCONCON_FK FOREIGN KEY (N_IDPROMOCONCONDICION) REFERENCES TW_PROMOCONCONDICION (N_ID));



ALTER TABLE TW_REPEVA
	ADD (CONSTRAINT TW_REPEVA_ESTATUS_FK FOREIGN KEY (N_IDESTATUS) REFERENCES TC_REPEVAESTATUS (N_ID));



ALTER TABLE TW_REPEVA
	ADD (CONSTRAINT TW_REPEVA_ESCUELA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_REPEVAZONA
	ADD (CONSTRAINT TW_REPEVAZONA_REPEVA_FK FOREIGN KEY (N_IDREPEVA) REFERENCES TW_REPEVA (N_ID));



ALTER TABLE TW_REPEVAZONA
	ADD (CONSTRAINT TW_REPEVAZONA_ESTATUS_FK FOREIGN KEY (N_IDESTATUS) REFERENCES TC_REPEVAESTATUS (N_ID));



ALTER TABLE TW_REPEVAZONA
	ADD (CONSTRAINT TW_REPEVAZONA_ZONA_FK FOREIGN KEY (N_IDZONA) REFERENCES TC_ZONAESCOLAR (N_ID));



ALTER TABLE TW_REPORTESESPECIALES
	ADD (CONSTRAINT TW_REPESP_TC_PERSONAL_FK FOREIGN KEY (N_IDPERSONAL) REFERENCES TC_PERSONAL (N_ID));



ALTER TABLE TW_REPORTESESPECIALES
	ADD (CONSTRAINT TW_REPESP_TC_REPESP_FK FOREIGN KEY (N_IDREPORTESESPECIALES) REFERENCES TC_REPORTESESPECIALES (N_ID));



ALTER TABLE TW_SEGREPORTES
	ADD (CONSTRAINT REFTC_CICLOESCOLAR567 FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_SEGREPORTES
	ADD (CONSTRAINT REFTC_ESCUELA570 FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_SEGREPORTES
	ADD (CONSTRAINT REFTC_PROCESOS568 FOREIGN KEY (N_IDPROCESO) REFERENCES TC_PROCESOS (N_ID));



ALTER TABLE TW_SEGREPORTES
	ADD (CONSTRAINT TW_SEGREPORTES_TW_EST911_FK FOREIGN KEY (N_IDEST911) REFERENCES TW_EST911 (N_ID));



ALTER TABLE TW_SEGREPORTES
	ADD (CONSTRAINT TW_SEGREPORTES_TC_911MOTIVO_FK FOREIGN KEY (N_ID911MOTIVO) REFERENCES TC_911MOTIVO (N_ID));



ALTER TABLE TW_SERVICIODETALLE
	ADD (CONSTRAINT TW_SERDET_TC_DETSERFK FOREIGN KEY (N_IDDETALLESERVICIO) REFERENCES TC_DETALLESERVICIO (N_ID));



ALTER TABLE TW_SERVICIODETALLE
	ADD (CONSTRAINT TW_SERDET_TC_EST_INM_FK FOREIGN KEY (N_IDESTATUSDETALLE) REFERENCES TC_ESTADO_INMUEBLE (N_ID));



ALTER TABLE TW_SERVICIODETALLE
	ADD (CONSTRAINT TW_SERDET_TW_INMSER_FK FOREIGN KEY (N_IDINMUEBLESERVICIO) REFERENCES TW_INMUEBLESERVICIOS (N_ID) ON DELETE CASCADE);



ALTER TABLE TW_SOLICITUDPERSONA
	ADD (CONSTRAINT TW_SOLICITUDPERSONA_TC_CI_FK1 FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE TW_SOLICITUDPERSONA
	ADD (CONSTRAINT TW_SOLICITUDPERSONA_TC_ES_FK1 FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE TW_SOLICITUDPERSONA
	ADD (CONSTRAINT TW_SOLICITUDPERSONA_TC_FU_FK1 FOREIGN KEY (N_IDFUNCIONREAL) REFERENCES TC_FUNCIONREAL (N_ID));



ALTER TABLE TW_TOTALESCALIFICACIONESGRUPO
	ADD (CONSTRAINT TW_TOTCALG_TC_ESCUELA_FK FOREIGN KEY (N_IDESUELASAULAS) REFERENCES TC_ESCUELAAULA (N_ID));



ALTER TABLE TW_TOTALESCALIFICACIONESGRUPO
	ADD (CONSTRAINT TW_TOTCALG_TC_TIPOASIGPER_FK FOREIGN KEY (N_TIPOASIGNATURAPERIODOS) REFERENCES TC_TIPOASIGNATURAPERIODOS (N_ID));



ALTER TABLE TW_TOTALESCALIFICACIONESGRUPO
	ADD (CONSTRAINT TW_TOTCALG_TC_TIPOASIG_FK FOREIGN KEY (N_IDTIPOASIGNATURA) REFERENCES TC_TIPOASIGNATURA (N_ID));



ALTER TABLE TW_USER_GROUP
	ADD (CONSTRAINT TW_USER_GROUP_TC_GROUP_FK FOREIGN KEY (N_GROUP_ID) REFERENCES TC_GROUP (N_ID));



ALTER TABLE TW_USER_GROUP
	ADD (CONSTRAINT TW_USER_GROUP_TW_USER_FK FOREIGN KEY (N_USER_ID) REFERENCES TW_USER (N_ID));



ALTER TABLE TW_USUARIODETALLE
	ADD (CONSTRAINT TW_USUDET_TC_ENTFED_FK FOREIGN KEY (N_IDESTADONACIMIENTO) REFERENCES TC_ENTIDADESFEDERATIVAS (N_ID));



ALTER TABLE TW_USUARIODETALLE
	ADD (CONSTRAINT TW_USUDET_TC_ESCOLARIDAD_FK FOREIGN KEY (N_IDESCOLARIDAD) REFERENCES TC_ESCOLARIDAD (N_ID));



ALTER TABLE TW_USUARIODETALLE
	ADD (CONSTRAINT TW_USUDET_TC_PARENTESCO_FK FOREIGN KEY (N_IDPARENTESCO) REFERENCES TC_PARENTESCO (N_ID));



ALTER TABLE TW_USUARIODETALLE
	ADD (CONSTRAINT TW_USUDET_TC_SEXO_FK FOREIGN KEY (N_IDSEXO) REFERENCES TC_SEXO (N_ID));



ALTER TABLE TW_USUARIODETALLE
	ADD (CONSTRAINT TW_USUDET_TW_USER_FK FOREIGN KEY (N_USER_ID) REFERENCES TW_USER (N_ID));



ALTER TABLE US_ALUMNOINCIDENCIA
	ADD (CONSTRAINT ALUMNO_INCIDENCIA FOREIGN KEY (N_IDINSCRIPCION) REFERENCES US_INSCRIPCION (N_IDINSCRIPCION));



ALTER TABLE US_ALUMNOINCIDENCIA
	ADD (CONSTRAINT ALUMNO_ESTATUS FOREIGN KEY (N_IDESTATUS) REFERENCES US_ESTATUS (N_IDESTATUS));



ALTER TABLE US_ALUMNOINCIDENCIA
	ADD (CONSTRAINT TIPO_INCIDENCIA_INCIDENCIA FOREIGN KEY (N_IDTIPOINCIDENCIA) REFERENCES US_TIPOINCIDENCIA (N_IDTIPOINCIDENCIA));



ALTER TABLE US_ALUMNOINCIDENCIA
	ADD (CONSTRAINT ALUMNO_USER FOREIGN KEY (N_IDUSUARIO) REFERENCES TW_USER (N_ID));



ALTER TABLE US_ASIGNATURA
	ADD (CONSTRAINT TIPOASIG_ASIGNATURA FOREIGN KEY (N_IDTIPOASIGNATURA) REFERENCES US_TIPOASIGNATURA (N_IDTIPOASIGNATURA));



ALTER TABLE US_ASIGNATURA
	ADD (CONSTRAINT GRADOES_ASIGNATURA FOREIGN KEY (N_IDGRADOESCOLAR) REFERENCES TC_GRADOESCOLAR (N_ID));



ALTER TABLE US_ASIGNATURA
	ADD (CONSTRAINT CAMPFORMATIVO_ASIGNATURA FOREIGN KEY (N_IDCAMPOFORMATIVO) REFERENCES TC_CAMPOFORMATIVO (N_ID));



ALTER TABLE US_ESCUELAAULA
	ADD (CONSTRAINT USOAULA_ESCUELAAULA_FK FOREIGN KEY (N_IDUSOAULA) REFERENCES TC_USOAULAS (N_ID));



ALTER TABLE US_ESCUELAAULA
	ADD (CONSTRAINT INMUEBLELOCAL_ESCUELAAULA_FK FOREIGN KEY (N_IDINMUEBLELOCAL) REFERENCES TW_INMUEBLE_LOCAL (N_ID));



ALTER TABLE US_ESCUELAAULA
	ADD (CONSTRAINT ESCUELA_ESCUELAAULA_FK FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT US_INSCRIP_GRUPOTALLER_FK FOREIGN KEY (N_IDGRUPOTALLER) REFERENCES US_GRUPOTALLER (N_IDGRUPOTALLER));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT INSCRIPCION_TIPO FOREIGN KEY (N_IDTIPOINSCRIPCION) REFERENCES US_TIPOINSCRIPCION (N_IDTIPOINSCRIPCION));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT GRUPOS_INSCRIPCION FOREIGN KEY (N_IDGRUPO) REFERENCES TC_GRUPOS (N_ID));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT ESTATUS_INSCRIPCION FOREIGN KEY (N_IDESTATUS) REFERENCES US_ESTATUS (N_IDESTATUS));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT ESCUELA_INSCRIPCION FOREIGN KEY (N_IDESCUELA) REFERENCES TC_ESCUELA (N_ID));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT CICLOESCOLAR_INSCRIPCION FOREIGN KEY (N_IDCICLOESCOLAR) REFERENCES TC_CICLOESCOLAR (N_ID));



ALTER TABLE US_INSCRIPCION
	ADD (CONSTRAINT ALUMNO_INSCRIPCION FOREIGN KEY (N_IDALUMNO) REFERENCES TC_ALUMNO (N_ID));



ALTER TABLE US_PLANESTUDIODETALLE
	ADD (CONSTRAINT US_PED_TURNO FOREIGN KEY (N_IDTURNOESCOLAR) REFERENCES TC_TURNOSESCOLAR (N_ID));



ALTER TABLE US_PLANESTUDIODETALLE
	ADD (CONSTRAINT PLANEST_PLANESTDET FOREIGN KEY (N_IDPLANESTUDIOS) REFERENCES TC_PLANESTUDIOS (N_ID));



ALTER TABLE US_PLANESTUDIODETALLE
	ADD (CONSTRAINT ASIGNATURA_PLANESTDET FOREIGN KEY (N_IDASIGNATURA) REFERENCES US_ASIGNATURA (N_IDASIGNATURA));



CREATE  TRIGGER  tD_FC_BIEN AFTER DELETE ON FC_BIEN for each row
-- ERwin Builtin Trigger
-- DELETE trigger on FC_BIEN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* FC_BIEN  FR_PROGRAMABIEN on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000eb2b", PARENT_OWNER="", PARENT_TABLE="FC_BIEN"
    CHILD_OWNER="", CHILD_TABLE="FR_PROGRAMABIEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FC_BIEN_PROGRABIEN", FK_COLUMNS="N_IDBIEN" */
    SELECT count(*) INTO NUMROWS
      FROM FR_PROGRAMABIEN
      WHERE
        /*  %JoinFKPK(FR_PROGRAMABIEN,:%Old," = "," AND") */
        FR_PROGRAMABIEN.N_IDBIEN = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_BIEN because FR_PROGRAMABIEN exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_FC_BIEN AFTER UPDATE ON FC_BIEN for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on FC_BIEN 
DECLARE NUMROWS INTEGER;
BEGIN
  /* FC_BIEN  FR_PROGRAMABIEN on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000e9f9", PARENT_OWNER="", PARENT_TABLE="FC_BIEN"
    CHILD_OWNER="", CHILD_TABLE="FR_PROGRAMABIEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FC_BIEN_PROGRABIEN", FK_COLUMNS="N_IDBIEN" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FR_PROGRAMABIEN
      SET
        /* %SetFK(FR_PROGRAMABIEN,NULL) */
        FR_PROGRAMABIEN.N_IDBIEN = NULL
      WHERE
        /* %JoinFKPK(FR_PROGRAMABIEN,:%Old," = ",",") */
        FR_PROGRAMABIEN.N_IDBIEN = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_FC_MEDIOPAGO AFTER DELETE ON FC_MEDIOPAGO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on FC_MEDIOPAGO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* FC_MEDIOPAGO  FB_PROGESCMEDIOPAGO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00021490", PARENT_OWNER="", PARENT_TABLE="FC_MEDIOPAGO"
    CHILD_OWNER="", CHILD_TABLE="FB_PROGESCMEDIOPAGO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_MEDIOPAGO_FBPROGESC", FK_COLUMNS="N_IDMEDIOPAGO" */
    SELECT count(*) INTO NUMROWS
      FROM FB_PROGESCMEDIOPAGO
      WHERE
        /*  %JoinFKPK(FB_PROGESCMEDIOPAGO,:%Old," = "," AND") */
        FB_PROGESCMEDIOPAGO.N_IDMEDIOPAGO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_MEDIOPAGO because FB_PROGESCMEDIOPAGO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* FC_MEDIOPAGO  FW_PROGRAMAESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_MEDIOPAGO"
    CHILD_OWNER="", CHILD_TABLE="FW_PROGRAMAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_MEDIOPAGO_PROGESC", FK_COLUMNS="N_IDMEDIOPAGO" */
    SELECT count(*) INTO NUMROWS
      FROM FW_PROGRAMAESCUELA
      WHERE
        /*  %JoinFKPK(FW_PROGRAMAESCUELA,:%Old," = "," AND") */
        FW_PROGRAMAESCUELA.N_IDMEDIOPAGO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_MEDIOPAGO because FW_PROGRAMAESCUELA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_FC_MEDIOPAGO AFTER UPDATE ON FC_MEDIOPAGO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on FC_MEDIOPAGO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* FC_MEDIOPAGO  FB_PROGESCMEDIOPAGO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00022178", PARENT_OWNER="", PARENT_TABLE="FC_MEDIOPAGO"
    CHILD_OWNER="", CHILD_TABLE="FB_PROGESCMEDIOPAGO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_MEDIOPAGO_FBPROGESC", FK_COLUMNS="N_IDMEDIOPAGO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FB_PROGESCMEDIOPAGO
      SET
        /* %SetFK(FB_PROGESCMEDIOPAGO,NULL) */
        FB_PROGESCMEDIOPAGO.N_IDMEDIOPAGO = NULL
      WHERE
        /* %JoinFKPK(FB_PROGESCMEDIOPAGO,:%Old," = ",",") */
        FB_PROGESCMEDIOPAGO.N_IDMEDIOPAGO = :old.N_ID;
  END IF;

  /* FC_MEDIOPAGO  FW_PROGRAMAESCUELA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_MEDIOPAGO"
    CHILD_OWNER="", CHILD_TABLE="FW_PROGRAMAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_MEDIOPAGO_PROGESC", FK_COLUMNS="N_IDMEDIOPAGO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FW_PROGRAMAESCUELA
      SET
        /* %SetFK(FW_PROGRAMAESCUELA,NULL) */
        FW_PROGRAMAESCUELA.N_IDMEDIOPAGO = NULL
      WHERE
        /* %JoinFKPK(FW_PROGRAMAESCUELA,:%Old," = ",",") */
        FW_PROGRAMAESCUELA.N_IDMEDIOPAGO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_FC_PROGRAMA AFTER DELETE ON FC_PROGRAMA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on FC_PROGRAMA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* FC_PROGRAMA  FW_PROGRAMAESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004232f", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="FW_PROGRAMAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_PROGESC", FK_COLUMNS="N_IDPROGRAMA" */
    SELECT count(*) INTO NUMROWS
      FROM FW_PROGRAMAESCUELA
      WHERE
        /*  %JoinFKPK(FW_PROGRAMAESCUELA,:%Old," = "," AND") */
        FW_PROGRAMAESCUELA.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_PROGRAMA because FW_PROGRAMAESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* FC_PROGRAMA  FR_PROGRAMABIEN on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="FR_PROGRAMABIEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_FR_PROGRAB", FK_COLUMNS="N_IDPROGRAMA" */
    SELECT count(*) INTO NUMROWS
      FROM FR_PROGRAMABIEN
      WHERE
        /*  %JoinFKPK(FR_PROGRAMABIEN,:%Old," = "," AND") */
        FR_PROGRAMABIEN.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_PROGRAMA because FR_PROGRAMABIEN exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* FC_PROGRAMA  TR_PROG_USUARIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="TR_PROG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_USER", FK_COLUMNS="N_IDPROGRAMA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PROG_USUARIOS
      WHERE
        /*  %JoinFKPK(TR_PROG_USUARIOS,:%Old," = "," AND") */
        TR_PROG_USUARIOS.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_PROGRAMA because TR_PROG_USUARIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* FC_PROGRAMA  FR_PROG_COMUNICADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="FR_PROG_COMUNICADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_COM", FK_COLUMNS="N_IDPROGRAMA" */
    SELECT count(*) INTO NUMROWS
      FROM FR_PROG_COMUNICADO
      WHERE
        /*  %JoinFKPK(FR_PROG_COMUNICADO,:%Old," = "," AND") */
        FR_PROG_COMUNICADO.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FC_PROGRAMA because FR_PROG_COMUNICADO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_FC_PROGRAMA AFTER UPDATE ON FC_PROGRAMA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on FC_PROGRAMA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* FC_PROGRAMA  FW_PROGRAMAESCUELA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00046d4b", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="FW_PROGRAMAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_PROGESC", FK_COLUMNS="N_IDPROGRAMA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FW_PROGRAMAESCUELA
      SET
        /* %SetFK(FW_PROGRAMAESCUELA,NULL) */
        FW_PROGRAMAESCUELA.N_IDPROGRAMA = NULL
      WHERE
        /* %JoinFKPK(FW_PROGRAMAESCUELA,:%Old," = ",",") */
        FW_PROGRAMAESCUELA.N_IDPROGRAMA = :old.N_ID;
  END IF;

  /* FC_PROGRAMA  FR_PROGRAMABIEN on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="FR_PROGRAMABIEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_FR_PROGRAB", FK_COLUMNS="N_IDPROGRAMA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FR_PROGRAMABIEN
      SET
        /* %SetFK(FR_PROGRAMABIEN,NULL) */
        FR_PROGRAMABIEN.N_IDPROGRAMA = NULL
      WHERE
        /* %JoinFKPK(FR_PROGRAMABIEN,:%Old," = ",",") */
        FR_PROGRAMABIEN.N_IDPROGRAMA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* FC_PROGRAMA  TR_PROG_USUARIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="TR_PROG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_USER", FK_COLUMNS="N_IDPROGRAMA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PROG_USUARIOS
      WHERE
        /*  %JoinFKPK(TR_PROG_USUARIOS,:%Old," = "," AND") */
        TR_PROG_USUARIOS.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update FC_PROGRAMA because TR_PROG_USUARIOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* FC_PROGRAMA  FR_PROG_COMUNICADO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="FR_PROG_COMUNICADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROG_COM", FK_COLUMNS="N_IDPROGRAMA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM FR_PROG_COMUNICADO
      WHERE
        /*  %JoinFKPK(FR_PROG_COMUNICADO,:%Old," = "," AND") */
        FR_PROG_COMUNICADO.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update FC_PROGRAMA because FR_PROG_COMUNICADO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_FW_PROGRAMAESCUELA AFTER DELETE ON FW_PROGRAMAESCUELA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on FW_PROGRAMAESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* FW_PROGRAMAESCUELA  FB_PROGRAMAESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00024c20", PARENT_OWNER="", PARENT_TABLE="FW_PROGRAMAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="FB_PROGRAMAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROGESC_LOGPROGESC", FK_COLUMNS="N_IDPROGRAMAESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM FB_PROGRAMAESCUELA
      WHERE
        /*  %JoinFKPK(FB_PROGRAMAESCUELA,:%Old," = "," AND") */
        FB_PROGRAMAESCUELA.N_IDPROGRAMAESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FW_PROGRAMAESCUELA because FB_PROGRAMAESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* FW_PROGRAMAESCUELA  FB_PROGRAMAESCUELAMONTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FW_PROGRAMAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="FB_PROGRAMAESCUELAMONTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROGESC_LOGMON", FK_COLUMNS="N_IDPROGRAMAESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM FB_PROGRAMAESCUELAMONTO
      WHERE
        /*  %JoinFKPK(FB_PROGRAMAESCUELAMONTO,:%Old," = "," AND") */
        FB_PROGRAMAESCUELAMONTO.N_IDPROGRAMAESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE FW_PROGRAMAESCUELA because FB_PROGRAMAESCUELAMONTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_FW_PROGRAMAESCUELA AFTER UPDATE ON FW_PROGRAMAESCUELA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on FW_PROGRAMAESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* FW_PROGRAMAESCUELA  FB_PROGRAMAESCUELA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0002483e", PARENT_OWNER="", PARENT_TABLE="FW_PROGRAMAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="FB_PROGRAMAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROGESC_LOGPROGESC", FK_COLUMNS="N_IDPROGRAMAESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FB_PROGRAMAESCUELA
      SET
        /* %SetFK(FB_PROGRAMAESCUELA,NULL) */
        FB_PROGRAMAESCUELA.N_IDPROGRAMAESCUELA = NULL
      WHERE
        /* %JoinFKPK(FB_PROGRAMAESCUELA,:%Old," = ",",") */
        FB_PROGRAMAESCUELA.N_IDPROGRAMAESCUELA = :old.N_ID;
  END IF;

  /* FW_PROGRAMAESCUELA  FB_PROGRAMAESCUELAMONTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FW_PROGRAMAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="FB_PROGRAMAESCUELAMONTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROGESC_LOGMON", FK_COLUMNS="N_IDPROGRAMAESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE FB_PROGRAMAESCUELAMONTO
      SET
        /* %SetFK(FB_PROGRAMAESCUELAMONTO,NULL) */
        FB_PROGRAMAESCUELAMONTO.N_IDPROGRAMAESCUELA = NULL
      WHERE
        /* %JoinFKPK(FB_PROGRAMAESCUELAMONTO,:%Old," = ",",") */
        FB_PROGRAMAESCUELAMONTO.N_IDPROGRAMAESCUELA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_IB_CARGA AFTER DELETE ON IB_CARGA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on IB_CARGA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_PRI_ARCHSIIEWEB on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00089413", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PRI_ARCHSIIEWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFIB_CARGA235", FK_COLUMNS="N_ID_CARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PRI_ARCHSIIEWEB
      WHERE
        /*  %JoinFKPK(IB_CARGA_PRI_ARCHSIIEWEB,:%Old," = "," AND") */
        IB_CARGA_PRI_ARCHSIIEWEB.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_PRI_ARCHSIIEWEB exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_EXCREG_ARC on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_EXCREG_ARC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFIB_CARGA222", FK_COLUMNS="N_IDCARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_EXCREG_ARC
      WHERE
        /*  %JoinFKPK(IB_CARGA_EXCREG_ARC,:%Old," = "," AND") */
        IB_CARGA_EXCREG_ARC.N_IDCARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_EXCREG_ARC exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_EXCEPCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_EXCEPCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IC_CARGA_EXCEP_FK", FK_COLUMNS="N_IDCARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_EXCEPCIONES
      WHERE
        /*  %JoinFKPK(IB_CARGA_EXCEPCIONES,:%Old," = "," AND") */
        IB_CARGA_EXCEPCIONES.N_IDCARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_EXCEPCIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_PERSONAL_CORREO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PERSONAL_CORREO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_PERSONAL_CORREO", FK_COLUMNS="N_ID_CARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PERSONAL_CORREO
      WHERE
        /*  %JoinFKPK(IB_CARGA_PERSONAL_CORREO,:%Old," = "," AND") */
        IB_CARGA_PERSONAL_CORREO.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_PERSONAL_CORREO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_ARCHDGAP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_ARCHDGAP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_ARCHDGAP_FK", FK_COLUMNS="N_ID_CARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_ARCHDGAP
      WHERE
        /*  %JoinFKPK(IB_CARGA_ARCHDGAP,:%Old," = "," AND") */
        IB_CARGA_ARCHDGAP.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_ARCHDGAP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_PROCESAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PROCESAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_CPROCESAR_FK", FK_COLUMNS="N_ID_CARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PROCESAR
      WHERE
        /*  %JoinFKPK(IB_CARGA_PROCESAR,:%Old," = "," AND") */
        IB_CARGA_PROCESAR.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_PROCESAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_ARCHZIP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_ARCHZIP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_AZIP_FK", FK_COLUMNS="N_ID_CARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_ARCHZIP
      WHERE
        /*  %JoinFKPK(IB_CARGA_ARCHZIP,:%Old," = "," AND") */
        IB_CARGA_ARCHZIP.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_ARCHZIP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA  IB_CARGA_PRE_ARCHSIIEWEB on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PRE_ARCHSIIEWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_PRESIIEWEB_FK", FK_COLUMNS="N_ID_CARGA" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PRE_ARCHSIIEWEB
      WHERE
        /*  %JoinFKPK(IB_CARGA_PRE_ARCHSIIEWEB,:%Old," = "," AND") */
        IB_CARGA_PRE_ARCHSIIEWEB.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA because IB_CARGA_PRE_ARCHSIIEWEB exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_IB_CARGA AFTER UPDATE ON IB_CARGA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on IB_CARGA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_PRI_ARCHSIIEWEB on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0009a250", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PRI_ARCHSIIEWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFIB_CARGA235", FK_COLUMNS="N_ID_CARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PRI_ARCHSIIEWEB
      WHERE
        /*  %JoinFKPK(IB_CARGA_PRI_ARCHSIIEWEB,:%Old," = "," AND") */
        IB_CARGA_PRI_ARCHSIIEWEB.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_PRI_ARCHSIIEWEB exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_EXCREG_ARC on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_EXCREG_ARC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFIB_CARGA222", FK_COLUMNS="N_IDCARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_EXCREG_ARC
      WHERE
        /*  %JoinFKPK(IB_CARGA_EXCREG_ARC,:%Old," = "," AND") */
        IB_CARGA_EXCREG_ARC.N_IDCARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_EXCREG_ARC exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_EXCEPCIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_EXCEPCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IC_CARGA_EXCEP_FK", FK_COLUMNS="N_IDCARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_EXCEPCIONES
      WHERE
        /*  %JoinFKPK(IB_CARGA_EXCEPCIONES,:%Old," = "," AND") */
        IB_CARGA_EXCEPCIONES.N_IDCARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_EXCEPCIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_PERSONAL_CORREO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PERSONAL_CORREO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_PERSONAL_CORREO", FK_COLUMNS="N_ID_CARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PERSONAL_CORREO
      WHERE
        /*  %JoinFKPK(IB_CARGA_PERSONAL_CORREO,:%Old," = "," AND") */
        IB_CARGA_PERSONAL_CORREO.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_PERSONAL_CORREO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_ARCHDGAP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_ARCHDGAP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_ARCHDGAP_FK", FK_COLUMNS="N_ID_CARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_ARCHDGAP
      WHERE
        /*  %JoinFKPK(IB_CARGA_ARCHDGAP,:%Old," = "," AND") */
        IB_CARGA_ARCHDGAP.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_ARCHDGAP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_PROCESAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PROCESAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_CPROCESAR_FK", FK_COLUMNS="N_ID_CARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PROCESAR
      WHERE
        /*  %JoinFKPK(IB_CARGA_PROCESAR,:%Old," = "," AND") */
        IB_CARGA_PROCESAR.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_PROCESAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_ARCHZIP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_ARCHZIP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_AZIP_FK", FK_COLUMNS="N_ID_CARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_ARCHZIP
      WHERE
        /*  %JoinFKPK(IB_CARGA_ARCHZIP,:%Old," = "," AND") */
        IB_CARGA_ARCHZIP.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_ARCHZIP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA  IB_CARGA_PRE_ARCHSIIEWEB on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_PRE_ARCHSIIEWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_PRESIIEWEB_FK", FK_COLUMNS="N_ID_CARGA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_PRE_ARCHSIIEWEB
      WHERE
        /*  %JoinFKPK(IB_CARGA_PRE_ARCHSIIEWEB,:%Old," = "," AND") */
        IB_CARGA_PRE_ARCHSIIEWEB.N_ID_CARGA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA because IB_CARGA_PRE_ARCHSIIEWEB exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_IB_CARGA_ARCHZIP AFTER DELETE ON IB_CARGA_ARCHZIP for each row
-- ERwin Builtin Trigger
-- DELETE trigger on IB_CARGA_ARCHZIP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* IB_CARGA_ARCHZIP  IB_CARGA_ARCHDBF on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00020f98", PARENT_OWNER="", PARENT_TABLE="IB_CARGA_ARCHZIP"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_ARCHDBF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGAAZIP_ADBF_FK", FK_COLUMNS="N_ID_ARCHZIP" */
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_ARCHDBF
      WHERE
        /*  %JoinFKPK(IB_CARGA_ARCHDBF,:%Old," = "," AND") */
        IB_CARGA_ARCHDBF.N_ID_ARCHZIP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA_ARCHZIP because IB_CARGA_ARCHDBF exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IB_CARGA_ARCHZIP  IW_CARGA_CCT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA_ARCHZIP"
    CHILD_OWNER="", CHILD_TABLE="IW_CARGA_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_CCT_FK", FK_COLUMNS="N_ID_ZIP" */
    SELECT count(*) INTO NUMROWS
      FROM IW_CARGA_CCT
      WHERE
        /*  %JoinFKPK(IW_CARGA_CCT,:%Old," = "," AND") */
        IW_CARGA_CCT.N_ID_ZIP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA_ARCHZIP because IW_CARGA_CCT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_IB_CARGA_ARCHZIP AFTER UPDATE ON IB_CARGA_ARCHZIP for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on IB_CARGA_ARCHZIP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* IB_CARGA_ARCHZIP  IB_CARGA_ARCHDBF on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00025451", PARENT_OWNER="", PARENT_TABLE="IB_CARGA_ARCHZIP"
    CHILD_OWNER="", CHILD_TABLE="IB_CARGA_ARCHDBF"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGAAZIP_ADBF_FK", FK_COLUMNS="N_ID_ARCHZIP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_CARGA_ARCHDBF
      WHERE
        /*  %JoinFKPK(IB_CARGA_ARCHDBF,:%Old," = "," AND") */
        IB_CARGA_ARCHDBF.N_ID_ARCHZIP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA_ARCHZIP because IB_CARGA_ARCHDBF exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IB_CARGA_ARCHZIP  IW_CARGA_CCT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IB_CARGA_ARCHZIP"
    CHILD_OWNER="", CHILD_TABLE="IW_CARGA_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_CARGA_CCT_FK", FK_COLUMNS="N_ID_ZIP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IW_CARGA_CCT
      WHERE
        /*  %JoinFKPK(IW_CARGA_CCT,:%Old," = "," AND") */
        IW_CARGA_CCT.N_ID_ZIP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA_ARCHZIP because IW_CARGA_CCT exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_IB_CARGA_PRI_ARCHSIIEWEB AFTER DELETE ON IB_CARGA_PRI_ARCHSIIEWEB for each row
-- ERwin Builtin Trigger
-- DELETE trigger on IB_CARGA_PRI_ARCHSIIEWEB 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* IB_CARGA_PRI_ARCHSIIEWEB  IW_CARGA_PRI_CCTSIIEWEB on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000115fe", PARENT_OWNER="", PARENT_TABLE="IB_CARGA_PRI_ARCHSIIEWEB"
    CHILD_OWNER="", CHILD_TABLE="IW_CARGA_PRI_CCTSIIEWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_SIIEWEB_PRI_ASWEB_FK", FK_COLUMNS="N_ID_ARCHSIIEWEB" */
    SELECT count(*) INTO NUMROWS
      FROM IW_CARGA_PRI_CCTSIIEWEB
      WHERE
        /*  %JoinFKPK(IW_CARGA_PRI_CCTSIIEWEB,:%Old," = "," AND") */
        IW_CARGA_PRI_CCTSIIEWEB.N_ID_ARCHSIIEWEB = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE IB_CARGA_PRI_ARCHSIIEWEB because IW_CARGA_PRI_CCTSIIEWEB exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_IB_CARGA_PRI_ARCHSIIEWEB AFTER UPDATE ON IB_CARGA_PRI_ARCHSIIEWEB for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on IB_CARGA_PRI_ARCHSIIEWEB 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* IB_CARGA_PRI_ARCHSIIEWEB  IW_CARGA_PRI_CCTSIIEWEB on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000133ab", PARENT_OWNER="", PARENT_TABLE="IB_CARGA_PRI_ARCHSIIEWEB"
    CHILD_OWNER="", CHILD_TABLE="IW_CARGA_PRI_CCTSIIEWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_SIIEWEB_PRI_ASWEB_FK", FK_COLUMNS="N_ID_ARCHSIIEWEB" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IW_CARGA_PRI_CCTSIIEWEB
      WHERE
        /*  %JoinFKPK(IW_CARGA_PRI_CCTSIIEWEB,:%Old," = "," AND") */
        IW_CARGA_PRI_CCTSIIEWEB.N_ID_ARCHSIIEWEB = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IB_CARGA_PRI_ARCHSIIEWEB because IW_CARGA_PRI_CCTSIIEWEB exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_ACCIONES_MEJORA AFTER DELETE ON SC_ACCIONES_MEJORA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_ACCIONES_MEJORA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_ACCIONES_MEJORA  SR_PROPOSITO_ACCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001082d", PARENT_OWNER="", PARENT_TABLE="SC_ACCIONES_MEJORA"
    CHILD_OWNER="", CHILD_TABLE="SR_PROPOSITO_ACCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROP_ACCION", FK_COLUMNS="N_ID_ACCION" */
    SELECT count(*) INTO NUMROWS
      FROM SR_PROPOSITO_ACCIONES
      WHERE
        /*  %JoinFKPK(SR_PROPOSITO_ACCIONES,:%Old," = "," AND") */
        SR_PROPOSITO_ACCIONES.N_ID_ACCION = :old.N_ACCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_ACCIONES_MEJORA because SR_PROPOSITO_ACCIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_ACCIONES_MEJORA AFTER UPDATE ON SC_ACCIONES_MEJORA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_ACCIONES_MEJORA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_ACCIONES_MEJORA  SR_PROPOSITO_ACCIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001162b", PARENT_OWNER="", PARENT_TABLE="SC_ACCIONES_MEJORA"
    CHILD_OWNER="", CHILD_TABLE="SR_PROPOSITO_ACCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROP_ACCION", FK_COLUMNS="N_ID_ACCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ACCION <> :new.N_ACCION
  THEN
    UPDATE SR_PROPOSITO_ACCIONES
      SET
        /* %SetFK(SR_PROPOSITO_ACCIONES,NULL) */
        SR_PROPOSITO_ACCIONES.N_ID_ACCION = NULL
      WHERE
        /* %JoinFKPK(SR_PROPOSITO_ACCIONES,:%Old," = ",",") */
        SR_PROPOSITO_ACCIONES.N_ID_ACCION = :old.N_ACCION;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_DIMENSIONES AFTER DELETE ON SC_DIMENSIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_DIMENSIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_DIMENSIONES  SR_INTERVENCIONES_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011047", PARENT_OWNER="", PARENT_TABLE="SC_DIMENSIONES"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DIMENSION", FK_COLUMNS="N_DIMENSION" */
    SELECT count(*) INTO NUMROWS
      FROM SR_INTERVENCIONES_VISITAS
      WHERE
        /*  %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = "," AND") */
        SR_INTERVENCIONES_VISITAS.N_DIMENSION = :old.N_DIMENSION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_DIMENSIONES because SR_INTERVENCIONES_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_DIMENSIONES AFTER UPDATE ON SC_DIMENSIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_DIMENSIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_DIMENSIONES  SR_INTERVENCIONES_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001220c", PARENT_OWNER="", PARENT_TABLE="SC_DIMENSIONES"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DIMENSION", FK_COLUMNS="N_DIMENSION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_DIMENSION <> :new.N_DIMENSION
  THEN
    UPDATE SR_INTERVENCIONES_VISITAS
      SET
        /* %SetFK(SR_INTERVENCIONES_VISITAS,NULL) */
        SR_INTERVENCIONES_VISITAS.N_DIMENSION = NULL
      WHERE
        /* %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = ",",") */
        SR_INTERVENCIONES_VISITAS.N_DIMENSION = :old.N_DIMENSION;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_ESTATUSVISITA AFTER DELETE ON SC_ESTATUSVISITA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_ESTATUSVISITA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_ESTATUSVISITA  SW_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e85a", PARENT_OWNER="", PARENT_TABLE="SC_ESTATUSVISITA"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ESTATUSVISITA", FK_COLUMNS="N_ESTATUSVISITAS" */
    SELECT count(*) INTO NUMROWS
      FROM SW_VISITAS
      WHERE
        /*  %JoinFKPK(SW_VISITAS,:%Old," = "," AND") */
        SW_VISITAS.N_ESTATUSVISITAS = :old.N_ESTATUSVISITA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_ESTATUSVISITA because SW_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_ESTATUSVISITA AFTER UPDATE ON SC_ESTATUSVISITA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_ESTATUSVISITA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_ESTATUSVISITA  SW_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000fbc9", PARENT_OWNER="", PARENT_TABLE="SC_ESTATUSVISITA"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ESTATUSVISITA", FK_COLUMNS="N_ESTATUSVISITAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ESTATUSVISITA <> :new.N_ESTATUSVISITA
  THEN
    UPDATE SW_VISITAS
      SET
        /* %SetFK(SW_VISITAS,NULL) */
        SW_VISITAS.N_ESTATUSVISITAS = NULL
      WHERE
        /* %JoinFKPK(SW_VISITAS,:%Old," = ",",") */
        SW_VISITAS.N_ESTATUSVISITAS = :old.N_ESTATUSVISITA;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_FORMATOS AFTER DELETE ON SC_FORMATOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_FORMATOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_FORMATOS  SR_NIVEL_EDUCATIVO_FORMATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010712", PARENT_OWNER="", PARENT_TABLE="SC_FORMATOS"
    CHILD_OWNER="", CHILD_TABLE="SR_NIVEL_EDUCATIVO_FORMATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SR_NIVEL_EDUCATIVO_FORMAT_FK2", FK_COLUMNS="N_FORMATO" */
    SELECT count(*) INTO NUMROWS
      FROM SR_NIVEL_EDUCATIVO_FORMATO
      WHERE
        /*  %JoinFKPK(SR_NIVEL_EDUCATIVO_FORMATO,:%Old," = "," AND") */
        SR_NIVEL_EDUCATIVO_FORMATO.N_FORMATO = :old.N_IDFORMATO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_FORMATOS because SR_NIVEL_EDUCATIVO_FORMATO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_FORMATOS AFTER UPDATE ON SC_FORMATOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_FORMATOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_FORMATOS  SR_NIVEL_EDUCATIVO_FORMATO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00011d49", PARENT_OWNER="", PARENT_TABLE="SC_FORMATOS"
    CHILD_OWNER="", CHILD_TABLE="SR_NIVEL_EDUCATIVO_FORMATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SR_NIVEL_EDUCATIVO_FORMAT_FK2", FK_COLUMNS="N_FORMATO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDFORMATO <> :new.N_IDFORMATO
  THEN
    UPDATE SR_NIVEL_EDUCATIVO_FORMATO
      SET
        /* %SetFK(SR_NIVEL_EDUCATIVO_FORMATO,NULL) */
        SR_NIVEL_EDUCATIVO_FORMATO.N_FORMATO = NULL
      WHERE
        /* %JoinFKPK(SR_NIVEL_EDUCATIVO_FORMATO,:%Old," = ",",") */
        SR_NIVEL_EDUCATIVO_FORMATO.N_FORMATO = :old.N_IDFORMATO;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_INTERVENCIONES AFTER DELETE ON SC_INTERVENCIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_INTERVENCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_INTERVENCIONES  SR_INTERVENCIONES_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011137", PARENT_OWNER="", PARENT_TABLE="SC_INTERVENCIONES"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_INTERVENCION", FK_COLUMNS="N_INTERVENCION" */
    SELECT count(*) INTO NUMROWS
      FROM SR_INTERVENCIONES_VISITAS
      WHERE
        /*  %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = "," AND") */
        SR_INTERVENCIONES_VISITAS.N_INTERVENCION = :old.N_INTERVENCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_INTERVENCIONES because SR_INTERVENCIONES_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_INTERVENCIONES AFTER UPDATE ON SC_INTERVENCIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_INTERVENCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_INTERVENCIONES  SR_INTERVENCIONES_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001331a", PARENT_OWNER="", PARENT_TABLE="SC_INTERVENCIONES"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_INTERVENCION", FK_COLUMNS="N_INTERVENCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_INTERVENCION <> :new.N_INTERVENCION
  THEN
    UPDATE SR_INTERVENCIONES_VISITAS
      SET
        /* %SetFK(SR_INTERVENCIONES_VISITAS,NULL) */
        SR_INTERVENCIONES_VISITAS.N_INTERVENCION = NULL
      WHERE
        /* %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = ",",") */
        SR_INTERVENCIONES_VISITAS.N_INTERVENCION = :old.N_INTERVENCION;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_PROPOSITOS AFTER DELETE ON SC_PROPOSITOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_PROPOSITOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_PROPOSITOS  SR_INTERVENCIONES_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010cf3", PARENT_OWNER="", PARENT_TABLE="SC_PROPOSITOS"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROPOSITO", FK_COLUMNS="N_PROPOSITO" */
    SELECT count(*) INTO NUMROWS
      FROM SR_INTERVENCIONES_VISITAS
      WHERE
        /*  %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = "," AND") */
        SR_INTERVENCIONES_VISITAS.N_PROPOSITO = :old.N_PROPOSITO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_PROPOSITOS because SR_INTERVENCIONES_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_PROPOSITOS AFTER UPDATE ON SC_PROPOSITOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_PROPOSITOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_PROPOSITOS  SR_INTERVENCIONES_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000113cb", PARENT_OWNER="", PARENT_TABLE="SC_PROPOSITOS"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROPOSITO", FK_COLUMNS="N_PROPOSITO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_PROPOSITO <> :new.N_PROPOSITO
  THEN
    UPDATE SR_INTERVENCIONES_VISITAS
      SET
        /* %SetFK(SR_INTERVENCIONES_VISITAS,NULL) */
        SR_INTERVENCIONES_VISITAS.N_PROPOSITO = NULL
      WHERE
        /* %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = ",",") */
        SR_INTERVENCIONES_VISITAS.N_PROPOSITO = :old.N_PROPOSITO;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SC_TIPOVISITA AFTER DELETE ON SC_TIPOVISITA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SC_TIPOVISITA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SC_TIPOVISITA  SW_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e932", PARENT_OWNER="", PARENT_TABLE="SC_TIPOVISITA"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SC_TIPOVISITA", FK_COLUMNS="N_TIPOVISITA" */
    SELECT count(*) INTO NUMROWS
      FROM SW_VISITAS
      WHERE
        /*  %JoinFKPK(SW_VISITAS,:%Old," = "," AND") */
        SW_VISITAS.N_TIPOVISITA = :old.N_TIPOVISITA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SC_TIPOVISITA because SW_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SC_TIPOVISITA AFTER UPDATE ON SC_TIPOVISITA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SC_TIPOVISITA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SC_TIPOVISITA  SW_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000eb8d", PARENT_OWNER="", PARENT_TABLE="SC_TIPOVISITA"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SC_TIPOVISITA", FK_COLUMNS="N_TIPOVISITA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_TIPOVISITA <> :new.N_TIPOVISITA
  THEN
    UPDATE SW_VISITAS
      SET
        /* %SetFK(SW_VISITAS,NULL) */
        SW_VISITAS.N_TIPOVISITA = NULL
      WHERE
        /* %JoinFKPK(SW_VISITAS,:%Old," = ",",") */
        SW_VISITAS.N_TIPOVISITA = :old.N_TIPOVISITA;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SR_INTERVENCIONES_VISITAS AFTER DELETE ON SR_INTERVENCIONES_VISITAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SR_INTERVENCIONES_VISITAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SR_INTERVENCIONES_VISITAS  SR_PROPOSITO_ACCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000123d0", PARENT_OWNER="", PARENT_TABLE="SR_INTERVENCIONES_VISITAS"
    CHILD_OWNER="", CHILD_TABLE="SR_PROPOSITO_ACCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROP_INTERVENCION", FK_COLUMNS="N_ID_PROPOSITO" */
    SELECT count(*) INTO NUMROWS
      FROM SR_PROPOSITO_ACCIONES
      WHERE
        /*  %JoinFKPK(SR_PROPOSITO_ACCIONES,:%Old," = "," AND") */
        SR_PROPOSITO_ACCIONES.N_ID_PROPOSITO = :old.N_INTERVENCION_VISITA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SR_INTERVENCIONES_VISITAS because SR_PROPOSITO_ACCIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SR_INTERVENCIONES_VISITAS AFTER UPDATE ON SR_INTERVENCIONES_VISITAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SR_INTERVENCIONES_VISITAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SR_INTERVENCIONES_VISITAS  SR_PROPOSITO_ACCIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000122ce", PARENT_OWNER="", PARENT_TABLE="SR_INTERVENCIONES_VISITAS"
    CHILD_OWNER="", CHILD_TABLE="SR_PROPOSITO_ACCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROP_INTERVENCION", FK_COLUMNS="N_ID_PROPOSITO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_INTERVENCION_VISITA <> :new.N_INTERVENCION_VISITA
  THEN
    UPDATE SR_PROPOSITO_ACCIONES
      SET
        /* %SetFK(SR_PROPOSITO_ACCIONES,NULL) */
        SR_PROPOSITO_ACCIONES.N_ID_PROPOSITO = NULL
      WHERE
        /* %JoinFKPK(SR_PROPOSITO_ACCIONES,:%Old," = ",",") */
        SR_PROPOSITO_ACCIONES.N_ID_PROPOSITO = :old.N_INTERVENCION_VISITA;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SW_VISITAS AFTER DELETE ON SW_VISITAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SW_VISITAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SW_VISITAS  SR_INTERVENCIONES_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010042", PARENT_OWNER="", PARENT_TABLE="SW_VISITAS"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_VISITA", FK_COLUMNS="N_VISITA" */
    SELECT count(*) INTO NUMROWS
      FROM SR_INTERVENCIONES_VISITAS
      WHERE
        /*  %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = "," AND") */
        SR_INTERVENCIONES_VISITAS.N_VISITA = :old.N_VISITA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SW_VISITAS because SR_INTERVENCIONES_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SW_VISITAS AFTER UPDATE ON SW_VISITAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SW_VISITAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SW_VISITAS  SR_INTERVENCIONES_VISITAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000125d5", PARENT_OWNER="", PARENT_TABLE="SW_VISITAS"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_VISITA", FK_COLUMNS="N_VISITA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_VISITA <> :new.N_VISITA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SR_INTERVENCIONES_VISITAS
      WHERE
        /*  %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = "," AND") */
        SR_INTERVENCIONES_VISITAS.N_VISITA = :old.N_VISITA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SW_VISITAS because SR_INTERVENCIONES_VISITAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_911MOTIVO AFTER DELETE ON TC_911MOTIVO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_911MOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_911MOTIVO  TW_SEGREPORTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f375", PARENT_OWNER="", PARENT_TABLE="TC_911MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SEGREPORTES_TC_911MOTIVO_FK", FK_COLUMNS="N_ID911MOTIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_ID911MOTIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_911MOTIVO because TW_SEGREPORTES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_911MOTIVO AFTER UPDATE ON TC_911MOTIVO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_911MOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_911MOTIVO  TW_SEGREPORTES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000f57a", PARENT_OWNER="", PARENT_TABLE="TC_911MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SEGREPORTES_TC_911MOTIVO_FK", FK_COLUMNS="N_ID911MOTIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SEGREPORTES
      SET
        /* %SetFK(TW_SEGREPORTES,NULL) */
        TW_SEGREPORTES.N_ID911MOTIVO = NULL
      WHERE
        /* %JoinFKPK(TW_SEGREPORTES,:%Old," = ",",") */
        TW_SEGREPORTES.N_ID911MOTIVO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_AGUDEZAVISUAL AFTER DELETE ON TC_AGUDEZAVISUAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_AGUDEZAVISUAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_AGUDEZAVISUAL  TC_ALUMNOCOMPLEMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010d27", PARENT_OWNER="", PARENT_TABLE="TC_AGUDEZAVISUAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_AGUDEVI_FK", FK_COLUMNS="N_IDAGUDEZAVISUAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDAGUDEZAVISUAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_AGUDEZAVISUAL because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_AGUDEZAVISUAL AFTER UPDATE ON TC_AGUDEZAVISUAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_AGUDEZAVISUAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_AGUDEZAVISUAL  TC_ALUMNOCOMPLEMENTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001137a", PARENT_OWNER="", PARENT_TABLE="TC_AGUDEZAVISUAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_AGUDEVI_FK", FK_COLUMNS="N_IDAGUDEZAVISUAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNOCOMPLEMENTO
      SET
        /* %SetFK(TC_ALUMNOCOMPLEMENTO,NULL) */
        TC_ALUMNOCOMPLEMENTO.N_IDAGUDEZAVISUAL = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = ",",") */
        TC_ALUMNOCOMPLEMENTO.N_IDAGUDEZAVISUAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ALUMNO AFTER DELETE ON TC_ALUMNO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNODOCUMENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00155dfc", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOC_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOCUMENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOCUMENTOS,:%Old," = "," AND") */
        TW_ALUMNODOCUMENTOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNODOCUMENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNODATOSESTADISTICOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDATEST_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNODATOSESTADISTICOS,:%Old," = "," AND") */
        TW_ALUMNODATOSESTADISTICOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNODATOSESTADISTICOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TR_ALUMNODATOESTADISTICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TR_ALUMNODATOESTADISTICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ALUMDATESTA_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ALUMNODATOESTADISTICO
      WHERE
        /*  %JoinFKPK(TR_ALUMNODATOESTADISTICO,:%Old," = "," AND") */
        TR_ALUMNODATOESTADISTICO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TR_ALUMNODATOESTADISTICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TR_VINCULARALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TR_VINCULARALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_VINCULARALUMNO_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_VINCULARALUMNO
      WHERE
        /*  %JoinFKPK(TR_VINCULARALUMNO,:%Old," = "," AND") */
        TR_VINCULARALUMNO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TR_VINCULARALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  US_INSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_INSCRIPCION", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because US_INSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  US_PROMEDIONIVELEDUCATIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  US_ESTADISTICAALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_ESTADISTICAALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_ESTADIST_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM US_ESTADISTICAALUMNO
      WHERE
        /*  %JoinFKPK(US_ESTADISTICAALUMNO,:%Old," = "," AND") */
        US_ESTADISTICAALUMNO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because US_ESTADISTICAALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOSOPCIONESESCUELAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_ALUMNOHP_FK", FK_COLUMNS="N_IDHERMANOPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOSOPCIONESESCUELAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = "," AND") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDHERMANOPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOSOPCIONESESCUELAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOSOPCIONESESCUELAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_ALUMNO_FK", FK_COLUMNS="N_IDHERMANO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOSOPCIONESESCUELAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = "," AND") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDHERMANO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOSOPCIONESESCUELAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TC_ALUMNOCOMPLEMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOBAP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAP_FK1", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAP
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAP,:%Old," = "," AND") */
        TW_ALUMNOBAP.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOBAP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOCAPACIDADESDIFERENTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCAPACIDADESDIFERENTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAPDIF_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCAPACIDADESDIFERENTES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCAPACIDADESDIFERENTES,:%Old," = "," AND") */
        TW_ALUMNOCAPACIDADESDIFERENTES.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOCAPACIDADESDIFERENTES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOBAJAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUBAJ_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOBAJAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ESCUELAINCIDENCIAPER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAPER
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAPER.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ESCUELAINCIDENCIAPER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOPROMEDIOSNIVEL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOPROMEDIOSNIVEL_AL", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOCICLOESCOLARHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ALU_FK", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNO  TW_ALUMNOBAPAPOYOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAPAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAPAPAPOYOS_FK1", FK_COLUMNS="N_IDALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAPAPOYOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAPAPOYOS,:%Old," = "," AND") */
        TW_ALUMNOBAPAPOYOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNO because TW_ALUMNOBAPAPOYOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ALUMNO AFTER UPDATE ON TC_ALUMNO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNODOCUMENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00172b8c", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOC_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOCUMENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOCUMENTOS,:%Old," = "," AND") */
        TW_ALUMNODOCUMENTOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNODOCUMENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNODATOSESTADISTICOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDATEST_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNODATOSESTADISTICOS,:%Old," = "," AND") */
        TW_ALUMNODATOSESTADISTICOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNODATOSESTADISTICOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TR_ALUMNODATOESTADISTICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TR_ALUMNODATOESTADISTICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ALUMDATESTA_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ALUMNODATOESTADISTICO
      WHERE
        /*  %JoinFKPK(TR_ALUMNODATOESTADISTICO,:%Old," = "," AND") */
        TR_ALUMNODATOESTADISTICO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TR_ALUMNODATOESTADISTICO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TR_VINCULARALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TR_VINCULARALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_VINCULARALUMNO_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_VINCULARALUMNO
      WHERE
        /*  %JoinFKPK(TR_VINCULARALUMNO,:%Old," = "," AND") */
        TR_VINCULARALUMNO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TR_VINCULARALUMNO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  US_INSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_INSCRIPCION", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because US_INSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  US_PROMEDIONIVELEDUCATIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  US_ESTADISTICAALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_ESTADISTICAALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_ESTADIST_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ESTADISTICAALUMNO
      WHERE
        /*  %JoinFKPK(US_ESTADISTICAALUMNO,:%Old," = "," AND") */
        US_ESTADISTICAALUMNO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because US_ESTADISTICAALUMNO exists.'
      );
    END IF;
  END IF;

  /* TC_ALUMNO  TW_ALUMNOSOPCIONESESCUELAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_ALUMNOHP_FK", FK_COLUMNS="N_IDHERMANOPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOSOPCIONESESCUELAS
      SET
        /* %SetFK(TW_ALUMNOSOPCIONESESCUELAS,NULL) */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDHERMANOPROCESO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = ",",") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDHERMANOPROCESO = :old.N_ID;
  END IF;

  /* TC_ALUMNO  TW_ALUMNOSOPCIONESESCUELAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_ALUMNO_FK", FK_COLUMNS="N_IDHERMANO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOSOPCIONESESCUELAS
      SET
        /* %SetFK(TW_ALUMNOSOPCIONESESCUELAS,NULL) */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDHERMANO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = ",",") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDHERMANO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TC_ALUMNOCOMPLEMENTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;
  END IF;

  /* TC_ALUMNO  TW_ALUMNOBAP on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAP_FK1", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOBAP
      SET
        /* %SetFK(TW_ALUMNOBAP,NULL) */
        TW_ALUMNOBAP.N_IDALUMNO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOBAP,:%Old," = ",",") */
        TW_ALUMNOBAP.N_IDALUMNO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNOCAPACIDADESDIFERENTES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCAPACIDADESDIFERENTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAPDIF_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCAPACIDADESDIFERENTES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCAPACIDADESDIFERENTES,:%Old," = "," AND") */
        TW_ALUMNOCAPACIDADESDIFERENTES.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNOCAPACIDADESDIFERENTES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNOCICLOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNOBAJAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUBAJ_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNOBAJAS exists.'
      );
    END IF;
  END IF;

  /* TC_ALUMNO  TW_ESCUELAINCIDENCIAPER on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ESCUELAINCIDENCIAPER
      SET
        /* %SetFK(TW_ESCUELAINCIDENCIAPER,NULL) */
        TW_ESCUELAINCIDENCIAPER.N_IDALUMNO = NULL
      WHERE
        /* %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = ",",") */
        TW_ESCUELAINCIDENCIAPER.N_IDALUMNO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_ALUMNO_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNOPROMEDIOSNIVEL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOPROMEDIOSNIVEL_AL", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNO  TW_ALUMNOCICLOESCOLARHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ALU_FK", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNO because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;
  END IF;

  /* TC_ALUMNO  TW_ALUMNOBAPAPOYOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAPAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAPAPAPOYOS_FK1", FK_COLUMNS="N_IDALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOBAPAPOYOS
      SET
        /* %SetFK(TW_ALUMNOBAPAPOYOS,NULL) */
        TW_ALUMNOBAPAPOYOS.N_IDALUMNO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOBAPAPOYOS,:%Old," = ",",") */
        TW_ALUMNOBAPAPOYOS.N_IDALUMNO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ALUMNOCOMPLEMENTO AFTER DELETE ON TC_ALUMNOCOMPLEMENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ALUMNOCOMPLEMENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ALUMNOCOMPLEMENTO  TW_ALUMNOPROYECTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002335b", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNOCOMPLEMENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROYECTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMPROY_TC_ALUCOM_FK", FK_COLUMNS="N_IDALUMNOCOMPLEMENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROYECTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROYECTOS,:%Old," = "," AND") */
        TW_ALUMNOPROYECTOS.N_IDALUMNOCOMPLEMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNOCOMPLEMENTO because TW_ALUMNOPROYECTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ALUMNOCOMPLEMENTO  TW_ALUMNOBECA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNOCOMPLEMENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBECA_TC_ALUCOM_FK", FK_COLUMNS="N_IDALUMNOCOMPLEMENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBECA,:%Old," = "," AND") */
        TW_ALUMNOBECA.N_IDALUMNOCOMPLEMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ALUMNOCOMPLEMENTO because TW_ALUMNOBECA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ALUMNOCOMPLEMENTO AFTER UPDATE ON TC_ALUMNOCOMPLEMENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ALUMNOCOMPLEMENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ALUMNOCOMPLEMENTO  TW_ALUMNOPROYECTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00027407", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNOCOMPLEMENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROYECTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMPROY_TC_ALUCOM_FK", FK_COLUMNS="N_IDALUMNOCOMPLEMENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROYECTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROYECTOS,:%Old," = "," AND") */
        TW_ALUMNOPROYECTOS.N_IDALUMNOCOMPLEMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNOCOMPLEMENTO because TW_ALUMNOPROYECTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ALUMNOCOMPLEMENTO  TW_ALUMNOBECA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ALUMNOCOMPLEMENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBECA_TC_ALUCOM_FK", FK_COLUMNS="N_IDALUMNOCOMPLEMENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBECA,:%Old," = "," AND") */
        TW_ALUMNOBECA.N_IDALUMNOCOMPLEMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ALUMNOCOMPLEMENTO because TW_ALUMNOBECA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_APOYOSEXTERNOS AFTER DELETE ON TC_APOYOSEXTERNOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_APOYOSEXTERNOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_APOYOSEXTERNOS  TW_ESCUELAINSIDENCIAAPOYOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011f9f", PARENT_OWNER="", PARENT_TABLE="TC_APOYOSEXTERNOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINSIDENCIAAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCAPO_TC_APOEXT_FK", FK_COLUMNS="N_IDAPOYOSEXTERNOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINSIDENCIAAPOYOS
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINSIDENCIAAPOYOS,:%Old," = "," AND") */
        TW_ESCUELAINSIDENCIAAPOYOS.N_IDAPOYOSEXTERNOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_APOYOSEXTERNOS because TW_ESCUELAINSIDENCIAAPOYOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_APOYOSEXTERNOS AFTER UPDATE ON TC_APOYOSEXTERNOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_APOYOSEXTERNOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_APOYOSEXTERNOS  TW_ESCUELAINSIDENCIAAPOYOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000148fb", PARENT_OWNER="", PARENT_TABLE="TC_APOYOSEXTERNOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINSIDENCIAAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCAPO_TC_APOEXT_FK", FK_COLUMNS="N_IDAPOYOSEXTERNOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINSIDENCIAAPOYOS
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINSIDENCIAAPOYOS,:%Old," = "," AND") */
        TW_ESCUELAINSIDENCIAAPOYOS.N_IDAPOYOSEXTERNOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_APOYOSEXTERNOS because TW_ESCUELAINSIDENCIAAPOYOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_AREADECONOCIMIENTO AFTER DELETE ON TC_AREADECONOCIMIENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_AREADECONOCIMIENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_AREADECONOCIMIENTO  TW_HISTORIAACADEMICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00025799", PARENT_OWNER="", PARENT_TABLE="TC_AREADECONOCIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_AREACONOC_FK", FK_COLUMNS="N_IDAREADECONOCIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_HISTORIAACADEMICA
      WHERE
        /*  %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = "," AND") */
        TW_HISTORIAACADEMICA.N_IDAREADECONOCIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_AREADECONOCIMIENTO because TW_HISTORIAACADEMICA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_AREADECONOCIMIENTO  TR_PERFILFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_AREADECONOCIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TR_PERFILFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERFUNRE_TC_ARECON_FK", FK_COLUMNS="N_IDAREACONOCIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERFILFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERFILFUNCIONREAL,:%Old," = "," AND") */
        TR_PERFILFUNCIONREAL.N_IDAREACONOCIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_AREADECONOCIMIENTO because TR_PERFILFUNCIONREAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_AREADECONOCIMIENTO AFTER UPDATE ON TC_AREADECONOCIMIENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_AREADECONOCIMIENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_AREADECONOCIMIENTO  TW_HISTORIAACADEMICA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0002600a", PARENT_OWNER="", PARENT_TABLE="TC_AREADECONOCIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_AREACONOC_FK", FK_COLUMNS="N_IDAREADECONOCIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_HISTORIAACADEMICA
      SET
        /* %SetFK(TW_HISTORIAACADEMICA,NULL) */
        TW_HISTORIAACADEMICA.N_IDAREADECONOCIMIENTO = NULL
      WHERE
        /* %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = ",",") */
        TW_HISTORIAACADEMICA.N_IDAREADECONOCIMIENTO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_AREADECONOCIMIENTO  TR_PERFILFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_AREADECONOCIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TR_PERFILFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERFUNRE_TC_ARECON_FK", FK_COLUMNS="N_IDAREACONOCIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERFILFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERFILFUNCIONREAL,:%Old," = "," AND") */
        TR_PERFILFUNCIONREAL.N_IDAREACONOCIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_AREADECONOCIMIENTO because TR_PERFILFUNCIONREAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ASIGNATURABLOQUE AFTER DELETE ON TC_ASIGNATURABLOQUE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ASIGNATURABLOQUE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURABLOQUE  TC_ASIGNATURABLOQUEAPRE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000248b5", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUE"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUEAPRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUE11", FK_COLUMNS="N_IDASIGNATURABLOQUE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUEAPRE
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUEAPRE,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUEAPRE.N_IDASIGNATURABLOQUE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURABLOQUE because TC_ASIGNATURABLOQUEAPRE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURABLOQUE  TC_ASIGNATURABLOQUECOFA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUE"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUECOFA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUE12", FK_COLUMNS="N_IDASIGNATURABLOQUE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUECOFA
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUECOFA,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUECOFA.N_IDASIGNATURABLOQUE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURABLOQUE because TC_ASIGNATURABLOQUECOFA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ASIGNATURABLOQUE AFTER UPDATE ON TC_ASIGNATURABLOQUE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ASIGNATURABLOQUE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_ASIGNATURABLOQUE  TC_ASIGNATURABLOQUEAPRE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0002504c", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUE"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUEAPRE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUE11", FK_COLUMNS="N_IDASIGNATURABLOQUE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURABLOQUEAPRE
      SET
        /* %SetFK(TC_ASIGNATURABLOQUEAPRE,NULL) */
        TC_ASIGNATURABLOQUEAPRE.N_IDASIGNATURABLOQUE = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURABLOQUEAPRE,:%Old," = ",",") */
        TC_ASIGNATURABLOQUEAPRE.N_IDASIGNATURABLOQUE = :old.N_ID;
  END IF;

  /* TC_ASIGNATURABLOQUE  TC_ASIGNATURABLOQUECOFA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUE"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUECOFA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUE12", FK_COLUMNS="N_IDASIGNATURABLOQUE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURABLOQUECOFA
      SET
        /* %SetFK(TC_ASIGNATURABLOQUECOFA,NULL) */
        TC_ASIGNATURABLOQUECOFA.N_IDASIGNATURABLOQUE = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURABLOQUECOFA,:%Old," = ",",") */
        TC_ASIGNATURABLOQUECOFA.N_IDASIGNATURABLOQUE = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ASIGNATURABLOQUEAPRE AFTER DELETE ON TC_ASIGNATURABLOQUEAPRE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ASIGNATURABLOQUEAPRE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURABLOQUEAPRE  TC_ASIGNATURABLOQUEAPRECON on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028b7e", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUEAPRE"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUEAPRECON"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUEAPRE27", FK_COLUMNS="N_IDASIGNATURABLOQUEAPRE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUEAPRECON
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUEAPRECON,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUEAPRECON.N_IDASIGNATURABLOQUEAPRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURABLOQUEAPRE because TC_ASIGNATURABLOQUEAPRECON exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURABLOQUEAPRE  TR_ALUMNORECOMENDACIONESBLOQ on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUEAPRE"
    CHILD_OWNER="", CHILD_TABLE="TR_ALUMNORECOMENDACIONESBLOQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUEAPRE23", FK_COLUMNS="N_IDASIGNATURABLOQUEAPRE" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ALUMNORECOMENDACIONESBLOQ
      WHERE
        /*  %JoinFKPK(TR_ALUMNORECOMENDACIONESBLOQ,:%Old," = "," AND") */
        TR_ALUMNORECOMENDACIONESBLOQ.N_IDASIGNATURABLOQUEAPRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURABLOQUEAPRE because TR_ALUMNORECOMENDACIONESBLOQ exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ASIGNATURABLOQUEAPRE AFTER UPDATE ON TC_ASIGNATURABLOQUEAPRE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ASIGNATURABLOQUEAPRE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURABLOQUEAPRE  TC_ASIGNATURABLOQUEAPRECON on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002beef", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUEAPRE"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUEAPRECON"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUEAPRE27", FK_COLUMNS="N_IDASIGNATURABLOQUEAPRE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUEAPRECON
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUEAPRECON,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUEAPRECON.N_IDASIGNATURABLOQUEAPRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURABLOQUEAPRE because TC_ASIGNATURABLOQUEAPRECON exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURABLOQUEAPRE  TR_ALUMNORECOMENDACIONESBLOQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURABLOQUEAPRE"
    CHILD_OWNER="", CHILD_TABLE="TR_ALUMNORECOMENDACIONESBLOQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURABLOQUEAPRE23", FK_COLUMNS="N_IDASIGNATURABLOQUEAPRE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ALUMNORECOMENDACIONESBLOQ
      WHERE
        /*  %JoinFKPK(TR_ALUMNORECOMENDACIONESBLOQ,:%Old," = "," AND") */
        TR_ALUMNORECOMENDACIONESBLOQ.N_IDASIGNATURABLOQUEAPRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURABLOQUEAPRE because TR_ALUMNORECOMENDACIONESBLOQ exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ASIGNATURAS AFTER DELETE ON TC_ASIGNATURAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ASIGNATURAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TC_ASIGNATURABLOQUE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00094de5", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURAS1", FK_COLUMNS="N_IDASIGNATURAS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUE
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUE,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUE.N_IDASIGNATURAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TC_ASIGNATURABLOQUE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TC_ASIGNATURACALIFICACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURACALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNATCALIF_TC_ASIGNATU_FK", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURACALIFICACIONES
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURACALIFICACIONES,:%Old," = "," AND") */
        TC_ASIGNATURACALIFICACIONES.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TC_ASIGNATURACALIFICACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TC_LIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_LIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_LIBROS_TC_ASIGNAT_FK", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_LIBROS
      WHERE
        /*  %JoinFKPK(TC_LIBROS,:%Old," = "," AND") */
        TC_LIBROS.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TC_LIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TR_FUNCIONREALASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TR_FUNCIONREALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FUCREASIG_TC_ASIGNA_DK", FK_COLUMNS="N_IDASIGNATURAS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FUNCIONREALASIGNATURA
      WHERE
        /*  %JoinFKPK(TR_FUNCIONREALASIGNATURA,:%Old," = "," AND") */
        TR_FUNCIONREALASIGNATURA.N_IDASIGNATURAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TR_FUNCIONREALASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TR_ASIGNATURATECNOLOGIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TR_ASIGNATURATECNOLOGIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ASIGTEC_TC_ASIGNA_FK", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ASIGNATURATECNOLOGIA
      WHERE
        /*  %JoinFKPK(TR_ASIGNATURATECNOLOGIA,:%Old," = "," AND") */
        TR_ASIGNATURATECNOLOGIA.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TR_ASIGNATURATECNOLOGIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TW_ALUMNOAPOYOREQUERIDOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOAPOYOREQUERIDOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUAPOREQ_TC_ASIG_FK", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOAPOYOREQUERIDOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOAPOYOREQUERIDOS,:%Old," = "," AND") */
        TW_ALUMNOAPOYOREQUERIDOS.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TW_ALUMNOAPOYOREQUERIDOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TC_PLANDEESTUDIOSASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTAS_TC_ASIGNA_FK", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLANDEESTUDIOSASIGNATURA
      WHERE
        /*  %JoinFKPK(TC_PLANDEESTUDIOSASIGNATURA,:%Old," = "," AND") */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TC_PLANDEESTUDIOSASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ASIGNATURAS  TC_ASIGNATURAGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNAGRADO_TC_ASIGNA_FK", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAGRADO
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAGRADO,:%Old," = "," AND") */
        TC_ASIGNATURAGRADO.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ASIGNATURAS because TC_ASIGNATURAGRADO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ASIGNATURAS AFTER UPDATE ON TC_ASIGNATURAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ASIGNATURAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURAS  TC_ASIGNATURABLOQUE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0009d2e4", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ASIGNATURAS1", FK_COLUMNS="N_IDASIGNATURAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUE
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUE,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUE.N_IDASIGNATURAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURAS because TC_ASIGNATURABLOQUE exists.'
      );
    END IF;
  END IF;

  /* TC_ASIGNATURAS  TC_ASIGNATURACALIFICACIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURACALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNATCALIF_TC_ASIGNATU_FK", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURACALIFICACIONES
      SET
        /* %SetFK(TC_ASIGNATURACALIFICACIONES,NULL) */
        TC_ASIGNATURACALIFICACIONES.N_IDASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURACALIFICACIONES,:%Old," = ",",") */
        TC_ASIGNATURACALIFICACIONES.N_IDASIGNATURA = :old.N_ID;
  END IF;

  /* TC_ASIGNATURAS  TC_LIBROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_LIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_LIBROS_TC_ASIGNAT_FK", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_LIBROS
      SET
        /* %SetFK(TC_LIBROS,NULL) */
        TC_LIBROS.N_IDASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_LIBROS,:%Old," = ",",") */
        TC_LIBROS.N_IDASIGNATURA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURAS  TR_FUNCIONREALASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TR_FUNCIONREALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FUCREASIG_TC_ASIGNA_DK", FK_COLUMNS="N_IDASIGNATURAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FUNCIONREALASIGNATURA
      WHERE
        /*  %JoinFKPK(TR_FUNCIONREALASIGNATURA,:%Old," = "," AND") */
        TR_FUNCIONREALASIGNATURA.N_IDASIGNATURAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURAS because TR_FUNCIONREALASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURAS  TR_ASIGNATURATECNOLOGIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TR_ASIGNATURATECNOLOGIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ASIGTEC_TC_ASIGNA_FK", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ASIGNATURATECNOLOGIA
      WHERE
        /*  %JoinFKPK(TR_ASIGNATURATECNOLOGIA,:%Old," = "," AND") */
        TR_ASIGNATURATECNOLOGIA.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURAS because TR_ASIGNATURATECNOLOGIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURAS  TW_ALUMNOAPOYOREQUERIDOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOAPOYOREQUERIDOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUAPOREQ_TC_ASIG_FK", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOAPOYOREQUERIDOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOAPOYOREQUERIDOS,:%Old," = "," AND") */
        TW_ALUMNOAPOYOREQUERIDOS.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURAS because TW_ALUMNOAPOYOREQUERIDOS exists.'
      );
    END IF;
  END IF;

  /* TC_ASIGNATURAS  TC_PLANDEESTUDIOSASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTAS_TC_ASIGNA_FK", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PLANDEESTUDIOSASIGNATURA
      SET
        /* %SetFK(TC_PLANDEESTUDIOSASIGNATURA,NULL) */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_PLANDEESTUDIOSASIGNATURA,:%Old," = ",",") */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDASIGNATURA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ASIGNATURAS  TC_ASIGNATURAGRADO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ASIGNATURAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNAGRADO_TC_ASIGNA_FK", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAGRADO
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAGRADO,:%Old," = "," AND") */
        TC_ASIGNATURAGRADO.N_IDASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ASIGNATURAS because TC_ASIGNATURAGRADO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_AUTHORITIES AFTER DELETE ON TC_AUTHORITIES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_AUTHORITIES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_AUTHORITIES  TC_MENU on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001e53b", PARENT_OWNER="", PARENT_TABLE="TC_AUTHORITIES"
    CHILD_OWNER="", CHILD_TABLE="TC_MENU"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MENU_AUT", FK_COLUMNS="S_AUTHORITY" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MENU
      WHERE
        /*  %JoinFKPK(TC_MENU,:%Old," = "," AND") */
        TC_MENU.S_AUTHORITY = :old.S_DESCRIPTION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_AUTHORITIES because TC_MENU exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_AUTHORITIES  TW_GROUP_AUTH on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_AUTHORITIES"
    CHILD_OWNER="", CHILD_TABLE="TW_GROUP_AUTH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_GROUP_AUTH_TC_AUTHORIT_FK1", FK_COLUMNS="N_AUTH_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_GROUP_AUTH
      WHERE
        /*  %JoinFKPK(TW_GROUP_AUTH,:%Old," = "," AND") */
        TW_GROUP_AUTH.N_AUTH_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_AUTHORITIES because TW_GROUP_AUTH exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_AUTHORITIES AFTER UPDATE ON TC_AUTHORITIES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_AUTHORITIES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_AUTHORITIES  TC_MENU on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00021eb0", PARENT_OWNER="", PARENT_TABLE="TC_AUTHORITIES"
    CHILD_OWNER="", CHILD_TABLE="TC_MENU"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MENU_AUT", FK_COLUMNS="S_AUTHORITY" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_MENU
      WHERE
        /*  %JoinFKPK(TC_MENU,:%Old," = "," AND") */
        TC_MENU.S_AUTHORITY = :old.S_DESCRIPTION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_AUTHORITIES because TC_MENU exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_AUTHORITIES  TW_GROUP_AUTH on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_AUTHORITIES"
    CHILD_OWNER="", CHILD_TABLE="TW_GROUP_AUTH"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_GROUP_AUTH_TC_AUTHORIT_FK1", FK_COLUMNS="N_AUTH_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_GROUP_AUTH
      WHERE
        /*  %JoinFKPK(TW_GROUP_AUTH,:%Old," = "," AND") */
        TW_GROUP_AUTH.N_AUTH_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_AUTHORITIES because TW_GROUP_AUTH exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_BAP AFTER DELETE ON TC_BAP for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_BAP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_BAP  TW_ALUMNOBAP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e1a7", PARENT_OWNER="", PARENT_TABLE="TC_BAP"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAP_TC_BAP_FK1", FK_COLUMNS="N_IDBAP" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAP
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAP,:%Old," = "," AND") */
        TW_ALUMNOBAP.N_IDBAP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_BAP because TW_ALUMNOBAP exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_BAP AFTER UPDATE ON TC_BAP for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_BAP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_BAP  TW_ALUMNOBAP on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000e8c7", PARENT_OWNER="", PARENT_TABLE="TC_BAP"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAP_TC_BAP_FK1", FK_COLUMNS="N_IDBAP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOBAP
      SET
        /* %SetFK(TW_ALUMNOBAP,NULL) */
        TW_ALUMNOBAP.N_IDBAP = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOBAP,:%Old," = ",",") */
        TW_ALUMNOBAP.N_IDBAP = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_BAPAPOYOS AFTER DELETE ON TC_BAPAPOYOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_BAPAPOYOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_BAPAPOYOS  TW_ALUMNOBAPAPOYOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fcf5", PARENT_OWNER="", PARENT_TABLE="TC_BAPAPOYOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAPAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUBAP_TC_BAPAPAPOYOS_FK1", FK_COLUMNS="N_IDBAPAPOYOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAPAPOYOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAPAPOYOS,:%Old," = "," AND") */
        TW_ALUMNOBAPAPOYOS.N_IDBAPAPOYOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_BAPAPOYOS because TW_ALUMNOBAPAPOYOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_BAPAPOYOS AFTER UPDATE ON TC_BAPAPOYOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_BAPAPOYOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_BAPAPOYOS  TW_ALUMNOBAPAPOYOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000100ce", PARENT_OWNER="", PARENT_TABLE="TC_BAPAPOYOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAPAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUBAP_TC_BAPAPAPOYOS_FK1", FK_COLUMNS="N_IDBAPAPOYOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOBAPAPOYOS
      SET
        /* %SetFK(TW_ALUMNOBAPAPOYOS,NULL) */
        TW_ALUMNOBAPAPOYOS.N_IDBAPAPOYOS = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOBAPAPOYOS,:%Old," = ",",") */
        TW_ALUMNOBAPAPOYOS.N_IDBAPAPOYOS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_BECA AFTER DELETE ON TC_BECA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_BECA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_BECA  US_ALUMNOBECA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001f304", PARENT_OWNER="", PARENT_TABLE="TC_BECA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="US_ALUMNOBECA_FK1", FK_COLUMNS="N_IDBECA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBECA,:%Old," = "," AND") */
        US_ALUMNOBECA.N_IDBECA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_BECA because US_ALUMNOBECA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_BECA  TW_ALUMNOBECA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_BECA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBECA_TC_BECA_FK", FK_COLUMNS="N_IDBECA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBECA,:%Old," = "," AND") */
        TW_ALUMNOBECA.N_IDBECA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_BECA because TW_ALUMNOBECA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_BECA AFTER UPDATE ON TC_BECA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_BECA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_BECA  US_ALUMNOBECA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00023ac3", PARENT_OWNER="", PARENT_TABLE="TC_BECA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="US_ALUMNOBECA_FK1", FK_COLUMNS="N_IDBECA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBECA,:%Old," = "," AND") */
        US_ALUMNOBECA.N_IDBECA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_BECA because US_ALUMNOBECA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_BECA  TW_ALUMNOBECA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_BECA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBECA_TC_BECA_FK", FK_COLUMNS="N_IDBECA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBECA,:%Old," = "," AND") */
        TW_ALUMNOBECA.N_IDBECA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_BECA because TW_ALUMNOBECA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_BLOQUETIPOTEXTO AFTER DELETE ON TC_BLOQUETIPOTEXTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_BLOQUETIPOTEXTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_BLOQUETIPOTEXTO  TC_ASIGNATURABLOQUE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000113da", PARENT_OWNER="", PARENT_TABLE="TC_BLOQUETIPOTEXTO"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_BLOQUETIPOTEXTO24", FK_COLUMNS="N_IDBLOQUETIPOTEXTO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUE
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUE,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUE.N_IDBLOQUETIPOTEXTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_BLOQUETIPOTEXTO because TC_ASIGNATURABLOQUE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_BLOQUETIPOTEXTO AFTER UPDATE ON TC_BLOQUETIPOTEXTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_BLOQUETIPOTEXTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_BLOQUETIPOTEXTO  TC_ASIGNATURABLOQUE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012ebb", PARENT_OWNER="", PARENT_TABLE="TC_BLOQUETIPOTEXTO"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURABLOQUE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_BLOQUETIPOTEXTO24", FK_COLUMNS="N_IDBLOQUETIPOTEXTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURABLOQUE
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURABLOQUE,:%Old," = "," AND") */
        TC_ASIGNATURABLOQUE.N_IDBLOQUETIPOTEXTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_BLOQUETIPOTEXTO because TC_ASIGNATURABLOQUE exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CAMPOFORMATIVO AFTER DELETE ON TC_CAMPOFORMATIVO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CAMPOFORMATIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CAMPOFORMATIVO  TC_ASIGNATURAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00021e12", PARENT_OWNER="", PARENT_TABLE="TC_CAMPOFORMATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNATURAS_TC_CAMPOFORM_FK", FK_COLUMNS="N_IDCAMPOFORMATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAS
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAS,:%Old," = "," AND") */
        TC_ASIGNATURAS.N_IDCAMPOFORMATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CAMPOFORMATIVO because TC_ASIGNATURAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CAMPOFORMATIVO  US_ASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CAMPOFORMATIVO"
    CHILD_OWNER="", CHILD_TABLE="US_ASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CAMPFORMATIVO_ASIGNATURA", FK_COLUMNS="N_IDCAMPOFORMATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM US_ASIGNATURA
      WHERE
        /*  %JoinFKPK(US_ASIGNATURA,:%Old," = "," AND") */
        US_ASIGNATURA.N_IDCAMPOFORMATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CAMPOFORMATIVO because US_ASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CAMPOFORMATIVO AFTER UPDATE ON TC_CAMPOFORMATIVO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CAMPOFORMATIVO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_CAMPOFORMATIVO  TC_ASIGNATURAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00021cc1", PARENT_OWNER="", PARENT_TABLE="TC_CAMPOFORMATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNATURAS_TC_CAMPOFORM_FK", FK_COLUMNS="N_IDCAMPOFORMATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURAS
      SET
        /* %SetFK(TC_ASIGNATURAS,NULL) */
        TC_ASIGNATURAS.N_IDCAMPOFORMATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURAS,:%Old," = ",",") */
        TC_ASIGNATURAS.N_IDCAMPOFORMATIVO = :old.N_ID;
  END IF;

  /* TC_CAMPOFORMATIVO  US_ASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CAMPOFORMATIVO"
    CHILD_OWNER="", CHILD_TABLE="US_ASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CAMPFORMATIVO_ASIGNATURA", FK_COLUMNS="N_IDCAMPOFORMATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_ASIGNATURA
      SET
        /* %SetFK(US_ASIGNATURA,NULL) */
        US_ASIGNATURA.N_IDCAMPOFORMATIVO = NULL
      WHERE
        /* %JoinFKPK(US_ASIGNATURA,:%Old," = ",",") */
        US_ASIGNATURA.N_IDCAMPOFORMATIVO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CATALOGO AFTER DELETE ON TC_CATALOGO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CATALOGO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CATALOGO  TC_CATALOGOCAMPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00020f66", PARENT_OWNER="", PARENT_TABLE="TC_CATALOGO"
    CHILD_OWNER="", CHILD_TABLE="TC_CATALOGOCAMPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CATALCAMPO__TC_CATAL_FK", FK_COLUMNS="N_IDCATALOGO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CATALOGOCAMPO
      WHERE
        /*  %JoinFKPK(TC_CATALOGOCAMPO,:%Old," = "," AND") */
        TC_CATALOGOCAMPO.N_IDCATALOGO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATALOGO because TC_CATALOGOCAMPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATALOGO  TR_GRUPO_CAT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATALOGO"
    CHILD_OWNER="", CHILD_TABLE="TR_GRUPO_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GRUPO_CAT_FK_CAT", FK_COLUMNS="N_IDCATALOGOS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GRUPO_CAT
      WHERE
        /*  %JoinFKPK(TR_GRUPO_CAT,:%Old," = "," AND") */
        TR_GRUPO_CAT.N_IDCATALOGOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATALOGO because TR_GRUPO_CAT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CATALOGO AFTER UPDATE ON TC_CATALOGO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CATALOGO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_CATALOGO  TC_CATALOGOCAMPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000216c9", PARENT_OWNER="", PARENT_TABLE="TC_CATALOGO"
    CHILD_OWNER="", CHILD_TABLE="TC_CATALOGOCAMPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CATALCAMPO__TC_CATAL_FK", FK_COLUMNS="N_IDCATALOGO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CATALOGOCAMPO
      WHERE
        /*  %JoinFKPK(TC_CATALOGOCAMPO,:%Old," = "," AND") */
        TC_CATALOGOCAMPO.N_IDCATALOGO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATALOGO because TC_CATALOGOCAMPO exists.'
      );
    END IF;
  END IF;

  /* TC_CATALOGO  TR_GRUPO_CAT on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATALOGO"
    CHILD_OWNER="", CHILD_TABLE="TR_GRUPO_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GRUPO_CAT_FK_CAT", FK_COLUMNS="N_IDCATALOGOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GRUPO_CAT
      SET
        /* %SetFK(TR_GRUPO_CAT,NULL) */
        TR_GRUPO_CAT.N_IDCATALOGOS = NULL
      WHERE
        /* %JoinFKPK(TR_GRUPO_CAT,:%Old," = ",",") */
        TR_GRUPO_CAT.N_IDCATALOGOS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CATEGORIA AFTER DELETE ON TC_CATEGORIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CATEGORIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TR_CATEGORIATIPOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0007d07c", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIATIPOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATTIPPERS_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIATIPOPERSONAL
      WHERE
        /*  %JoinFKPK(TR_CATEGORIATIPOPERSONAL,:%Old," = "," AND") */
        TR_CATEGORIATIPOPERSONAL.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TR_CATEGORIATIPOPERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TC_NIVELAUTORIZACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELAUTORIZACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVAUTO_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELAUTORIZACION
      WHERE
        /*  %JoinFKPK(TC_NIVELAUTORIZACION,:%Old," = "," AND") */
        TC_NIVELAUTORIZACION.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TC_NIVELAUTORIZACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TR_CATEGO_NIVELMAGIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGO_NIVELMAGIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CAT_NIVMA_TC_CATEG_FK", FK_COLUMNS="N_IDCATEGORIA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGO_NIVELMAGIS
      WHERE
        /*  %JoinFKPK(TR_CATEGO_NIVELMAGIS,:%Old," = "," AND") */
        TR_CATEGO_NIVELMAGIS.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TR_CATEGO_NIVELMAGIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TR_CATEGORIAFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATEGFUNREAL_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAFUNCIONREAL,:%Old," = "," AND") */
        TR_CATEGORIAFUNCIONREAL.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TR_CATEGORIAFUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TR_CATEGORIAPORMOTIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAPORMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATMOTIVO_TCCATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAPORMOTIVO
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAPORMOTIVO,:%Old," = "," AND") */
        TR_CATEGORIAPORMOTIVO.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TR_CATEGORIAPORMOTIVO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TC_CLAVEPRESUPUESTAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TC_CLAVEPRESUPUESTAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CLAVEPRES_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CLAVEPRESUPUESTAL
      WHERE
        /*  %JoinFKPK(TC_CLAVEPRESUPUESTAL,:%Old," = "," AND") */
        TC_CLAVEPRESUPUESTAL.N_IDCATEGORIAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TC_CLAVEPRESUPUESTAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CATEGORIA  TC_PLAZA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TC_PLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLAZA_CATEGORIA_FK", FK_COLUMNS="N_IDCATEGORIA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLAZA
      WHERE
        /*  %JoinFKPK(TC_PLAZA,:%Old," = "," AND") */
        TC_PLAZA.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CATEGORIA because TC_PLAZA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CATEGORIA AFTER UPDATE ON TC_CATEGORIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CATEGORIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_CATEGORIA  TR_CATEGORIATIPOPERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00088d0f", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIATIPOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATTIPPERS_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIATIPOPERSONAL
      WHERE
        /*  %JoinFKPK(TR_CATEGORIATIPOPERSONAL,:%Old," = "," AND") */
        TR_CATEGORIATIPOPERSONAL.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATEGORIA because TR_CATEGORIATIPOPERSONAL exists.'
      );
    END IF;
  END IF;

  /* TC_CATEGORIA  TC_NIVELAUTORIZACION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELAUTORIZACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVAUTO_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_NIVELAUTORIZACION
      SET
        /* %SetFK(TC_NIVELAUTORIZACION,NULL) */
        TC_NIVELAUTORIZACION.N_IDCATEGORIA = NULL
      WHERE
        /* %JoinFKPK(TC_NIVELAUTORIZACION,:%Old," = ",",") */
        TC_NIVELAUTORIZACION.N_IDCATEGORIA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CATEGORIA  TR_CATEGO_NIVELMAGIS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGO_NIVELMAGIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CAT_NIVMA_TC_CATEG_FK", FK_COLUMNS="N_IDCATEGORIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGO_NIVELMAGIS
      WHERE
        /*  %JoinFKPK(TR_CATEGO_NIVELMAGIS,:%Old," = "," AND") */
        TR_CATEGO_NIVELMAGIS.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATEGORIA because TR_CATEGO_NIVELMAGIS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CATEGORIA  TR_CATEGORIAFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATEGFUNREAL_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAFUNCIONREAL,:%Old," = "," AND") */
        TR_CATEGORIAFUNCIONREAL.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATEGORIA because TR_CATEGORIAFUNCIONREAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CATEGORIA  TR_CATEGORIAPORMOTIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAPORMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATMOTIVO_TCCATEGO_FK", FK_COLUMNS="N_IDCATEGORIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAPORMOTIVO
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAPORMOTIVO,:%Old," = "," AND") */
        TR_CATEGORIAPORMOTIVO.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATEGORIA because TR_CATEGORIAPORMOTIVO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CATEGORIA  TC_CLAVEPRESUPUESTAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TC_CLAVEPRESUPUESTAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CLAVEPRES_TC_CATEGO_FK", FK_COLUMNS="N_IDCATEGORIAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CLAVEPRESUPUESTAL
      WHERE
        /*  %JoinFKPK(TC_CLAVEPRESUPUESTAL,:%Old," = "," AND") */
        TC_CLAVEPRESUPUESTAL.N_IDCATEGORIAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATEGORIA because TC_CLAVEPRESUPUESTAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CATEGORIA  TC_PLAZA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CATEGORIA"
    CHILD_OWNER="", CHILD_TABLE="TC_PLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLAZA_CATEGORIA_FK", FK_COLUMNS="N_IDCATEGORIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PLAZA
      WHERE
        /*  %JoinFKPK(TC_PLAZA,:%Old," = "," AND") */
        TC_PLAZA.N_IDCATEGORIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CATEGORIA because TC_PLAZA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CICLOESCOLAR AFTER DELETE ON TC_CICLOESCOLAR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CICLOESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00380d2c", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_ESCUELAAULA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  US_DISPONIBILIDADDOCENTE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_DISPONIBILIDADDOCENTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CICLOESCOLAR_DISPONIBILIDAD", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_DISPONIBILIDADDOCENTE
      WHERE
        /*  %JoinFKPK(US_DISPONIBILIDADDOCENTE,:%Old," = "," AND") */
        US_DISPONIBILIDADDOCENTE.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because US_DISPONIBILIDADDOCENTE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  SC_CONSEJOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_3876BE01_CD72_48", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM SC_CONSEJOS
      WHERE
        /*  %JoinFKPK(SC_CONSEJOS,:%Old," = "," AND") */
        SC_CONSEJOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because SC_CONSEJOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_SEGREPORTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_CICLOESCOLAR567", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_SEGREPORTES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_DOCUMENTOSGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOSGRADO_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCUMENTOSGRADO
      WHERE
        /*  %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = "," AND") */
        TC_DOCUMENTOSGRADO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_DOCUMENTOSGRADO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_PERSONAFALTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_CICLOESC_FK", FK_COLUMNS="N_CICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTAS
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTAS,:%Old," = "," AND") */
        TW_PERSONAFALTAS.N_CICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_PERSONAFALTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_CALENDARIOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CALENDAES_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CALENDARIOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_CALENDARIOESCOLAR,:%Old," = "," AND") */
        TC_CALENDARIOESCOLAR.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_CALENDARIOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_CAPTUROINASISTENCIAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_CAPTUROINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CAPTUINASIS_TC_CICESC_FK", FK_COLUMNS="N_IDCICLO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CAPTUROINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TR_CAPTUROINASISTENCIAS,:%Old," = "," AND") */
        TR_CAPTUROINASISTENCIAS.N_IDCICLO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_CAPTUROINASISTENCIAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_NOPROMOPLANDEACCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_ASIGNATURAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNATURAS_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAS
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAS,:%Old," = "," AND") */
        TC_ASIGNATURAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_ASIGNATURAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_EDADGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_EDADGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EDADGRADO_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_EDADGRADO
      WHERE
        /*  %JoinFKPK(TC_EDADGRADO,:%Old," = "," AND") */
        TC_EDADGRADO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_EDADGRADO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_SOLICITUDPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_SOLICITUDPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SOLICITUDPERSONA_TC_CI_FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SOLICITUDPERSONA
      WHERE
        /*  %JoinFKPK(TW_SOLICITUDPERSONA,:%Old," = "," AND") */
        TW_SOLICITUDPERSONA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_SOLICITUDPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  US_INSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CICLOESCOLAR_INSCRIPCION", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because US_INSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_CUINORMATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_CICLOESCOLA_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CUINORMATIVA
      WHERE
        /*  %JoinFKPK(TC_CUINORMATIVA,:%Old," = "," AND") */
        TC_CUINORMATIVA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_CUINORMATIVA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_CORRIGEEVALUACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_CORRIGEEVALUACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="N_IDCICLOESCOLAR_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CORRIGEEVALUACIONES
      WHERE
        /*  %JoinFKPK(TW_CORRIGEEVALUACIONES,:%Old," = "," AND") */
        TW_CORRIGEEVALUACIONES.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_CORRIGEEVALUACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_PROCESOSPARAMETROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_CICLOE_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  US_CLAVEHORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_CLAVEHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CLVTEC_CESCOLAR_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_CLAVEHORARIO
      WHERE
        /*  %JoinFKPK(US_CLAVEHORARIO,:%Old," = "," AND") */
        US_CLAVEHORARIO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because US_CLAVEHORARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_BIRACORAARCHIVOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_BIRACORAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITAR_TC_CICLOESCOLAR", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_BIRACORAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_BIRACORAARCHIVOS,:%Old," = "," AND") */
        TW_BIRACORAARCHIVOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_BIRACORAARCHIVOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_FOLIOSPROCESO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOSPROCESO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLIOPROC_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOSPROCESO
      WHERE
        /*  %JoinFKPK(TR_FOLIOSPROCESO,:%Old," = "," AND") */
        TR_FOLIOSPROCESO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_FOLIOSPROCESO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_PERSONALGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERGRU_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALGRUPO
      WHERE
        /*  %JoinFKPK(TR_PERSONALGRUPO,:%Old," = "," AND") */
        TR_PERSONALGRUPO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_PERSONALGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  SC_CONSEJOTECNICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOTECNICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_8065949B_23E6_43", FK_COLUMNS="N_CICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM SC_CONSEJOTECNICO
      WHERE
        /*  %JoinFKPK(SC_CONSEJOTECNICO,:%Old," = "," AND") */
        SC_CONSEJOTECNICO.N_CICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because SC_CONSEJOTECNICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_PERSONALPLAZAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = "," AND") */
        TC_PERSONALPLAZAHISTORICO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_PERSONALPLAZAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_DIAINHABIL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_DIAINHABIL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DIAINHABIL_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DIAINHABIL
      WHERE
        /*  %JoinFKPK(TC_DIAINHABIL,:%Old," = "," AND") */
        TC_DIAINHABIL.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_DIAINHABIL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ALUMNOSOPCIONESESCUELAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOSOPCIONESESCUELAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = "," AND") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ALUMNOSOPCIONESESCUELAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_TIPOASIGNATURAPERIODOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURAPERIODOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOASPE_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TIPOASIGNATURAPERIODOS
      WHERE
        /*  %JoinFKPK(TC_TIPOASIGNATURAPERIODOS,:%Old," = "," AND") */
        TC_TIPOASIGNATURAPERIODOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_TIPOASIGNATURAPERIODOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_PLANESTUDIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANESTUDIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTU_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLANESTUDIOS
      WHERE
        /*  %JoinFKPK(TC_PLANESTUDIOS,:%Old," = "," AND") */
        TC_PLANESTUDIOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_PLANESTUDIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ALUMNOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  SC_EVALUACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SC_EVALUACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RELACIONCICLOESCOLAR", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM SC_EVALUACION
      WHERE
        /*  %JoinFKPK(SC_EVALUACION,:%Old," = "," AND") */
        SC_EVALUACION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because SC_EVALUACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_ESCUELAAULAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ESCUELALIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROS_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROS,:%Old," = "," AND") */
        TW_ESCUELALIBROS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ESCUELALIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_CALENDARIOFALTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="calendarioF_ciclo_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CALENDARIOFALTAS
      WHERE
        /*  %JoinFKPK(TC_CALENDARIOFALTAS,:%Old," = "," AND") */
        TC_CALENDARIOFALTAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_CALENDARIOFALTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ALUMNOASIGNACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIGNA_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNACION
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNACION,:%Old," = "," AND") */
        TW_ALUMNOASIGNACION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ALUMNOASIGNACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_CONCILIACIONPER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_CONCILIACIONPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONCILIACIONPER_CICLO", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONCILIACIONPER
      WHERE
        /*  %JoinFKPK(TW_CONCILIACIONPER,:%Old," = "," AND") */
        TW_CONCILIACIONPER.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_CONCILIACIONPER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  US_HORARIOPLANTILLA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIOPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="HORARIO_CICLO_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIOPLANTILLA
      WHERE
        /*  %JoinFKPK(US_HORARIOPLANTILLA,:%Old," = "," AND") */
        US_HORARIOPLANTILLA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because US_HORARIOPLANTILLA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ESCUELAINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUINC_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ESCUELAINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_ESCUELAPROGRAMAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELAPROGRAMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCPROG_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELAPROGRAMAS
      WHERE
        /*  %JoinFKPK(TR_ESCUELAPROGRAMAS,:%Old," = "," AND") */
        TR_ESCUELAPROGRAMAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_ESCUELAPROGRAMAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ALUMNOMOVIMIENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_REGLAPLANTILLA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_REGLAPLANTILLA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_RUTAREPORTE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_RUTAREPORTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_RUTAREP_TC_CICES_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_RUTAREPORTE
      WHERE
        /*  %JoinFKPK(TC_RUTAREPORTE,:%Old," = "," AND") */
        TC_RUTAREPORTE.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_RUTAREPORTE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_MOVIMIENTOSCICLO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVIMIENTOSCICLO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVIMCICL_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVIMIENTOSCICLO
      WHERE
        /*  %JoinFKPK(TR_MOVIMIENTOSCICLO,:%Old," = "," AND") */
        TR_MOVIMIENTOSCICLO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_MOVIMIENTOSCICLO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_FOLIOSASIGNADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CICLOESC_FOLASIG", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ESCUELACIFRASCONTROL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELACIFRASCONTROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCCIFCON_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELACIFRASCONTROL
      WHERE
        /*  %JoinFKPK(TW_ESCUELACIFRASCONTROL,:%Old," = "," AND") */
        TW_ESCUELACIFRASCONTROL.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ESCUELACIFRASCONTROL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_ALUMNOCICLOESCOLARHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_PARAMETROVALOR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PARAMETROVALOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PARAMVAL_TC_CICES_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PARAMETROVALOR
      WHERE
        /*  %JoinFKPK(TC_PARAMETROVALOR,:%Old," = "," AND") */
        TC_PARAMETROVALOR.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_PARAMETROVALOR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  US_PERSONALASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_PERSONALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERSASIG_CICLO_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_PERSONALASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PERSONALASIGNATURA,:%Old," = "," AND") */
        US_PERSONALASIGNATURA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because US_PERSONALASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TC_TIPOASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOAS_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TIPOASIGNATURA
      WHERE
        /*  %JoinFKPK(TC_TIPOASIGNATURA,:%Old," = "," AND") */
        TC_TIPOASIGNATURA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TC_TIPOASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CICLOESCOLAR  TW_PERSONALCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSONALCICLOESCOLAR__FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_PERSONALCICLOESCOLAR,:%Old," = "," AND") */
        TW_PERSONALCICLOESCOLAR.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CICLOESCOLAR because TW_PERSONALCICLOESCOLAR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CICLOESCOLAR AFTER UPDATE ON TC_CICLOESCOLAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CICLOESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_ESCUELAAULA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="003b3792", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_ESCUELAAULA exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  US_DISPONIBILIDADDOCENTE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_DISPONIBILIDADDOCENTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CICLOESCOLAR_DISPONIBILIDAD", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_DISPONIBILIDADDOCENTE
      SET
        /* %SetFK(US_DISPONIBILIDADDOCENTE,NULL) */
        US_DISPONIBILIDADDOCENTE.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(US_DISPONIBILIDADDOCENTE,:%Old," = ",",") */
        US_DISPONIBILIDADDOCENTE.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  SC_CONSEJOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_3876BE01_CD72_48", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_CONSEJOS
      SET
        /* %SetFK(SC_CONSEJOS,NULL) */
        SC_CONSEJOS.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(SC_CONSEJOS,:%Old," = ",",") */
        SC_CONSEJOS.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_SEGREPORTES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_CICLOESCOLAR567", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_SEGREPORTES exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TC_DOCUMENTOSGRADO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOSGRADO_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DOCUMENTOSGRADO
      SET
        /* %SetFK(TC_DOCUMENTOSGRADO,NULL) */
        TC_DOCUMENTOSGRADO.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = ",",") */
        TC_DOCUMENTOSGRADO.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TW_PERSONAFALTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_CICLOESC_FK", FK_COLUMNS="N_CICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONAFALTAS
      SET
        /* %SetFK(TW_PERSONAFALTAS,NULL) */
        TW_PERSONAFALTAS.N_CICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONAFALTAS,:%Old," = ",",") */
        TW_PERSONAFALTAS.N_CICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_CALENDARIOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CALENDAES_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CALENDARIOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_CALENDARIOESCOLAR,:%Old," = "," AND") */
        TC_CALENDARIOESCOLAR.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_CALENDARIOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_CAPTUROINASISTENCIAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_CAPTUROINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CAPTUINASIS_TC_CICESC_FK", FK_COLUMNS="N_IDCICLO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CAPTUROINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TR_CAPTUROINASISTENCIAS,:%Old," = "," AND") */
        TR_CAPTUROINASISTENCIAS.N_IDCICLO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_CAPTUROINASISTENCIAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_NOPROMOPLANDEACCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TC_ASIGNATURAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNATURAS_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURAS
      SET
        /* %SetFK(TC_ASIGNATURAS,NULL) */
        TC_ASIGNATURAS.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURAS,:%Old," = ",",") */
        TC_ASIGNATURAS.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TC_EDADGRADO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_EDADGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EDADGRADO_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_EDADGRADO
      SET
        /* %SetFK(TC_EDADGRADO,NULL) */
        TC_EDADGRADO.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_EDADGRADO,:%Old," = ",",") */
        TC_EDADGRADO.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TW_SOLICITUDPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_SOLICITUDPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SOLICITUDPERSONA_TC_CI_FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SOLICITUDPERSONA
      SET
        /* %SetFK(TW_SOLICITUDPERSONA,NULL) */
        TW_SOLICITUDPERSONA.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_SOLICITUDPERSONA,:%Old," = ",",") */
        TW_SOLICITUDPERSONA.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  US_INSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CICLOESCOLAR_INSCRIPCION", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because US_INSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TC_CUINORMATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_CICLOESCOLA_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CUINORMATIVA
      SET
        /* %SetFK(TC_CUINORMATIVA,NULL) */
        TC_CUINORMATIVA.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_CUINORMATIVA,:%Old," = ",",") */
        TC_CUINORMATIVA.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TW_CORRIGEEVALUACIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_CORRIGEEVALUACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="N_IDCICLOESCOLAR_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CORRIGEEVALUACIONES
      SET
        /* %SetFK(TW_CORRIGEEVALUACIONES,NULL) */
        TW_CORRIGEEVALUACIONES.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_CORRIGEEVALUACIONES,:%Old," = ",",") */
        TW_CORRIGEEVALUACIONES.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_PROCESOSPARAMETROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_CICLOE_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  US_CLAVEHORARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_CLAVEHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CLVTEC_CESCOLAR_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CLAVEHORARIO
      WHERE
        /*  %JoinFKPK(US_CLAVEHORARIO,:%Old," = "," AND") */
        US_CLAVEHORARIO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because US_CLAVEHORARIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_BIRACORAARCHIVOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_BIRACORAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITAR_TC_CICLOESCOLAR", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_BIRACORAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_BIRACORAARCHIVOS,:%Old," = "," AND") */
        TW_BIRACORAARCHIVOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_BIRACORAARCHIVOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_FOLIOSPROCESO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOSPROCESO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLIOPROC_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOSPROCESO
      WHERE
        /*  %JoinFKPK(TR_FOLIOSPROCESO,:%Old," = "," AND") */
        TR_FOLIOSPROCESO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_FOLIOSPROCESO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_PERSONALGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERGRU_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALGRUPO
      WHERE
        /*  %JoinFKPK(TR_PERSONALGRUPO,:%Old," = "," AND") */
        TR_PERSONALGRUPO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_PERSONALGRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  SC_CONSEJOTECNICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOTECNICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_8065949B_23E6_43", FK_COLUMNS="N_CICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_CONSEJOTECNICO
      SET
        /* %SetFK(SC_CONSEJOTECNICO,NULL) */
        SC_CONSEJOTECNICO.N_CICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(SC_CONSEJOTECNICO,:%Old," = ",",") */
        SC_CONSEJOTECNICO.N_CICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TC_PERSONALPLAZAHISTORICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONALPLAZAHISTORICO
      SET
        /* %SetFK(TC_PERSONALPLAZAHISTORICO,NULL) */
        TC_PERSONALPLAZAHISTORICO.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = ",",") */
        TC_PERSONALPLAZAHISTORICO.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_DIAINHABIL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_DIAINHABIL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DIAINHABIL_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_DIAINHABIL
      WHERE
        /*  %JoinFKPK(TC_DIAINHABIL,:%Old," = "," AND") */
        TC_DIAINHABIL.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_DIAINHABIL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ALUMNOSOPCIONESESCUELAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOSOPCIONESESCUELAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = "," AND") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ALUMNOSOPCIONESESCUELAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_INASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_TIPOASIGNATURAPERIODOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURAPERIODOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOASPE_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_TIPOASIGNATURAPERIODOS
      WHERE
        /*  %JoinFKPK(TC_TIPOASIGNATURAPERIODOS,:%Old," = "," AND") */
        TC_TIPOASIGNATURAPERIODOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_TIPOASIGNATURAPERIODOS exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TC_PLANESTUDIOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANESTUDIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTU_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PLANESTUDIOS
      SET
        /* %SetFK(TC_PLANESTUDIOS,NULL) */
        TC_PLANESTUDIOS.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_PLANESTUDIOS,:%Old," = ",",") */
        TC_PLANESTUDIOS.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ALUMNOCICLOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  SC_EVALUACION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SC_EVALUACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RELACIONCICLOESCOLAR", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_EVALUACION
      SET
        /* %SetFK(SC_EVALUACION,NULL) */
        SC_EVALUACION.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(SC_EVALUACION,:%Old," = ",",") */
        SC_EVALUACION.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_ESCUELAAULAHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ESCUELALIBROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROS_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROS,:%Old," = "," AND") */
        TW_ESCUELALIBROS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ESCUELALIBROS exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TC_CALENDARIOFALTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="calendarioF_ciclo_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CALENDARIOFALTAS
      SET
        /* %SetFK(TC_CALENDARIOFALTAS,NULL) */
        TC_CALENDARIOFALTAS.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_CALENDARIOFALTAS,:%Old," = ",",") */
        TC_CALENDARIOFALTAS.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ALUMNOASIGNACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIGNA_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNACION
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNACION,:%Old," = "," AND") */
        TW_ALUMNOASIGNACION.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ALUMNOASIGNACION exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TW_CONCILIACIONPER on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_CONCILIACIONPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONCILIACIONPER_CICLO", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CONCILIACIONPER
      SET
        /* %SetFK(TW_CONCILIACIONPER,NULL) */
        TW_CONCILIACIONPER.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_CONCILIACIONPER,:%Old," = ",",") */
        TW_CONCILIACIONPER.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  US_HORARIOPLANTILLA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIOPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="HORARIO_CICLO_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIOPLANTILLA
      WHERE
        /*  %JoinFKPK(US_HORARIOPLANTILLA,:%Old," = "," AND") */
        US_HORARIOPLANTILLA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because US_HORARIOPLANTILLA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ESCUELAINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUINC_TC_CICLOESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ESCUELAINCIDENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_ESCUELAPROGRAMAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELAPROGRAMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCPROG_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELAPROGRAMAS
      WHERE
        /*  %JoinFKPK(TR_ESCUELAPROGRAMAS,:%Old," = "," AND") */
        TR_ESCUELAPROGRAMAS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_ESCUELAPROGRAMAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ALUMNOMOVIMIENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_REGLAPLANTILLA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_REGLAPLANTILLA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TC_RUTAREPORTE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_RUTAREPORTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_RUTAREP_TC_CICES_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_RUTAREPORTE
      WHERE
        /*  %JoinFKPK(TC_RUTAREPORTE,:%Old," = "," AND") */
        TC_RUTAREPORTE.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TC_RUTAREPORTE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_MOVIMIENTOSCICLO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVIMIENTOSCICLO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVIMCICL_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVIMIENTOSCICLO
      WHERE
        /*  %JoinFKPK(TR_MOVIMIENTOSCICLO,:%Old," = "," AND") */
        TR_MOVIMIENTOSCICLO.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_MOVIMIENTOSCICLO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TR_MOVPLAZAPERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_CICLESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_FOLIOSASIGNADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CICLOESC_FOLASIG", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CICLOESCOLAR  TW_ESCUELACIFRASCONTROL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELACIFRASCONTROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCCIFCON_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELACIFRASCONTROL
      WHERE
        /*  %JoinFKPK(TW_ESCUELACIFRASCONTROL,:%Old," = "," AND") */
        TW_ESCUELACIFRASCONTROL.N_IDCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CICLOESCOLAR because TW_ESCUELACIFRASCONTROL exists.'
      );
    END IF;
  END IF;

  /* TC_CICLOESCOLAR  TW_ALUMNOCICLOESCOLARHISTORICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOCICLOESCOLARHISTORICO
      SET
        /* %SetFK(TW_ALUMNOCICLOESCOLARHISTORICO,NULL) */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = ",",") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TC_PARAMETROVALOR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PARAMETROVALOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PARAMVAL_TC_CICES_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PARAMETROVALOR
      SET
        /* %SetFK(TC_PARAMETROVALOR,NULL) */
        TC_PARAMETROVALOR.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_PARAMETROVALOR,:%Old," = ",",") */
        TC_PARAMETROVALOR.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  US_PERSONALASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_PERSONALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERSASIG_CICLO_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_PERSONALASIGNATURA
      SET
        /* %SetFK(US_PERSONALASIGNATURA,NULL) */
        US_PERSONALASIGNATURA.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(US_PERSONALASIGNATURA,:%Old," = ",",") */
        US_PERSONALASIGNATURA.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TC_TIPOASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOAS_TC_CICESC_FK", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_TIPOASIGNATURA
      SET
        /* %SetFK(TC_TIPOASIGNATURA,NULL) */
        TC_TIPOASIGNATURA.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_TIPOASIGNATURA,:%Old," = ",",") */
        TC_TIPOASIGNATURA.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;

  /* TC_CICLOESCOLAR  TW_PERSONALCICLOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSONALCICLOESCOLAR__FK1", FK_COLUMNS="N_IDCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONALCICLOESCOLAR
      SET
        /* %SetFK(TW_PERSONALCICLOESCOLAR,NULL) */
        TW_PERSONALCICLOESCOLAR.N_IDCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONALCICLOESCOLAR,:%Old," = ",",") */
        TW_PERSONALCICLOESCOLAR.N_IDCICLOESCOLAR = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CIUDAD AFTER DELETE ON TC_CIUDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CIUDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CIUDAD  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004442a", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDCIUDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CIUDAD because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CIUDAD  TW_ALUMNODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDCIUDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CIUDAD because TW_ALUMNODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CIUDAD  TW_CONTACTODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDCIUDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CIUDAD because TW_CONTACTODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CIUDAD  TW_DOMICILIOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDCIUDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CIUDAD because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CIUDAD AFTER UPDATE ON TC_CIUDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CIUDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_CIUDAD  TW_INMUEBLEDOMICILIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00046289", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLEDOMICILIO
      SET
        /* %SetFK(TW_INMUEBLEDOMICILIO,NULL) */
        TW_INMUEBLEDOMICILIO.N_IDCIUDAD = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = ",",") */
        TW_INMUEBLEDOMICILIO.N_IDCIUDAD = :old.N_ID;
  END IF;

  /* TC_CIUDAD  TW_ALUMNODOMICILIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNODOMICILIO
      SET
        /* %SetFK(TW_ALUMNODOMICILIO,NULL) */
        TW_ALUMNODOMICILIO.N_IDCIUDAD = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = ",",") */
        TW_ALUMNODOMICILIO.N_IDCIUDAD = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CIUDAD  TW_CONTACTODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDCIUDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CIUDAD because TW_CONTACTODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* TC_CIUDAD  TW_DOMICILIOPERSONAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CIUDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_CIUDAD_FK", FK_COLUMNS="N_IDCIUDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_DOMICILIOPERSONAL
      SET
        /* %SetFK(TW_DOMICILIOPERSONAL,NULL) */
        TW_DOMICILIOPERSONAL.N_IDCIUDAD = NULL
      WHERE
        /* %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = ",",") */
        TW_DOMICILIOPERSONAL.N_IDCIUDAD = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CLASIFICAINCIDENCIAS AFTER DELETE ON TC_CLASIFICAINCIDENCIAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CLASIFICAINCIDENCIAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CLASIFICAINCIDENCIAS  TW_PERSONAFALTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00039383", PARENT_OWNER="", PARENT_TABLE="TC_CLASIFICAINCIDENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_CLASIFINCID_FK", FK_COLUMNS="N_IDCLASIFICACIONINC" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTAS
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTAS,:%Old," = "," AND") */
        TW_PERSONAFALTAS.N_IDCLASIFICACIONINC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CLASIFICAINCIDENCIAS because TW_PERSONAFALTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CLASIFICAINCIDENCIAS  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CLASIFICAINCIDENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_CLASIINC_FK", FK_COLUMNS="N_IDCALSIFICAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDCALSIFICAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CLASIFICAINCIDENCIAS because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CLASIFICAINCIDENCIAS  TW_FALTASINASISTENCIAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CLASIFICAINCIDENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TW_FALTASINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FALTASINASISTENCIAS_FK", FK_COLUMNS="N_IDCLASIFICAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FALTASINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TW_FALTASINASISTENCIAS,:%Old," = "," AND") */
        TW_FALTASINASISTENCIAS.N_IDCLASIFICAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CLASIFICAINCIDENCIAS because TW_FALTASINASISTENCIAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CLASIFICAINCIDENCIAS AFTER UPDATE ON TC_CLASIFICAINCIDENCIAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CLASIFICAINCIDENCIAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_CLASIFICAINCIDENCIAS  TW_PERSONAFALTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0003d168", PARENT_OWNER="", PARENT_TABLE="TC_CLASIFICAINCIDENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_CLASIFINCID_FK", FK_COLUMNS="N_IDCLASIFICACIONINC" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONAFALTAS
      SET
        /* %SetFK(TW_PERSONAFALTAS,NULL) */
        TW_PERSONAFALTAS.N_IDCLASIFICACIONINC = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONAFALTAS,:%Old," = ",",") */
        TW_PERSONAFALTAS.N_IDCLASIFICACIONINC = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CLASIFICAINCIDENCIAS  TR_INASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CLASIFICAINCIDENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_CLASIINC_FK", FK_COLUMNS="N_IDCALSIFICAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDCALSIFICAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CLASIFICAINCIDENCIAS because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CLASIFICAINCIDENCIAS  TW_FALTASINASISTENCIAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CLASIFICAINCIDENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TW_FALTASINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FALTASINASISTENCIAS_FK", FK_COLUMNS="N_IDCLASIFICAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FALTASINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TW_FALTASINASISTENCIAS,:%Old," = "," AND") */
        TW_FALTASINASISTENCIAS.N_IDCLASIFICAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CLASIFICAINCIDENCIAS because TW_FALTASINASISTENCIAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CODIGOPOSTAL AFTER DELETE ON TC_CODIGOPOSTAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CODIGOPOSTAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CODIGOPOSTAL  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000591b2", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CODIGOPOSTAL because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CODIGOPOSTAL  TW_ALUMNODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CODIGOPOSTAL because TW_ALUMNODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CODIGOPOSTAL  TW_CONTACTODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CODIGOPOSTAL because TW_CONTACTODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CODIGOPOSTAL  TR_COLONIACP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TR_COLONIACP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_COLONCP_TCCODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_COLONIACP
      WHERE
        /*  %JoinFKPK(TR_COLONIACP,:%Old," = "," AND") */
        TR_COLONIACP.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CODIGOPOSTAL because TR_COLONIACP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_CODIGOPOSTAL  TW_DOMICILIOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CODIGOPOSTAL because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CODIGOPOSTAL AFTER UPDATE ON TC_CODIGOPOSTAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CODIGOPOSTAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_CODIGOPOSTAL  TW_INMUEBLEDOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00062c75", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CODIGOPOSTAL because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CODIGOPOSTAL  TW_ALUMNODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CODIGOPOSTAL because TW_ALUMNODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CODIGOPOSTAL  TW_CONTACTODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CODIGOPOSTAL because TW_CONTACTODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CODIGOPOSTAL  TR_COLONIACP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TR_COLONIACP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_COLONCP_TCCODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_COLONIACP
      WHERE
        /*  %JoinFKPK(TR_COLONIACP,:%Old," = "," AND") */
        TR_COLONIACP.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CODIGOPOSTAL because TR_COLONIACP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_CODIGOPOSTAL  TW_DOMICILIOPERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_CODIGOPOSTAL"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_CODPOS_FK", FK_COLUMNS="N_IDCODIGOPOSTAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDCODIGOPOSTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_CODIGOPOSTAL because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_COLONIA AFTER DELETE ON TC_COLONIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_COLONIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_COLONIA  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00056bc9", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_COLONIA_FK", FK_COLUMNS="N_IDCOLONIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_COLONIA because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_COLONIA  TW_ALUMNODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_COLONIA_FK", FK_COLUMNS="N_IDCOLONIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_COLONIA because TW_ALUMNODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_COLONIA  TW_CONTACTODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_COLONIA_FK", FK_COLUMNS="N_IDCOLONIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_COLONIA because TW_CONTACTODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_COLONIA  TR_COLONIACP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TR_COLONIACP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_COLONCP_TC_COLO_FK", FK_COLUMNS="N_IDCOLONIA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_COLONIACP
      WHERE
        /*  %JoinFKPK(TR_COLONIACP,:%Old," = "," AND") */
        TR_COLONIACP.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_COLONIA because TR_COLONIACP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_COLONIA  TW_DOMICILIOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_COLONIA_FK", FK_COLUMNS="N_IDLOCALIDADCOLONIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDLOCALIDADCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_COLONIA because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_COLONIA AFTER UPDATE ON TC_COLONIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_COLONIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_COLONIA  TW_INMUEBLEDOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00061193", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_COLONIA_FK", FK_COLUMNS="N_IDCOLONIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_COLONIA because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_COLONIA  TW_ALUMNODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_COLONIA_FK", FK_COLUMNS="N_IDCOLONIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_COLONIA because TW_ALUMNODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_COLONIA  TW_CONTACTODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_COLONIA_FK", FK_COLUMNS="N_IDCOLONIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_COLONIA because TW_CONTACTODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_COLONIA  TR_COLONIACP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TR_COLONIACP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_COLONCP_TC_COLO_FK", FK_COLUMNS="N_IDCOLONIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_COLONIACP
      WHERE
        /*  %JoinFKPK(TR_COLONIACP,:%Old," = "," AND") */
        TR_COLONIACP.N_IDCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_COLONIA because TR_COLONIACP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_COLONIA  TW_DOMICILIOPERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_COLONIA"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_COLONIA_FK", FK_COLUMNS="N_IDLOCALIDADCOLONIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDLOCALIDADCOLONIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_COLONIA because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_COORDINACIONSECTORIAL AFTER DELETE ON TC_COORDINACIONSECTORIAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_COORDINACIONSECTORIAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_COORDINACIONSECTORIAL  TC_DIRECCIONOPERATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000120c0", PARENT_OWNER="", PARENT_TABLE="TC_COORDINACIONSECTORIAL"
    CHILD_OWNER="", CHILD_TABLE="TC_DIRECCIONOPERATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DIROPERATIVA_TC_COORSEC_FK", FK_COLUMNS="N_IDCOORDINACIONSECTORIAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DIRECCIONOPERATIVA
      WHERE
        /*  %JoinFKPK(TC_DIRECCIONOPERATIVA,:%Old," = "," AND") */
        TC_DIRECCIONOPERATIVA.N_IDCOORDINACIONSECTORIAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_COORDINACIONSECTORIAL because TC_DIRECCIONOPERATIVA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_COORDINACIONSECTORIAL AFTER UPDATE ON TC_COORDINACIONSECTORIAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_COORDINACIONSECTORIAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_COORDINACIONSECTORIAL  TC_DIRECCIONOPERATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00012057", PARENT_OWNER="", PARENT_TABLE="TC_COORDINACIONSECTORIAL"
    CHILD_OWNER="", CHILD_TABLE="TC_DIRECCIONOPERATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DIROPERATIVA_TC_COORSEC_FK", FK_COLUMNS="N_IDCOORDINACIONSECTORIAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DIRECCIONOPERATIVA
      SET
        /* %SetFK(TC_DIRECCIONOPERATIVA,NULL) */
        TC_DIRECCIONOPERATIVA.N_IDCOORDINACIONSECTORIAL = NULL
      WHERE
        /* %JoinFKPK(TC_DIRECCIONOPERATIVA,:%Old," = ",",") */
        TC_DIRECCIONOPERATIVA.N_IDCOORDINACIONSECTORIAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CUIMODULOS AFTER DELETE ON TC_CUIMODULOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CUIMODULOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CUIMODULOS  TC_CUINORMATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f1c0", PARENT_OWNER="", PARENT_TABLE="TC_CUIMODULOS"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_MODULOS_FK", FK_COLUMNS="N_IDCUIMODULOS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CUINORMATIVA
      WHERE
        /*  %JoinFKPK(TC_CUINORMATIVA,:%Old," = "," AND") */
        TC_CUINORMATIVA.N_IDCUIMODULOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CUIMODULOS because TC_CUINORMATIVA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CUIMODULOS AFTER UPDATE ON TC_CUIMODULOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CUIMODULOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_CUIMODULOS  TC_CUINORMATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000fa10", PARENT_OWNER="", PARENT_TABLE="TC_CUIMODULOS"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_MODULOS_FK", FK_COLUMNS="N_IDCUIMODULOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CUINORMATIVA
      SET
        /* %SetFK(TC_CUINORMATIVA,NULL) */
        TC_CUINORMATIVA.N_IDCUIMODULOS = NULL
      WHERE
        /* %JoinFKPK(TC_CUINORMATIVA,:%Old," = ",",") */
        TC_CUINORMATIVA.N_IDCUIMODULOS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_CUITIPOINFO AFTER DELETE ON TC_CUITIPOINFO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_CUITIPOINFO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_CUITIPOINFO  TC_CUINORMATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f6e2", PARENT_OWNER="", PARENT_TABLE="TC_CUITIPOINFO"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_CUITIPOINFO_FK", FK_COLUMNS="N_IDCUITIPOINFO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CUINORMATIVA
      WHERE
        /*  %JoinFKPK(TC_CUINORMATIVA,:%Old," = "," AND") */
        TC_CUINORMATIVA.N_IDCUITIPOINFO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_CUITIPOINFO because TC_CUINORMATIVA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_CUITIPOINFO AFTER UPDATE ON TC_CUITIPOINFO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_CUITIPOINFO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_CUITIPOINFO  TC_CUINORMATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000fcbd", PARENT_OWNER="", PARENT_TABLE="TC_CUITIPOINFO"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_CUITIPOINFO_FK", FK_COLUMNS="N_IDCUITIPOINFO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CUINORMATIVA
      SET
        /* %SetFK(TC_CUINORMATIVA,NULL) */
        TC_CUINORMATIVA.N_IDCUITIPOINFO = NULL
      WHERE
        /* %JoinFKPK(TC_CUINORMATIVA,:%Old," = ",",") */
        TC_CUINORMATIVA.N_IDCUITIPOINFO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DATOSREPORTESESPECIALES AFTER DELETE ON TC_DATOSREPORTESESPECIALES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DATOSREPORTESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DATOSREPORTESESPECIALES  TW_DATOSREPORTESESPECIALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000136ab", PARENT_OWNER="", PARENT_TABLE="TC_DATOSREPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSREPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATREPESP_TC_DATREPESP_FK", FK_COLUMNS="N_IDDATOSREPORTE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSREPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_DATOSREPORTESESPECIALES,:%Old," = "," AND") */
        TW_DATOSREPORTESESPECIALES.N_IDDATOSREPORTE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DATOSREPORTESESPECIALES because TW_DATOSREPORTESESPECIALES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DATOSREPORTESESPECIALES AFTER UPDATE ON TC_DATOSREPORTESESPECIALES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DATOSREPORTESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_DATOSREPORTESESPECIALES  TW_DATOSREPORTESESPECIALES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014a70", PARENT_OWNER="", PARENT_TABLE="TC_DATOSREPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSREPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATREPESP_TC_DATREPESP_FK", FK_COLUMNS="N_IDDATOSREPORTE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSREPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_DATOSREPORTESESPECIALES,:%Old," = "," AND") */
        TW_DATOSREPORTESESPECIALES.N_IDDATOSREPORTE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DATOSREPORTESESPECIALES because TW_DATOSREPORTESESPECIALES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DEPENDENCIANORMATIVA AFTER DELETE ON TC_DEPENDENCIANORMATIVA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DEPENDENCIANORMATIVA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DEPENDENCIANORMATIVA  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000390e3", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIANORMATIVA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_DEPENDENCIA_FK2", FK_COLUMNS="N_IDDEPENDENCIANORMATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDDEPENDENCIANORMATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DEPENDENCIANORMATIVA because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DEPENDENCIANORMATIVA  TR_INMUEBLE_LOCAL_CT_HIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIANORMATIVA"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT_HIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DEPENDENCIANORMATIVA_H_FK", FK_COLUMNS="N_IDDEPENDENCIANORMATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLE_LOCAL_CT_HIS
      WHERE
        /*  %JoinFKPK(TR_INMUEBLE_LOCAL_CT_HIS,:%Old," = "," AND") */
        TR_INMUEBLE_LOCAL_CT_HIS.N_IDDEPENDENCIANORMATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DEPENDENCIANORMATIVA because TR_INMUEBLE_LOCAL_CT_HIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DEPENDENCIANORMATIVA  TR_INMUEBLE_LOCAL_CT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIANORMATIVA"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DEPENDENCIANORMATIVA_FK", FK_COLUMNS="N_IDDEPENDENCIANORMATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLE_LOCAL_CT
      WHERE
        /*  %JoinFKPK(TR_INMUEBLE_LOCAL_CT,:%Old," = "," AND") */
        TR_INMUEBLE_LOCAL_CT.N_IDDEPENDENCIANORMATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DEPENDENCIANORMATIVA because TR_INMUEBLE_LOCAL_CT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DEPENDENCIANORMATIVA AFTER UPDATE ON TC_DEPENDENCIANORMATIVA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DEPENDENCIANORMATIVA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_DEPENDENCIANORMATIVA  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00038c5d", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIANORMATIVA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_DEPENDENCIA_FK2", FK_COLUMNS="N_IDDEPENDENCIANORMATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDDEPENDENCIANORMATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DEPENDENCIANORMATIVA because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_DEPENDENCIANORMATIVA  TR_INMUEBLE_LOCAL_CT_HIS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIANORMATIVA"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT_HIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DEPENDENCIANORMATIVA_H_FK", FK_COLUMNS="N_IDDEPENDENCIANORMATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_INMUEBLE_LOCAL_CT_HIS
      SET
        /* %SetFK(TR_INMUEBLE_LOCAL_CT_HIS,NULL) */
        TR_INMUEBLE_LOCAL_CT_HIS.N_IDDEPENDENCIANORMATIVA = NULL
      WHERE
        /* %JoinFKPK(TR_INMUEBLE_LOCAL_CT_HIS,:%Old," = ",",") */
        TR_INMUEBLE_LOCAL_CT_HIS.N_IDDEPENDENCIANORMATIVA = :old.N_ID;
  END IF;

  /* TC_DEPENDENCIANORMATIVA  TR_INMUEBLE_LOCAL_CT on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIANORMATIVA"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DEPENDENCIANORMATIVA_FK", FK_COLUMNS="N_IDDEPENDENCIANORMATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_INMUEBLE_LOCAL_CT
      SET
        /* %SetFK(TR_INMUEBLE_LOCAL_CT,NULL) */
        TR_INMUEBLE_LOCAL_CT.N_IDDEPENDENCIANORMATIVA = NULL
      WHERE
        /* %JoinFKPK(TR_INMUEBLE_LOCAL_CT,:%Old," = ",",") */
        TR_INMUEBLE_LOCAL_CT.N_IDDEPENDENCIANORMATIVA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DEPENDENCIAOPERATIVA AFTER DELETE ON TC_DEPENDENCIAOPERATIVA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DEPENDENCIAOPERATIVA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DEPENDENCIAOPERATIVA  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010e3c", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIAOPERATIVA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_DEPENDENCIA_FK1", FK_COLUMNS="N_IDDEPENDENCIAOPERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDDEPENDENCIAOPERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DEPENDENCIAOPERATIVA because TC_ESCUELA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DEPENDENCIAOPERATIVA AFTER UPDATE ON TC_DEPENDENCIAOPERATIVA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DEPENDENCIAOPERATIVA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_DEPENDENCIAOPERATIVA  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000126f7", PARENT_OWNER="", PARENT_TABLE="TC_DEPENDENCIAOPERATIVA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_DEPENDENCIA_FK1", FK_COLUMNS="N_IDDEPENDENCIAOPERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDDEPENDENCIAOPERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DEPENDENCIAOPERATIVA because TC_ESCUELA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DERECHOHABIENCIA AFTER DELETE ON TC_DERECHOHABIENCIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DERECHOHABIENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DERECHOHABIENCIA  TC_ALUMNOCOMPLEMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000111b2", PARENT_OWNER="", PARENT_TABLE="TC_DERECHOHABIENCIA"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOSOPCESC_TC_DEREH_FK", FK_COLUMNS="N_IDDERECHOHABIENCIA1" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDDERECHOHABIENCIA1 = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DERECHOHABIENCIA because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DERECHOHABIENCIA AFTER UPDATE ON TC_DERECHOHABIENCIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DERECHOHABIENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_DERECHOHABIENCIA  TC_ALUMNOCOMPLEMENTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001236e", PARENT_OWNER="", PARENT_TABLE="TC_DERECHOHABIENCIA"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOSOPCESC_TC_DEREH_FK", FK_COLUMNS="N_IDDERECHOHABIENCIA1" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNOCOMPLEMENTO
      SET
        /* %SetFK(TC_ALUMNOCOMPLEMENTO,NULL) */
        TC_ALUMNOCOMPLEMENTO.N_IDDERECHOHABIENCIA1 = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = ",",") */
        TC_ALUMNOCOMPLEMENTO.N_IDDERECHOHABIENCIA1 = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DETALLESERVICIO AFTER DELETE ON TC_DETALLESERVICIO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DETALLESERVICIO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DETALLESERVICIO  TW_SERVICIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010f49", PARENT_OWNER="", PARENT_TABLE="TC_DETALLESERVICIO"
    CHILD_OWNER="", CHILD_TABLE="TW_SERVICIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SERDET_TC_DETSERFK", FK_COLUMNS="N_IDDETALLESERVICIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SERVICIODETALLE
      WHERE
        /*  %JoinFKPK(TW_SERVICIODETALLE,:%Old," = "," AND") */
        TW_SERVICIODETALLE.N_IDDETALLESERVICIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DETALLESERVICIO because TW_SERVICIODETALLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DETALLESERVICIO AFTER UPDATE ON TC_DETALLESERVICIO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DETALLESERVICIO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_DETALLESERVICIO  TW_SERVICIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000110c6", PARENT_OWNER="", PARENT_TABLE="TC_DETALLESERVICIO"
    CHILD_OWNER="", CHILD_TABLE="TW_SERVICIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SERDET_TC_DETSERFK", FK_COLUMNS="N_IDDETALLESERVICIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SERVICIODETALLE
      SET
        /* %SetFK(TW_SERVICIODETALLE,NULL) */
        TW_SERVICIODETALLE.N_IDDETALLESERVICIO = NULL
      WHERE
        /* %JoinFKPK(TW_SERVICIODETALLE,:%Old," = ",",") */
        TW_SERVICIODETALLE.N_IDDETALLESERVICIO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DIALECTOINDIGENA AFTER DELETE ON TC_DIALECTOINDIGENA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DIALECTOINDIGENA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DIALECTOINDIGENA  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000339a3", PARENT_OWNER="", PARENT_TABLE="TC_DIALECTOINDIGENA"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_DIALECTOINDI_FK", FK_COLUMNS="N_IDDIALECTOINDIGENA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDDIALECTOINDIGENA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DIALECTOINDIGENA because TC_ALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DIALECTOINDIGENA  TW_PERSONALDIALECTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DIALECTOINDIGENA"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALDIALECTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERDIA_TC_DIALINDIGENA_FK", FK_COLUMNS="N_IDPERSONALDIALECTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALDIALECTO
      WHERE
        /*  %JoinFKPK(TW_PERSONALDIALECTO,:%Old," = "," AND") */
        TW_PERSONALDIALECTO.N_IDPERSONALDIALECTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DIALECTOINDIGENA because TW_PERSONALDIALECTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DIALECTOINDIGENA  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DIALECTOINDIGENA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALCONTACTOS_DIALIND", FK_COLUMNS="N_INDIGENA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_INDIGENA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DIALECTOINDIGENA because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DIALECTOINDIGENA AFTER UPDATE ON TC_DIALECTOINDIGENA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DIALECTOINDIGENA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_DIALECTOINDIGENA  TC_ALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003af7c", PARENT_OWNER="", PARENT_TABLE="TC_DIALECTOINDIGENA"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_DIALECTOINDI_FK", FK_COLUMNS="N_IDDIALECTOINDIGENA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDDIALECTOINDIGENA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DIALECTOINDIGENA because TC_ALUMNO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_DIALECTOINDIGENA  TW_PERSONALDIALECTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DIALECTOINDIGENA"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALDIALECTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERDIA_TC_DIALINDIGENA_FK", FK_COLUMNS="N_IDPERSONALDIALECTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALDIALECTO
      WHERE
        /*  %JoinFKPK(TW_PERSONALDIALECTO,:%Old," = "," AND") */
        TW_PERSONALDIALECTO.N_IDPERSONALDIALECTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DIALECTOINDIGENA because TW_PERSONALDIALECTO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_DIALECTOINDIGENA  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DIALECTOINDIGENA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALCONTACTOS_DIALIND", FK_COLUMNS="N_INDIGENA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_INDIGENA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DIALECTOINDIGENA because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DIRECCIONOPERATIVA AFTER DELETE ON TC_DIRECCIONOPERATIVA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DIRECCIONOPERATIVA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DIRECCIONOPERATIVA  TC_JEFATURASECTORIAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001155d", PARENT_OWNER="", PARENT_TABLE="TC_DIRECCIONOPERATIVA"
    CHILD_OWNER="", CHILD_TABLE="TC_JEFATURASECTORIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_JEFSEC_TC_DIROPERA_FK", FK_COLUMNS="N_IDDIRECCIONOPERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_JEFATURASECTORIAL
      WHERE
        /*  %JoinFKPK(TC_JEFATURASECTORIAL,:%Old," = "," AND") */
        TC_JEFATURASECTORIAL.N_IDDIRECCIONOPERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DIRECCIONOPERATIVA because TC_JEFATURASECTORIAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DIRECCIONOPERATIVA AFTER UPDATE ON TC_DIRECCIONOPERATIVA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DIRECCIONOPERATIVA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_DIRECCIONOPERATIVA  TC_JEFATURASECTORIAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000138ef", PARENT_OWNER="", PARENT_TABLE="TC_DIRECCIONOPERATIVA"
    CHILD_OWNER="", CHILD_TABLE="TC_JEFATURASECTORIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_JEFSEC_TC_DIROPERA_FK", FK_COLUMNS="N_IDDIRECCIONOPERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_JEFATURASECTORIAL
      WHERE
        /*  %JoinFKPK(TC_JEFATURASECTORIAL,:%Old," = "," AND") */
        TC_JEFATURASECTORIAL.N_IDDIRECCIONOPERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DIRECCIONOPERATIVA because TC_JEFATURASECTORIAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DOCTOACREDITACION AFTER DELETE ON TC_DOCTOACREDITACION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DOCTOACREDITACION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DOCTOACREDITACION  TC_DOCTOINMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000101a8", PARENT_OWNER="", PARENT_TABLE="TC_DOCTOACREDITACION"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCTOINMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOINM_DOCTOACRE_FK", FK_COLUMNS="N_IDDOCTOACREDITACION" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCTOINMUEBLE
      WHERE
        /*  %JoinFKPK(TC_DOCTOINMUEBLE,:%Old," = "," AND") */
        TC_DOCTOINMUEBLE.N_IDDOCTOACREDITACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DOCTOACREDITACION because TC_DOCTOINMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DOCTOACREDITACION AFTER UPDATE ON TC_DOCTOACREDITACION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DOCTOACREDITACION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_DOCTOACREDITACION  TC_DOCTOINMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000110f9", PARENT_OWNER="", PARENT_TABLE="TC_DOCTOACREDITACION"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCTOINMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOINM_DOCTOACRE_FK", FK_COLUMNS="N_IDDOCTOACREDITACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DOCTOINMUEBLE
      SET
        /* %SetFK(TC_DOCTOINMUEBLE,NULL) */
        TC_DOCTOINMUEBLE.N_IDDOCTOACREDITACION = NULL
      WHERE
        /* %JoinFKPK(TC_DOCTOINMUEBLE,:%Old," = ",",") */
        TC_DOCTOINMUEBLE.N_IDDOCTOACREDITACION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_DOCUMENTOS AFTER DELETE ON TC_DOCUMENTOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_DOCUMENTOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_DOCUMENTOS  TC_DOCUMENTOSGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005a4f7", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOSGRADO_TC_DOCTO_FK", FK_COLUMNS="N_IDDOCUMENTOS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCUMENTOSGRADO
      WHERE
        /*  %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = "," AND") */
        TC_DOCUMENTOSGRADO.N_IDDOCUMENTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DOCUMENTOS because TC_DOCUMENTOSGRADO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DOCUMENTOS  TW_ALUMNODOCUMENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOC_TC_DOCUMENTOS_FK", FK_COLUMNS="N_IDDOCUMENTOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOCUMENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOCUMENTOS,:%Old," = "," AND") */
        TW_ALUMNODOCUMENTOS.N_IDDOCUMENTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DOCUMENTOS because TW_ALUMNODOCUMENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DOCUMENTOS  US_DOCUMENTOSINSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTOSINSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="DOCUMENTOSINSCRIPCION_DOCTO_FK", FK_COLUMNS="N_IDDOCUMENTO" */
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTOSINSCRIPCION
      WHERE
        /*  %JoinFKPK(US_DOCUMENTOSINSCRIPCION,:%Old," = "," AND") */
        US_DOCUMENTOSINSCRIPCION.N_IDDOCUMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DOCUMENTOS because US_DOCUMENTOSINSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DOCUMENTOS  TR_TRAMITEDOCUMENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TR_TRAMITEDOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_TRADOC_TC_DOCUMENTOS_FK", FK_COLUMNS="N_IDDOCUMENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_TRAMITEDOCUMENTOS
      WHERE
        /*  %JoinFKPK(TR_TRAMITEDOCUMENTOS,:%Old," = "," AND") */
        TR_TRAMITEDOCUMENTOS.N_IDDOCUMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DOCUMENTOS because TR_TRAMITEDOCUMENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_DOCUMENTOS  TR_REQUISITOSDOCUMENTALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TR_REQUISITOSDOCUMENTALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REQDOC_TC_DOCUME_FK", FK_COLUMNS="N_IDDOCUMENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_REQUISITOSDOCUMENTALES
      WHERE
        /*  %JoinFKPK(TR_REQUISITOSDOCUMENTALES,:%Old," = "," AND") */
        TR_REQUISITOSDOCUMENTALES.N_IDDOCUMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_DOCUMENTOS because TR_REQUISITOSDOCUMENTALES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_DOCUMENTOS AFTER UPDATE ON TC_DOCUMENTOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_DOCUMENTOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_DOCUMENTOS  TC_DOCUMENTOSGRADO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00063fd4", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOSGRADO_TC_DOCTO_FK", FK_COLUMNS="N_IDDOCUMENTOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCUMENTOSGRADO
      WHERE
        /*  %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = "," AND") */
        TC_DOCUMENTOSGRADO.N_IDDOCUMENTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DOCUMENTOS because TC_DOCUMENTOSGRADO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_DOCUMENTOS  TW_ALUMNODOCUMENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOC_TC_DOCUMENTOS_FK", FK_COLUMNS="N_IDDOCUMENTOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOCUMENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOCUMENTOS,:%Old," = "," AND") */
        TW_ALUMNODOCUMENTOS.N_IDDOCUMENTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DOCUMENTOS because TW_ALUMNODOCUMENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_DOCUMENTOS  US_DOCUMENTOSINSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTOSINSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="DOCUMENTOSINSCRIPCION_DOCTO_FK", FK_COLUMNS="N_IDDOCUMENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTOSINSCRIPCION
      WHERE
        /*  %JoinFKPK(US_DOCUMENTOSINSCRIPCION,:%Old," = "," AND") */
        US_DOCUMENTOSINSCRIPCION.N_IDDOCUMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DOCUMENTOS because US_DOCUMENTOSINSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_DOCUMENTOS  TR_TRAMITEDOCUMENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TR_TRAMITEDOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_TRADOC_TC_DOCUMENTOS_FK", FK_COLUMNS="N_IDDOCUMENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_TRAMITEDOCUMENTOS
      WHERE
        /*  %JoinFKPK(TR_TRAMITEDOCUMENTOS,:%Old," = "," AND") */
        TR_TRAMITEDOCUMENTOS.N_IDDOCUMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DOCUMENTOS because TR_TRAMITEDOCUMENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_DOCUMENTOS  TR_REQUISITOSDOCUMENTALES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_DOCUMENTOS"
    CHILD_OWNER="", CHILD_TABLE="TR_REQUISITOSDOCUMENTALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REQDOC_TC_DOCUME_FK", FK_COLUMNS="N_IDDOCUMENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_REQUISITOSDOCUMENTALES
      WHERE
        /*  %JoinFKPK(TR_REQUISITOSDOCUMENTALES,:%Old," = "," AND") */
        TR_REQUISITOSDOCUMENTALES.N_IDDOCUMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_DOCUMENTOS because TR_REQUISITOSDOCUMENTALES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ENTIDADESFEDERATIVAS AFTER DELETE ON TC_ENTIDADESFEDERATIVAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ENTIDADESFEDERATIVAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000baa73", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TC_MUNICIPIODELEGACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_MUNICIPIODELEGACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MUNICDEL_TC_ENTIFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MUNICIPIODELEGACIONES
      WHERE
        /*  %JoinFKPK(TC_MUNICIPIODELEGACIONES,:%Old," = "," AND") */
        TC_MUNICIPIODELEGACIONES.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TC_MUNICIPIODELEGACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TC_CIUDAD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_CIUDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CIUDAD_TC_ENTFEDE_FK", FK_COLUMNS="N_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CIUDAD
      WHERE
        /*  %JoinFKPK(TC_CIUDAD,:%Old," = "," AND") */
        TC_CIUDAD.N_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TC_CIUDAD exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ENTFED_FK", FK_COLUMNS="N_IDENTFEDNAC" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDENTFEDNAC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TC_PERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIFEDERDENAC" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDENTIFEDERDENAC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TC_ALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TW_ALUMNODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TW_ALUMNODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TW_CONTACTODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TW_CONTACTODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOCONTACTOS_ENTNAC", FK_COLUMNS="N_IDENTIFEDERDENAC" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDENTIFEDERDENAC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TW_USUARIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_ENTFED_FK", FK_COLUMNS="N_IDESTADONACIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDESTADONACIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TW_USUARIODETALLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ENTIDADESFEDERATIVAS  TW_DOMICILIOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ENTIDADESFEDERATIVAS because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ENTIDADESFEDERATIVAS AFTER UPDATE ON TC_ENTIDADESFEDERATIVAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ENTIDADESFEDERATIVAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TW_INMUEBLEDOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000cb4dc", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TC_MUNICIPIODELEGACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_MUNICIPIODELEGACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MUNICDEL_TC_ENTIFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_MUNICIPIODELEGACIONES
      WHERE
        /*  %JoinFKPK(TC_MUNICIPIODELEGACIONES,:%Old," = "," AND") */
        TC_MUNICIPIODELEGACIONES.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TC_MUNICIPIODELEGACIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TC_CIUDAD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_CIUDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CIUDAD_TC_ENTFEDE_FK", FK_COLUMNS="N_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CIUDAD
      WHERE
        /*  %JoinFKPK(TC_CIUDAD,:%Old," = "," AND") */
        TC_CIUDAD.N_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TC_CIUDAD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ENTFED_FK", FK_COLUMNS="N_IDENTFEDNAC" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDENTFEDNAC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TC_PERSONAL exists.'
      );
    END IF;
  END IF;

  /* TC_ENTIDADESFEDERATIVAS  TC_ALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIFEDERDENAC" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNO
      SET
        /* %SetFK(TC_ALUMNO,NULL) */
        TC_ALUMNO.N_IDENTIFEDERDENAC = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNO,:%Old," = ",",") */
        TC_ALUMNO.N_IDENTIFEDERDENAC = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TW_ALUMNODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TW_ALUMNODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TW_CONTACTODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONDOM_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_CONTACTODOMICILIO,:%Old," = "," AND") */
        TW_CONTACTODOMICILIO.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TW_CONTACTODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOCONTACTOS_ENTNAC", FK_COLUMNS="N_IDENTIFEDERDENAC" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDENTIFEDERDENAC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TW_USUARIODETALLE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_ENTFED_FK", FK_COLUMNS="N_IDESTADONACIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDESTADONACIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TW_USUARIODETALLE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ENTIDADESFEDERATIVAS  TW_DOMICILIOPERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ENTIDADESFEDERATIVAS"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_ENTFED_FK", FK_COLUMNS="N_IDENTIDADFEDERATIVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDENTIDADFEDERATIVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ENTIDADESFEDERATIVAS because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESCOLARIDAD AFTER DELETE ON TC_ESCOLARIDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESCOLARIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESCOLARIDAD  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00058541", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ESCOLARIDAD_FK", FK_COLUMNS="N_IDNIVELESTUDIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDNIVELESTUDIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCOLARIDAD because TC_PERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCOLARIDAD  TW_HISTORIAACADEMICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_ESCOLARIDAD_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_HISTORIAACADEMICA
      WHERE
        /*  %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = "," AND") */
        TW_HISTORIAACADEMICA.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCOLARIDAD because TW_HISTORIAACADEMICA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCOLARIDAD  TR_PERFILFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TR_PERFILFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERFUNRE_TC_ESCOLA_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERFILFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERFILFUNCIONREAL,:%Old," = "," AND") */
        TR_PERFILFUNCIONREAL.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCOLARIDAD because TR_PERFILFUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCOLARIDAD  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_ESCO_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCOLARIDAD because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCOLARIDAD  TW_USUARIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_ESCOLARIDAD_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCOLARIDAD because TW_USUARIODETALLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESCOLARIDAD AFTER UPDATE ON TC_ESCOLARIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESCOLARIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESCOLARIDAD  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00060d35", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ESCOLARIDAD_FK", FK_COLUMNS="N_IDNIVELESTUDIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDNIVELESTUDIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCOLARIDAD because TC_PERSONAL exists.'
      );
    END IF;
  END IF;

  /* TC_ESCOLARIDAD  TW_HISTORIAACADEMICA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_ESCOLARIDAD_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_HISTORIAACADEMICA
      SET
        /* %SetFK(TW_HISTORIAACADEMICA,NULL) */
        TW_HISTORIAACADEMICA.N_IDESCOLARIDAD = NULL
      WHERE
        /* %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = ",",") */
        TW_HISTORIAACADEMICA.N_IDESCOLARIDAD = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCOLARIDAD  TR_PERFILFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TR_PERFILFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERFUNRE_TC_ESCOLA_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERFILFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERFILFUNCIONREAL,:%Old," = "," AND") */
        TR_PERFILFUNCIONREAL.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCOLARIDAD because TR_PERFILFUNCIONREAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCOLARIDAD  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_ESCO_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCOLARIDAD because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCOLARIDAD  TW_USUARIODETALLE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCOLARIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_ESCOLARIDAD_FK", FK_COLUMNS="N_IDESCOLARIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDESCOLARIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCOLARIDAD because TW_USUARIODETALLE exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESCUELA AFTER DELETE ON TC_ESCUELA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00294068", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_TC_ESCUELA_FK1", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_ESCUELAAULA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  SC_CONSEJOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_C107E035_2E25_43", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM SC_CONSEJOS
      WHERE
        /*  %JoinFKPK(SC_CONSEJOS,:%Old," = "," AND") */
        SC_CONSEJOS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because SC_CONSEJOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_SEGREPORTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ESCUELA570", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_SEGREPORTES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_PERSONALPLAZAESCUELAHIST on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELAHIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAESH_TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELAHIST
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELAHIST,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELAHIST.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_PERSONALPLAZAESCUELAHIST exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_COMUNICADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMUNICADOS_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOS,:%Old," = "," AND") */
        TW_COMUNICADOS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_COMUNICADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_CAPTUROINASISTENCIAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_CAPTUROINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CAPTUINASIS_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CAPTUROINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TR_CAPTUROINASISTENCIAS,:%Old," = "," AND") */
        TR_CAPTUROINASISTENCIAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_CAPTUROINASISTENCIAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_NOPROMOPLANDEACCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  SW_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_T_N_ID_S_N_CENTRO", FK_COLUMNS="N_CENTRO" */
    SELECT count(*) INTO NUMROWS
      FROM SW_VISITAS
      WHERE
        /*  %JoinFKPK(SW_VISITAS,:%Old," = "," AND") */
        SW_VISITAS.N_CENTRO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because SW_VISITAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_SOLICITUDPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_SOLICITUDPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SOLICITUDPERSONA_TC_ES_FK1", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SOLICITUDPERSONA
      WHERE
        /*  %JoinFKPK(TW_SOLICITUDPERSONA,:%Old," = "," AND") */
        TW_SOLICITUDPERSONA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_SOLICITUDPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  US_INSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCUELA_INSCRIPCION", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because US_INSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_ESCUELASPROCESARFLUJO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELASPROCESARFLUJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELASPROCESARESCUELA", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELASPROCESARFLUJO
      WHERE
        /*  %JoinFKPK(TC_ESCUELASPROCESARFLUJO,:%Old," = "," AND") */
        TC_ESCUELASPROCESARFLUJO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_ESCUELASPROCESARFLUJO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  US_LIBRO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_ESCUELA", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because US_LIBRO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_PERSONACANDIDATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONACANDIDATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ESCUELA577", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONACANDIDATO
      WHERE
        /*  %JoinFKPK(TR_PERSONACANDIDATO,:%Old," = "," AND") */
        TR_PERSONACANDIDATO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_PERSONACANDIDATO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_BITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_BITACORA
      WHERE
        /*  %JoinFKPK(TW_BITACORA,:%Old," = "," AND") */
        TW_BITACORA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_BITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_PLANTILLAAUTORIZADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PLANTILLAAUTORIZADA
      WHERE
        /*  %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = "," AND") */
        TW_PLANTILLAAUTORIZADA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_PLANTILLAAUTORIZADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_ALUMNOSOPCIONESESCUELAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOSOPCIONESESCUELAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = "," AND") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_ALUMNOSOPCIONESESCUELAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_PERSONAREEMPLAZO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM__TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_FOLIOTRAMITE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOTRAMITE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLTRAM_TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOTRAMITE
      WHERE
        /*  %JoinFKPK(TR_FOLIOTRAMITE,:%Old," = "," AND") */
        TR_FOLIOTRAMITE.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_FOLIOTRAMITE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  SC_EVALUACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="SC_EVALUACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RELACIONESCUELA", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM SC_EVALUACION
      WHERE
        /*  %JoinFKPK(SC_EVALUACION,:%Old," = "," AND") */
        SC_EVALUACION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because SC_EVALUACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_ESCUELAAULAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_TC_ESC_FK1", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_ESCUELALIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROS_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROS,:%Old," = "," AND") */
        TW_ESCUELALIBROS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_ESCUELALIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_ESCUELATELEFONO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELATELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCTEL_TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELATELEFONO
      WHERE
        /*  %JoinFKPK(TR_ESCUELATELEFONO,:%Old," = "," AND") */
        TR_ESCUELATELEFONO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_ESCUELATELEFONO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_ALUMNOASIGNACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIGNA_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNACION
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNACION,:%Old," = "," AND") */
        TW_ALUMNOASIGNACION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_ALUMNOASIGNACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_ESCUELAINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUINC_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_ESCUELAINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_ESCUELAPROGRAMAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELAPROGRAMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCPROG_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELAPROGRAMAS
      WHERE
        /*  %JoinFKPK(TR_ESCUELAPROGRAMAS,:%Old," = "," AND") */
        TR_ESCUELAPROGRAMAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_ESCUELAPROGRAMAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_COMUNICADOSDESTINATARIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOSDESTINATARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMDES_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOSDESTINATARIOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOSDESTINATARIOS,:%Old," = "," AND") */
        TW_COMUNICADOSDESTINATARIOS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_COMUNICADOSDESTINATARIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_REPEVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVA_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVA
      WHERE
        /*  %JoinFKPK(TW_REPEVA,:%Old," = "," AND") */
        TW_REPEVA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_REPEVA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  US_CONTACTOWEB on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_CONTACTOWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCUELA_CONTACTOWEB_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM US_CONTACTOWEB
      WHERE
        /*  %JoinFKPK(US_CONTACTOWEB,:%Old," = "," AND") */
        US_CONTACTOWEB.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because US_CONTACTOWEB exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  US_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCUELA_ESCUELAAULA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(US_ESCUELAAULA,:%Old," = "," AND") */
        US_ESCUELAAULA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because US_ESCUELAAULA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_PLAZAASIGNADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAASI_TC_ESCUELA_FK", FK_COLUMNS="N_CCTPAGO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_CCTPAGO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_PLAZAASIGNADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  US_RESTRICCIONHESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_RESTRICCIONHESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RESTHESCUELA_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM US_RESTRICCIONHESCUELA
      WHERE
        /*  %JoinFKPK(US_RESTRICCIONHESCUELA,:%Old," = "," AND") */
        US_RESTRICCIONHESCUELA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because US_RESTRICCIONHESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_CALENDARIOFALTASDET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CALENDARIOFALTASDET
      WHERE
        /*  %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = "," AND") */
        TW_CALENDARIOFALTASDET.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_CALENDARIOFALTASDET exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_ESCUELACIFRASCONTROL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELACIFRASCONTROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCCIFCON_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELACIFRASCONTROL
      WHERE
        /*  %JoinFKPK(TW_ESCUELACIFRASCONTROL,:%Old," = "," AND") */
        TW_ESCUELACIFRASCONTROL.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_ESCUELACIFRASCONTROL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_PERSONALPLAZAESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAES_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELA,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_PERSONALPLAZAESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TC_PLAZA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLAZA_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLAZA
      WHERE
        /*  %JoinFKPK(TC_PLAZA,:%Old," = "," AND") */
        TC_PLAZA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TC_PLAZA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELA  TW_PERSONALCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSONALCICLOESCOLAR__FK3", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_PERSONALCICLOESCOLAR,:%Old," = "," AND") */
        TW_PERSONALCICLOESCOLAR.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELA because TW_PERSONALCICLOESCOLAR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESCUELA AFTER UPDATE ON TC_ESCUELA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TC_ESCUELAAULA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="002c719a", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_TC_ESCUELA_FK1", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TC_ESCUELAAULA exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  SC_CONSEJOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_C107E035_2E25_43", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_CONSEJOS
      SET
        /* %SetFK(SC_CONSEJOS,NULL) */
        SC_CONSEJOS.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(SC_CONSEJOS,:%Old," = ",",") */
        SC_CONSEJOS.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_SEGREPORTES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ESCUELA570", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_SEGREPORTES exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TC_PERSONALPLAZAESCUELAHIST on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELAHIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAESH_TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONALPLAZAESCUELAHIST
      SET
        /* %SetFK(TC_PERSONALPLAZAESCUELAHIST,NULL) */
        TC_PERSONALPLAZAESCUELAHIST.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONALPLAZAESCUELAHIST,:%Old," = ",",") */
        TC_PERSONALPLAZAESCUELAHIST.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_COMUNICADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMUNICADOS_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOS,:%Old," = "," AND") */
        TW_COMUNICADOS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_COMUNICADOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_CAPTUROINASISTENCIAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_CAPTUROINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CAPTUINASIS_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CAPTUROINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TR_CAPTUROINASISTENCIAS,:%Old," = "," AND") */
        TR_CAPTUROINASISTENCIAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_CAPTUROINASISTENCIAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_NOPROMOPLANDEACCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  SW_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_T_N_ID_S_N_CENTRO", FK_COLUMNS="N_CENTRO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SW_VISITAS
      SET
        /* %SetFK(SW_VISITAS,NULL) */
        SW_VISITAS.N_CENTRO = NULL
      WHERE
        /* %JoinFKPK(SW_VISITAS,:%Old," = ",",") */
        SW_VISITAS.N_CENTRO = :old.N_ID;
  END IF;

  /* TC_ESCUELA  TW_SOLICITUDPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_SOLICITUDPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SOLICITUDPERSONA_TC_ES_FK1", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SOLICITUDPERSONA
      SET
        /* %SetFK(TW_SOLICITUDPERSONA,NULL) */
        TW_SOLICITUDPERSONA.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TW_SOLICITUDPERSONA,:%Old," = ",",") */
        TW_SOLICITUDPERSONA.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  US_INSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCUELA_INSCRIPCION", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because US_INSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TC_ESCUELASPROCESARFLUJO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELASPROCESARFLUJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELASPROCESARESCUELA", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ESCUELASPROCESARFLUJO
      SET
        /* %SetFK(TC_ESCUELASPROCESARFLUJO,NULL) */
        TC_ESCUELASPROCESARFLUJO.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_ESCUELASPROCESARFLUJO,:%Old," = ",",") */
        TC_ESCUELASPROCESARFLUJO.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  US_LIBRO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_ESCUELA", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because US_LIBRO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_PERSONACANDIDATO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONACANDIDATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_ESCUELA577", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONACANDIDATO
      WHERE
        /*  %JoinFKPK(TR_PERSONACANDIDATO,:%Old," = "," AND") */
        TR_PERSONACANDIDATO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_PERSONACANDIDATO exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TW_BITACORA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_BITACORA
      SET
        /* %SetFK(TW_BITACORA,NULL) */
        TW_BITACORA.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TW_BITACORA,:%Old," = ",",") */
        TW_BITACORA.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_PLANTILLAAUTORIZADA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PLANTILLAAUTORIZADA
      WHERE
        /*  %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = "," AND") */
        TW_PLANTILLAAUTORIZADA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_PLANTILLAAUTORIZADA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_ALUMNOSOPCIONESESCUELAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOSOPCIONESESCUELAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOPCESC_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOSOPCIONESESCUELAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOSOPCIONESESCUELAS,:%Old," = "," AND") */
        TW_ALUMNOSOPCIONESESCUELAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_ALUMNOSOPCIONESESCUELAS exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TC_PERSONAREEMPLAZO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM__TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONAREEMPLAZO
      SET
        /* %SetFK(TC_PERSONAREEMPLAZO,NULL) */
        TC_PERSONAREEMPLAZO.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = ",",") */
        TC_PERSONAREEMPLAZO.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_INASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_FOLIOTRAMITE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOTRAMITE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLTRAM_TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOTRAMITE
      WHERE
        /*  %JoinFKPK(TR_FOLIOTRAMITE,:%Old," = "," AND") */
        TR_FOLIOTRAMITE.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_FOLIOTRAMITE exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  SC_EVALUACION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="SC_EVALUACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RELACIONESCUELA", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_EVALUACION
      SET
        /* %SetFK(SC_EVALUACION,NULL) */
        SC_EVALUACION.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(SC_EVALUACION,:%Old," = ",",") */
        SC_EVALUACION.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TC_ESCUELAAULAHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_TC_ESC_FK1", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_ESCUELALIBROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROS_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROS,:%Old," = "," AND") */
        TW_ESCUELALIBROS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_ESCUELALIBROS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_ESCUELATELEFONO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELATELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCTEL_TC_ESC_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELATELEFONO
      WHERE
        /*  %JoinFKPK(TR_ESCUELATELEFONO,:%Old," = "," AND") */
        TR_ESCUELATELEFONO.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_ESCUELATELEFONO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_ALUMNOASIGNACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIGNA_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNACION
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNACION,:%Old," = "," AND") */
        TW_ALUMNOASIGNACION.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_ALUMNOASIGNACION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_ESCUELAINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUINC_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_ESCUELAINCIDENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_ESCUELAPROGRAMAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELAPROGRAMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCPROG_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELAPROGRAMAS
      WHERE
        /*  %JoinFKPK(TR_ESCUELAPROGRAMAS,:%Old," = "," AND") */
        TR_ESCUELAPROGRAMAS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_ESCUELAPROGRAMAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_COMUNICADOSDESTINATARIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOSDESTINATARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMDES_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOSDESTINATARIOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOSDESTINATARIOS,:%Old," = "," AND") */
        TW_COMUNICADOSDESTINATARIOS.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_COMUNICADOSDESTINATARIOS exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TW_REPEVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVA_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_REPEVA
      SET
        /* %SetFK(TW_REPEVA,NULL) */
        TW_REPEVA.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TW_REPEVA,:%Old," = ",",") */
        TW_REPEVA.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  US_CONTACTOWEB on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_CONTACTOWEB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCUELA_CONTACTOWEB_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CONTACTOWEB
      WHERE
        /*  %JoinFKPK(US_CONTACTOWEB,:%Old," = "," AND") */
        US_CONTACTOWEB.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because US_CONTACTOWEB exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  US_ESCUELAAULA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCUELA_ESCUELAAULA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(US_ESCUELAAULA,:%Old," = "," AND") */
        US_ESCUELAAULA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because US_ESCUELAAULA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_PLAZAASIGNADA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAASI_TC_ESCUELA_FK", FK_COLUMNS="N_CCTPAGO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_CCTPAGO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_PLAZAASIGNADA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  US_RESTRICCIONHESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="US_RESTRICCIONHESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RESTHESCUELA_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_RESTRICCIONHESCUELA
      WHERE
        /*  %JoinFKPK(US_RESTRICCIONHESCUELA,:%Old," = "," AND") */
        US_RESTRICCIONHESCUELA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because US_RESTRICCIONHESCUELA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TR_MOVPLAZAPERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TW_CALENDARIOFALTASDET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CALENDARIOFALTASDET
      SET
        /* %SetFK(TW_CALENDARIOFALTASDET,NULL) */
        TW_CALENDARIOFALTASDET.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = ",",") */
        TW_CALENDARIOFALTASDET.N_IDESCUELA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TW_ESCUELACIFRASCONTROL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELACIFRASCONTROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCCIFCON_TC_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELACIFRASCONTROL
      WHERE
        /*  %JoinFKPK(TW_ESCUELACIFRASCONTROL,:%Old," = "," AND") */
        TW_ESCUELACIFRASCONTROL.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TW_ESCUELACIFRASCONTROL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TC_PERSONALPLAZAESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAES_TC_ESCUE_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELA,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TC_PERSONALPLAZAESCUELA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELA  TC_PLAZA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLAZA_ESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PLAZA
      WHERE
        /*  %JoinFKPK(TC_PLAZA,:%Old," = "," AND") */
        TC_PLAZA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELA because TC_PLAZA exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELA  TW_PERSONALCICLOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSONALCICLOESCOLAR__FK3", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONALCICLOESCOLAR
      SET
        /* %SetFK(TW_PERSONALCICLOESCOLAR,NULL) */
        TW_PERSONALCICLOESCOLAR.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONALCICLOESCOLAR,:%Old," = ",",") */
        TW_PERSONALCICLOESCOLAR.N_IDESCUELA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESCUELAAULA AFTER DELETE ON TC_ESCUELAAULA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESCUELAAULA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TR_PERSONAHORARIOHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000a2c00", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIOHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHORHIS_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELASAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIOHISTORICO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIOHISTORICO,:%Old," = "," AND") */
        TR_PERSONAHORARIOHISTORICO.N_IDESCUELASAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TR_PERSONAHORARIOHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TR_PERSONAHORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHOR_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELASAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIO,:%Old," = "," AND") */
        TR_PERSONAHORARIO.N_IDESCUELASAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TR_PERSONAHORARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TR_INMUEBLEESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUEBLEESCUELA_TC_ESC_FK1", FK_COLUMNS="N_IDESCUELAAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEESCUELA
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEESCUELA,:%Old," = "," AND") */
        TR_INMUEBLEESCUELA.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TR_INMUEBLEESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TR_PERSONALGRUPO on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERGRU_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELASAULA" */
    UPDATE TR_PERSONALGRUPO
      SET
        /* %SetFK(TR_PERSONALGRUPO,NULL) */
        TR_PERSONALGRUPO.N_IDESCUELASAULA = NULL
      WHERE
        /* %JoinFKPK(TR_PERSONALGRUPO,:%Old," = "," AND") */
        TR_PERSONALGRUPO.N_IDESCUELASAULA = :old.N_ID;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TW_PLANTILLAAUTORIZADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_ESCUELAAULA_FK", FK_COLUMNS="N_IDESCUELASAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PLANTILLAAUTORIZADA
      WHERE
        /*  %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = "," AND") */
        TW_PLANTILLAAUTORIZADA.N_IDESCUELASAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TW_PLANTILLAAUTORIZADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TW_TOTALESCALIFICACIONESGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_TOTALESCALIFICACIONESGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_TOTCALG_TC_ESCUELA_FK", FK_COLUMNS="N_IDESUELASAULAS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_TOTALESCALIFICACIONESGRUPO
      WHERE
        /*  %JoinFKPK(TW_TOTALESCALIFICACIONESGRUPO,:%Old," = "," AND") */
        TW_TOTALESCALIFICACIONESGRUPO.N_IDESUELASAULAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TW_TOTALESCALIFICACIONESGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TW_ALUMNOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELAAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TW_ALUMNOBAJAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAJAS_TC_ESCUELA_FK1", FK_COLUMNS="N_IDESCUELAAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TW_ALUMNOBAJAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESCUELAAULA  TW_ALUMNOCICLOESCOLARHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELAAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAAULA because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESCUELAAULA AFTER UPDATE ON TC_ESCUELAAULA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESCUELAAULA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESCUELAAULA  TR_PERSONAHORARIOHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000b1b91", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIOHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHORHIS_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELASAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIOHISTORICO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIOHISTORICO,:%Old," = "," AND") */
        TR_PERSONAHORARIOHISTORICO.N_IDESCUELASAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAAULA because TR_PERSONAHORARIOHISTORICO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELAAULA  TR_PERSONAHORARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHOR_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELASAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIO,:%Old," = "," AND") */
        TR_PERSONAHORARIO.N_IDESCUELASAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAAULA because TR_PERSONAHORARIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELAAULA  TR_INMUEBLEESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUEBLEESCUELA_TC_ESC_FK1", FK_COLUMNS="N_IDESCUELAAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEESCUELA
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEESCUELA,:%Old," = "," AND") */
        TR_INMUEBLEESCUELA.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAAULA because TR_INMUEBLEESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELAAULA  TR_PERSONALGRUPO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERGRU_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELASAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_PERSONALGRUPO
      SET
        /* %SetFK(TR_PERSONALGRUPO,NULL) */
        TR_PERSONALGRUPO.N_IDESCUELASAULA = NULL
      WHERE
        /* %JoinFKPK(TR_PERSONALGRUPO,:%Old," = ",",") */
        TR_PERSONALGRUPO.N_IDESCUELASAULA = :old.N_ID;
  END IF;

  /* TC_ESCUELAAULA  TW_PLANTILLAAUTORIZADA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_ESCUELAAULA_FK", FK_COLUMNS="N_IDESCUELASAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PLANTILLAAUTORIZADA
      SET
        /* %SetFK(TW_PLANTILLAAUTORIZADA,NULL) */
        TW_PLANTILLAAUTORIZADA.N_IDESCUELASAULA = NULL
      WHERE
        /* %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = ",",") */
        TW_PLANTILLAAUTORIZADA.N_IDESCUELASAULA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELAAULA  TW_TOTALESCALIFICACIONESGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_TOTALESCALIFICACIONESGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_TOTCALG_TC_ESCUELA_FK", FK_COLUMNS="N_IDESUELASAULAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_TOTALESCALIFICACIONESGRUPO
      WHERE
        /*  %JoinFKPK(TW_TOTALESCALIFICACIONESGRUPO,:%Old," = "," AND") */
        TW_TOTALESCALIFICACIONESGRUPO.N_IDESUELASAULAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAAULA because TW_TOTALESCALIFICACIONESGRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_ESCUELAAULA  TW_ALUMNOCICLOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELAAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOCICLOESCOLAR
      SET
        /* %SetFK(TW_ALUMNOCICLOESCOLAR,NULL) */
        TW_ALUMNOCICLOESCOLAR.N_IDESCUELAAULA = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = ",",") */
        TW_ALUMNOCICLOESCOLAR.N_IDESCUELAAULA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELAAULA  TW_ALUMNOBAJAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAJAS_TC_ESCUELA_FK1", FK_COLUMNS="N_IDESCUELAAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAAULA because TW_ALUMNOBAJAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESCUELAAULA  TW_ALUMNOCICLOESCOLARHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ESCAUL_FK", FK_COLUMNS="N_IDESCUELAAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDESCUELAAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAAULA because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESCUELAEVENTO AFTER DELETE ON TC_ESCUELAEVENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESCUELAEVENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESCUELAEVENTO  TW_ESCUELAINCIDENCIAEVENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012706", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAEVENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAEVENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUELAINCIDENCIAEVENT_FK1", FK_COLUMNS="N_IDESCUELAEVENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAEVENTO
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAEVENTO,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAEVENTO.N_IDESCUELAEVENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESCUELAEVENTO because TW_ESCUELAINCIDENCIAEVENTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESCUELAEVENTO AFTER UPDATE ON TC_ESCUELAEVENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESCUELAEVENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESCUELAEVENTO  TW_ESCUELAINCIDENCIAEVENTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001400e", PARENT_OWNER="", PARENT_TABLE="TC_ESCUELAEVENTO"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAEVENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUELAINCIDENCIAEVENT_FK1", FK_COLUMNS="N_IDESCUELAEVENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAEVENTO
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAEVENTO,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAEVENTO.N_IDESCUELAEVENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESCUELAEVENTO because TW_ESCUELAINCIDENCIAEVENTO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESTADO_INMUEBLE AFTER DELETE ON TC_ESTADO_INMUEBLE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESTADO_INMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESTADO_INMUEBLE  TW_SERVICIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000352b5", PARENT_OWNER="", PARENT_TABLE="TC_ESTADO_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_SERVICIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SERDET_TC_EST_INM_FK", FK_COLUMNS="N_IDESTATUSDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SERVICIODETALLE
      WHERE
        /*  %JoinFKPK(TW_SERVICIODETALLE,:%Old," = "," AND") */
        TW_SERVICIODETALLE.N_IDESTATUSDETALLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTADO_INMUEBLE because TW_SERVICIODETALLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTADO_INMUEBLE  TW_INMUEBLE_LOCAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTADO_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_EST_INM_FK", FK_COLUMNS="N_ID_ESTADOINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_ID_ESTADOINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTADO_INMUEBLE because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTADO_INMUEBLE  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTADO_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_EST_IMN_FK", FK_COLUMNS="N_ESTADOSINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_ESTADOSINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTADO_INMUEBLE because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESTADO_INMUEBLE AFTER UPDATE ON TC_ESTADO_INMUEBLE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESTADO_INMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_ESTADO_INMUEBLE  TW_SERVICIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00034828", PARENT_OWNER="", PARENT_TABLE="TC_ESTADO_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_SERVICIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SERDET_TC_EST_INM_FK", FK_COLUMNS="N_IDESTATUSDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SERVICIODETALLE
      SET
        /* %SetFK(TW_SERVICIODETALLE,NULL) */
        TW_SERVICIODETALLE.N_IDESTATUSDETALLE = NULL
      WHERE
        /* %JoinFKPK(TW_SERVICIODETALLE,:%Old," = ",",") */
        TW_SERVICIODETALLE.N_IDESTATUSDETALLE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESTADO_INMUEBLE  TW_INMUEBLE_LOCAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTADO_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_EST_INM_FK", FK_COLUMNS="N_ID_ESTADOINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_ID_ESTADOINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESTADO_INMUEBLE because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;
  END IF;

  /* TC_ESTADO_INMUEBLE  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTADO_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_EST_IMN_FK", FK_COLUMNS="N_ESTADOSINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_ESTADOSINMUEBLE = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_ESTADOSINMUEBLE = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESTADOCIVIL AFTER DELETE ON TC_ESTADOCIVIL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESTADOCIVIL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESTADOCIVIL  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f181", PARENT_OWNER="", PARENT_TABLE="TC_ESTADOCIVIL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ESTCIV_FK", FK_COLUMNS="N_IDESTADOCIVIL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDESTADOCIVIL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTADOCIVIL because TC_PERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESTADOCIVIL AFTER UPDATE ON TC_ESTADOCIVIL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESTADOCIVIL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESTADOCIVIL  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011507", PARENT_OWNER="", PARENT_TABLE="TC_ESTADOCIVIL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ESTCIV_FK", FK_COLUMNS="N_IDESTADOCIVIL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDESTADOCIVIL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESTADOCIVIL because TC_PERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESTATUSALUMNO AFTER DELETE ON TC_ESTATUSALUMNO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESTATUSALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESTATUSALUMNO  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006d6a6", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_ESTATUSALUM_FK1", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSALUMNO because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTATUSALUMNO  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ESTATUSALUMN_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSALUMNO because TC_ALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTATUSALUMNO  TW_ALUMNOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_ESTALU_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSALUMNO because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTATUSALUMNO  TW_ALUMNOMOVIMIENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TC_ESTALU_FK", FK_COLUMNS="N_IDESTATUSALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDESTATUSALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSALUMNO because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTATUSALUMNO  TC_MOVIMIENTOALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVALUM_TC_ESTATALUM_FK", FK_COLUMNS="N_IDESTATUSALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOVIMIENTOALUMNO
      WHERE
        /*  %JoinFKPK(TC_MOVIMIENTOALUMNO,:%Old," = "," AND") */
        TC_MOVIMIENTOALUMNO.N_IDESTATUSALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSALUMNO because TC_MOVIMIENTOALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ESTATUSALUMNO  TW_ALUMNOCICLOESCOLARHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ESTALU_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSALUMNO because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESTATUSALUMNO AFTER UPDATE ON TC_ESTATUSALUMNO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESTATUSALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESTATUSALUMNO  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0006c8c6", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_ESTATUSALUM_FK1", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESTATUSALUMNO because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_ESTATUSALUMNO  TC_ALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ESTATUSALUMN_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNO
      SET
        /* %SetFK(TC_ALUMNO,NULL) */
        TC_ALUMNO.N_IDESTATUS = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNO,:%Old," = ",",") */
        TC_ALUMNO.N_IDESTATUS = :old.N_ID;
  END IF;

  /* TC_ESTATUSALUMNO  TW_ALUMNOCICLOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICES_TC_ESTALU_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOCICLOESCOLAR
      SET
        /* %SetFK(TW_ALUMNOCICLOESCOLAR,NULL) */
        TW_ALUMNOCICLOESCOLAR.N_IDESTATUS = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = ",",") */
        TW_ALUMNOCICLOESCOLAR.N_IDESTATUS = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ESTATUSALUMNO  TW_ALUMNOMOVIMIENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TC_ESTALU_FK", FK_COLUMNS="N_IDESTATUSALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDESTATUSALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESTATUSALUMNO because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;
  END IF;

  /* TC_ESTATUSALUMNO  TC_MOVIMIENTOALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVALUM_TC_ESTATALUM_FK", FK_COLUMNS="N_IDESTATUSALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOVIMIENTOALUMNO
      SET
        /* %SetFK(TC_MOVIMIENTOALUMNO,NULL) */
        TC_MOVIMIENTOALUMNO.N_IDESTATUSALUMNO = NULL
      WHERE
        /* %JoinFKPK(TC_MOVIMIENTOALUMNO,:%Old," = ",",") */
        TC_MOVIMIENTOALUMNO.N_IDESTATUSALUMNO = :old.N_ID;
  END IF;

  /* TC_ESTATUSALUMNO  TW_ALUMNOCICLOESCOLARHISTORICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ESTALU_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOCICLOESCOLARHISTORICO
      SET
        /* %SetFK(TW_ALUMNOCICLOESCOLARHISTORICO,NULL) */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDESTATUS = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = ",",") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDESTATUS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESTATUSINCIDENCIA_ALUM AFTER DELETE ON TC_ESTATUSINCIDENCIA_ALUM for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESTATUSINCIDENCIA_ALUM 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESTATUSINCIDENCIA_ALUM  TW_ALUMNOINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000110d6", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSINCIDENCIA_ALUM"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINC_TC_ESTINCALU_FK", FK_COLUMNS="N_ESTATUSINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIA.N_ESTATUSINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTATUSINCIDENCIA_ALUM because TW_ALUMNOINCIDENCIA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESTATUSINCIDENCIA_ALUM AFTER UPDATE ON TC_ESTATUSINCIDENCIA_ALUM for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESTATUSINCIDENCIA_ALUM 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ESTATUSINCIDENCIA_ALUM  TW_ALUMNOINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000131b8", PARENT_OWNER="", PARENT_TABLE="TC_ESTATUSINCIDENCIA_ALUM"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINC_TC_ESTINCALU_FK", FK_COLUMNS="N_ESTATUSINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIA.N_ESTATUSINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ESTATUSINCIDENCIA_ALUM because TW_ALUMNOINCIDENCIA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ESTUDIOESCUELA AFTER DELETE ON TC_ESTUDIOESCUELA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ESTUDIOESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ESTUDIOESCUELA  TW_HISTORIAACADEMICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010ef5", PARENT_OWNER="", PARENT_TABLE="TC_ESTUDIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_ESTUDIOESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_HISTORIAACADEMICA
      WHERE
        /*  %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = "," AND") */
        TW_HISTORIAACADEMICA.N_IDESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ESTUDIOESCUELA because TW_HISTORIAACADEMICA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ESTUDIOESCUELA AFTER UPDATE ON TC_ESTUDIOESCUELA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ESTUDIOESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_ESTUDIOESCUELA  TW_HISTORIAACADEMICA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010db0", PARENT_OWNER="", PARENT_TABLE="TC_ESTUDIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_ESTUDIOESCUELA_FK", FK_COLUMNS="N_IDESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_HISTORIAACADEMICA
      SET
        /* %SetFK(TW_HISTORIAACADEMICA,NULL) */
        TW_HISTORIAACADEMICA.N_IDESCUELA = NULL
      WHERE
        /* %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = ",",") */
        TW_HISTORIAACADEMICA.N_IDESCUELA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ETNIASINDIGENAS AFTER DELETE ON TC_ETNIASINDIGENAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ETNIASINDIGENAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ETNIASINDIGENAS  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00021172", PARENT_OWNER="", PARENT_TABLE="TC_ETNIASINDIGENAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ETNIASINDIGE_FK1", FK_COLUMNS="N_IDINDIGENA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDINDIGENA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ETNIASINDIGENAS because TC_ALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ETNIASINDIGENAS  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ETNIASINDIGENAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_ETNIND_FK", FK_COLUMNS="N_IDEDNIASINDIGENAS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDEDNIASINDIGENAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ETNIASINDIGENAS because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ETNIASINDIGENAS AFTER UPDATE ON TC_ETNIASINDIGENAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ETNIASINDIGENAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ETNIASINDIGENAS  TC_ALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00025f25", PARENT_OWNER="", PARENT_TABLE="TC_ETNIASINDIGENAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ETNIASINDIGE_FK1", FK_COLUMNS="N_IDINDIGENA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDINDIGENA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ETNIASINDIGENAS because TC_ALUMNO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_ETNIASINDIGENAS  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ETNIASINDIGENAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_ETNIND_FK", FK_COLUMNS="N_IDEDNIASINDIGENAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDEDNIASINDIGENAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ETNIASINDIGENAS because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FALTACONDUCTA AFTER DELETE ON TC_FALTACONDUCTA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FALTACONDUCTA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FALTACONDUCTA  TW_ALUMNOINCIDENCIAFALTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001159f", PARENT_OWNER="", PARENT_TABLE="TC_FALTACONDUCTA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCFALTA_TC_FALTCON_FK", FK_COLUMNS="N_IDFALTACONDUCTA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAFALTA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAFALTA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAFALTA.N_IDFALTACONDUCTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FALTACONDUCTA because TW_ALUMNOINCIDENCIAFALTA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FALTACONDUCTA AFTER UPDATE ON TC_FALTACONDUCTA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FALTACONDUCTA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_FALTACONDUCTA  TW_ALUMNOINCIDENCIAFALTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000136a6", PARENT_OWNER="", PARENT_TABLE="TC_FALTACONDUCTA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCFALTA_TC_FALTCON_FK", FK_COLUMNS="N_IDFALTACONDUCTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAFALTA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAFALTA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAFALTA.N_IDFALTACONDUCTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FALTACONDUCTA because TW_ALUMNOINCIDENCIAFALTA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FLUJO_MOTIVO_RECHAZO AFTER DELETE ON TC_FLUJO_MOTIVO_RECHAZO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FLUJO_MOTIVO_RECHAZO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FLUJO_MOTIVO_RECHAZO  TW_FLUJOBITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011645", PARENT_OWNER="", PARENT_TABLE="TC_FLUJO_MOTIVO_RECHAZO"
    CHILD_OWNER="", CHILD_TABLE="TW_FLUJOBITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FLUJOB_TC_FLUJO_M_R_FK", FK_COLUMNS="N_IDFLUJO_MOTIVO_RECHAZO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FLUJOBITACORA
      WHERE
        /*  %JoinFKPK(TW_FLUJOBITACORA,:%Old," = "," AND") */
        TW_FLUJOBITACORA.N_IDFLUJO_MOTIVO_RECHAZO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJO_MOTIVO_RECHAZO because TW_FLUJOBITACORA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FLUJO_MOTIVO_RECHAZO AFTER UPDATE ON TC_FLUJO_MOTIVO_RECHAZO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FLUJO_MOTIVO_RECHAZO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_FLUJO_MOTIVO_RECHAZO  TW_FLUJOBITACORA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00011690", PARENT_OWNER="", PARENT_TABLE="TC_FLUJO_MOTIVO_RECHAZO"
    CHILD_OWNER="", CHILD_TABLE="TW_FLUJOBITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FLUJOB_TC_FLUJO_M_R_FK", FK_COLUMNS="N_IDFLUJO_MOTIVO_RECHAZO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_FLUJOBITACORA
      SET
        /* %SetFK(TW_FLUJOBITACORA,NULL) */
        TW_FLUJOBITACORA.N_IDFLUJO_MOTIVO_RECHAZO = NULL
      WHERE
        /* %JoinFKPK(TW_FLUJOBITACORA,:%Old," = ",",") */
        TW_FLUJOBITACORA.N_IDFLUJO_MOTIVO_RECHAZO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FLUJOGESTION AFTER DELETE ON TC_FLUJOGESTION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FLUJOGESTION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FLUJOGESTION  TC_FLUJOGESTIONDET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00023be9", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTION"
    CHILD_OWNER="", CHILD_TABLE="TC_FLUJOGESTIONDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FLUGESDE_TC_FLUJOGES_PK", FK_COLUMNS="N_IDFLUJOGESTION" */
    SELECT count(*) INTO NUMROWS
      FROM TC_FLUJOGESTIONDET
      WHERE
        /*  %JoinFKPK(TC_FLUJOGESTIONDET,:%Old," = "," AND") */
        TC_FLUJOGESTIONDET.N_IDFLUJOGESTION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJOGESTION because TC_FLUJOGESTIONDET exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FLUJOGESTION  TR_GROUPMOTIVOFLUJOGESTION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTION"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPMOTIVOFLUJOGESTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROUPMOT_FL_TC_FL_DET_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GROUPMOTIVOFLUJOGESTION
      WHERE
        /*  %JoinFKPK(TR_GROUPMOTIVOFLUJOGESTION,:%Old," = "," AND") */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJOGESTION because TR_GROUPMOTIVOFLUJOGESTION exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FLUJOGESTION AFTER UPDATE ON TC_FLUJOGESTION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FLUJOGESTION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_FLUJOGESTION  TC_FLUJOGESTIONDET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000247d1", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTION"
    CHILD_OWNER="", CHILD_TABLE="TC_FLUJOGESTIONDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FLUGESDE_TC_FLUJOGES_PK", FK_COLUMNS="N_IDFLUJOGESTION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_FLUJOGESTIONDET
      SET
        /* %SetFK(TC_FLUJOGESTIONDET,NULL) */
        TC_FLUJOGESTIONDET.N_IDFLUJOGESTION = NULL
      WHERE
        /* %JoinFKPK(TC_FLUJOGESTIONDET,:%Old," = ",",") */
        TC_FLUJOGESTIONDET.N_IDFLUJOGESTION = :old.N_ID;
  END IF;

  /* TC_FLUJOGESTION  TR_GROUPMOTIVOFLUJOGESTION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTION"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPMOTIVOFLUJOGESTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROUPMOT_FL_TC_FL_DET_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GROUPMOTIVOFLUJOGESTION
      SET
        /* %SetFK(TR_GROUPMOTIVOFLUJOGESTION,NULL) */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDFLUJOGESTIONDET = NULL
      WHERE
        /* %JoinFKPK(TR_GROUPMOTIVOFLUJOGESTION,:%Old," = ",",") */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDFLUJOGESTIONDET = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FLUJOGESTIONDET AFTER DELETE ON TC_FLUJOGESTIONDET for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FLUJOGESTIONDET 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FLUJOGESTIONDET  TW_FLUJOBITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004946c", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TW_FLUJOBITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FLUJOBIT_TC_FLUJOGESDET_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FLUJOBITACORA
      WHERE
        /*  %JoinFKPK(TW_FLUJOBITACORA,:%Old," = "," AND") */
        TW_FLUJOBITACORA.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJOGESTIONDET because TW_FLUJOBITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FLUJOGESTIONDET  TR_REQUISITOSDOCUMENTALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TR_REQUISITOSDOCUMENTALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REQ_D_TC_FLUJOGESDET_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
    SELECT count(*) INTO NUMROWS
      FROM TR_REQUISITOSDOCUMENTALES
      WHERE
        /*  %JoinFKPK(TR_REQUISITOSDOCUMENTALES,:%Old," = "," AND") */
        TR_REQUISITOSDOCUMENTALES.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJOGESTIONDET because TR_REQUISITOSDOCUMENTALES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FLUJOGESTIONDET  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_FLUGESDE_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJOGESTIONDET because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FLUJOGESTIONDET  TR_GROUPFLUJO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPFLUJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROFLU_TC_FLUGESDE_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GROUPFLUJO
      WHERE
        /*  %JoinFKPK(TR_GROUPFLUJO,:%Old," = "," AND") */
        TR_GROUPFLUJO.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FLUJOGESTIONDET because TR_GROUPFLUJO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FLUJOGESTIONDET AFTER UPDATE ON TC_FLUJOGESTIONDET for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FLUJOGESTIONDET 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_FLUJOGESTIONDET  TW_FLUJOBITACORA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0004b9e8", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TW_FLUJOBITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FLUJOBIT_TC_FLUJOGESDET_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FLUJOBITACORA
      WHERE
        /*  %JoinFKPK(TW_FLUJOBITACORA,:%Old," = "," AND") */
        TW_FLUJOBITACORA.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FLUJOGESTIONDET because TW_FLUJOBITACORA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FLUJOGESTIONDET  TR_REQUISITOSDOCUMENTALES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TR_REQUISITOSDOCUMENTALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REQ_D_TC_FLUJOGESDET_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_REQUISITOSDOCUMENTALES
      WHERE
        /*  %JoinFKPK(TR_REQUISITOSDOCUMENTALES,:%Old," = "," AND") */
        TR_REQUISITOSDOCUMENTALES.N_IDFLUJOGESTIONDET = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FLUJOGESTIONDET because TR_REQUISITOSDOCUMENTALES exists.'
      );
    END IF;
  END IF;

  /* TC_FLUJOGESTIONDET  TR_MOVPLAZAPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_FLUGESDE_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAZAPERSONA
      SET
        /* %SetFK(TR_MOVPLAZAPERSONA,NULL) */
        TR_MOVPLAZAPERSONA.N_IDFLUJOGESTIONDET = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = ",",") */
        TR_MOVPLAZAPERSONA.N_IDFLUJOGESTIONDET = :old.N_ID;
  END IF;

  /* TC_FLUJOGESTIONDET  TR_GROUPFLUJO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FLUJOGESTIONDET"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPFLUJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROFLU_TC_FLUGESDE_FK", FK_COLUMNS="N_IDFLUJOGESTIONDET" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GROUPFLUJO
      SET
        /* %SetFK(TR_GROUPFLUJO,NULL) */
        TR_GROUPFLUJO.N_IDFLUJOGESTIONDET = NULL
      WHERE
        /* %JoinFKPK(TR_GROUPFLUJO,:%Old," = ",",") */
        TR_GROUPFLUJO.N_IDFLUJOGESTIONDET = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FORMATOCORREO AFTER DELETE ON TC_FORMATOCORREO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FORMATOCORREO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FORMATOCORREO  TC_MOVIMIENTOALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001089a", PARENT_OWNER="", PARENT_TABLE="TC_FORMATOCORREO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVALUM_TC_FORMCORRE_FK", FK_COLUMNS="N_IDFORMATOCORREO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOVIMIENTOALUMNO
      WHERE
        /*  %JoinFKPK(TC_MOVIMIENTOALUMNO,:%Old," = "," AND") */
        TC_MOVIMIENTOALUMNO.N_IDFORMATOCORREO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FORMATOCORREO because TC_MOVIMIENTOALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FORMATOCORREO AFTER UPDATE ON TC_FORMATOCORREO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FORMATOCORREO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_FORMATOCORREO  TC_MOVIMIENTOALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000135e8", PARENT_OWNER="", PARENT_TABLE="TC_FORMATOCORREO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVALUM_TC_FORMCORRE_FK", FK_COLUMNS="N_IDFORMATOCORREO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_MOVIMIENTOALUMNO
      WHERE
        /*  %JoinFKPK(TC_MOVIMIENTOALUMNO,:%Old," = "," AND") */
        TC_MOVIMIENTOALUMNO.N_IDFORMATOCORREO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FORMATOCORREO because TC_MOVIMIENTOALUMNO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FUNCIONREAL AFTER DELETE ON TC_FUNCIONREAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FUNCIONREAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TC_PERSONALPLAZA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000ee63d", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSOPLAZ_TC_FUNRE_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZA,:%Old," = "," AND") */
        TC_PERSONALPLAZA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TC_PERSONALPLAZA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TC_MODALIDAD_FR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MODALIDAD_FR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FUNCIONREAL_FK", FK_COLUMNS="N_IDFUNCIONREAL_ASI" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MODALIDAD_FR
      WHERE
        /*  %JoinFKPK(TC_MODALIDAD_FR,:%Old," = "," AND") */
        TC_MODALIDAD_FR.N_IDFUNCIONREAL_ASI = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TC_MODALIDAD_FR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TW_FUNCION_GRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TW_FUNCION_GRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FUN_GRUPO_TC_FUNCIONREAL_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FUNCION_GRUPO
      WHERE
        /*  %JoinFKPK(TW_FUNCION_GRUPO,:%Old," = "," AND") */
        TW_FUNCION_GRUPO.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TW_FUNCION_GRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TW_SOLICITUDPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TW_SOLICITUDPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SOLICITUDPERSONA_TC_FU_FK1", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SOLICITUDPERSONA
      WHERE
        /*  %JoinFKPK(TW_SOLICITUDPERSONA,:%Old," = "," AND") */
        TW_SOLICITUDPERSONA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TW_SOLICITUDPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TR_PERSONALFUNCIONREALHIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREALHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_FUNCIONREAL5931", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREALHIS
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREALHIS,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREALHIS.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TR_PERSONALFUNCIONREALHIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TR_FUNCIONREALASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_FUNCIONREALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FUCREASIG_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FUNCIONREALASIGNATURA
      WHERE
        /*  %JoinFKPK(TR_FUNCIONREALASIGNATURA,:%Old," = "," AND") */
        TR_FUNCIONREALASIGNATURA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TR_FUNCIONREALASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TC_PERSONALPLAZAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = "," AND") */
        TC_PERSONALPLAZAHISTORICO.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TC_PERSONALPLAZAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TC_PERSONAREEMPLAZO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAREEMPLAZO_FK1", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TR_MOTIVOFUNCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOTIVOFUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOTFUNC_TC_FUNCRE_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOTIVOFUNCIONES
      WHERE
        /*  %JoinFKPK(TR_MOTIVOFUNCIONES,:%Old," = "," AND") */
        TR_MOTIVOFUNCIONES.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TR_MOTIVOFUNCIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TR_PERSONALFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_FUNCIONREAL5911", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREAL,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREAL.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TR_PERSONALFUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TR_CATEGORIAFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATEGFUNREAL_TC_FUNNREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAFUNCIONREAL,:%Old," = "," AND") */
        TR_CATEGORIAFUNCIONREAL.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TR_CATEGORIAFUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TR_PERFILFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERFILFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERFUNRE_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERFILFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERFILFUNCIONREAL,:%Old," = "," AND") */
        TR_PERFILFUNCIONREAL.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TR_PERFILFUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREAL  TC_REGLAPLANTILLA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREAL because TC_REGLAPLANTILLA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FUNCIONREAL AFTER UPDATE ON TC_FUNCIONREAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FUNCIONREAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TC_PERSONALPLAZA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000fdd2a", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSOPLAZ_TC_FUNRE_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZA,:%Old," = "," AND") */
        TC_PERSONALPLAZA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TC_PERSONALPLAZA exists.'
      );
    END IF;
  END IF;

  /* TC_FUNCIONREAL  TC_MODALIDAD_FR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MODALIDAD_FR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FUNCIONREAL_FK", FK_COLUMNS="N_IDFUNCIONREAL_ASI" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MODALIDAD_FR
      SET
        /* %SetFK(TC_MODALIDAD_FR,NULL) */
        TC_MODALIDAD_FR.N_IDFUNCIONREAL_ASI = NULL
      WHERE
        /* %JoinFKPK(TC_MODALIDAD_FR,:%Old," = ",",") */
        TC_MODALIDAD_FR.N_IDFUNCIONREAL_ASI = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TW_FUNCION_GRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TW_FUNCION_GRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FUN_GRUPO_TC_FUNCIONREAL_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FUNCION_GRUPO
      WHERE
        /*  %JoinFKPK(TW_FUNCION_GRUPO,:%Old," = "," AND") */
        TW_FUNCION_GRUPO.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TW_FUNCION_GRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_FUNCIONREAL  TW_SOLICITUDPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TW_SOLICITUDPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SOLICITUDPERSONA_TC_FU_FK1", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SOLICITUDPERSONA
      SET
        /* %SetFK(TW_SOLICITUDPERSONA,NULL) */
        TW_SOLICITUDPERSONA.N_IDFUNCIONREAL = NULL
      WHERE
        /* %JoinFKPK(TW_SOLICITUDPERSONA,:%Old," = ",",") */
        TW_SOLICITUDPERSONA.N_IDFUNCIONREAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TR_PERSONALFUNCIONREALHIS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREALHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_FUNCIONREAL5931", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREALHIS
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREALHIS,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREALHIS.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TR_PERSONALFUNCIONREALHIS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TR_FUNCIONREALASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_FUNCIONREALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FUCREASIG_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FUNCIONREALASIGNATURA
      WHERE
        /*  %JoinFKPK(TR_FUNCIONREALASIGNATURA,:%Old," = "," AND") */
        TR_FUNCIONREALASIGNATURA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TR_FUNCIONREALASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* TC_FUNCIONREAL  TC_PERSONALPLAZAHISTORICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONALPLAZAHISTORICO
      SET
        /* %SetFK(TC_PERSONALPLAZAHISTORICO,NULL) */
        TC_PERSONALPLAZAHISTORICO.N_IDFUNCIONREAL = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = ",",") */
        TC_PERSONALPLAZAHISTORICO.N_IDFUNCIONREAL = :old.N_ID;
  END IF;

  /* TC_FUNCIONREAL  TC_PERSONAREEMPLAZO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAREEMPLAZO_FK1", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONAREEMPLAZO
      SET
        /* %SetFK(TC_PERSONAREEMPLAZO,NULL) */
        TC_PERSONAREEMPLAZO.N_IDFUNCIONREAL = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = ",",") */
        TC_PERSONAREEMPLAZO.N_IDFUNCIONREAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TR_MOTIVOFUNCIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOTIVOFUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOTFUNC_TC_FUNCRE_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOTIVOFUNCIONES
      WHERE
        /*  %JoinFKPK(TR_MOTIVOFUNCIONES,:%Old," = "," AND") */
        TR_MOTIVOFUNCIONES.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TR_MOTIVOFUNCIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TR_PERSONALFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_FUNCIONREAL5911", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREAL,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREAL.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TR_PERSONALFUNCIONREAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TR_CATEGORIAFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATEGFUNREAL_TC_FUNNREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAFUNCIONREAL,:%Old," = "," AND") */
        TR_CATEGORIAFUNCIONREAL.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TR_CATEGORIAFUNCIONREAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TR_PERFILFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERFILFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERFUNRE_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERFILFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERFILFUNCIONREAL,:%Old," = "," AND") */
        TR_PERFILFUNCIONREAL.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TR_PERFILFUNCIONREAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_FUNCIONREAL  TC_REGLAPLANTILLA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_FUNCREA_FK", FK_COLUMNS="N_IDFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_FUNCIONREAL because TC_REGLAPLANTILLA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_FUNCIONREALTIPO AFTER DELETE ON TC_FUNCIONREALTIPO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_FUNCIONREALTIPO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_FUNCIONREALTIPO  TC_FUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fcf7", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREALTIPO"
    CHILD_OWNER="", CHILD_TABLE="TC_FUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tc_funcionreal_frtipo_FK", FK_COLUMNS="N_IDFUNCIONREALTIPO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_FUNCIONREAL
      WHERE
        /*  %JoinFKPK(TC_FUNCIONREAL,:%Old," = "," AND") */
        TC_FUNCIONREAL.N_IDFUNCIONREALTIPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_FUNCIONREALTIPO because TC_FUNCIONREAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_FUNCIONREALTIPO AFTER UPDATE ON TC_FUNCIONREALTIPO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_FUNCIONREALTIPO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_FUNCIONREALTIPO  TC_FUNCIONREAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001000e", PARENT_OWNER="", PARENT_TABLE="TC_FUNCIONREALTIPO"
    CHILD_OWNER="", CHILD_TABLE="TC_FUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tc_funcionreal_frtipo_FK", FK_COLUMNS="N_IDFUNCIONREALTIPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_FUNCIONREAL
      SET
        /* %SetFK(TC_FUNCIONREAL,NULL) */
        TC_FUNCIONREAL.N_IDFUNCIONREALTIPO = NULL
      WHERE
        /* %JoinFKPK(TC_FUNCIONREAL,:%Old," = ",",") */
        TC_FUNCIONREAL.N_IDFUNCIONREALTIPO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_GRADOESCOLAR AFTER DELETE ON TC_GRADOESCOLAR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_GRADOESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TC_DOCUMENTOSGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000c12ee", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOSGRADO_TC_GRADOESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCUMENTOSGRADO
      WHERE
        /*  %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = "," AND") */
        TC_DOCUMENTOSGRADO.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TC_DOCUMENTOSGRADO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TC_ASIGNATURAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNA_TC_GRADOE_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAS
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAS,:%Old," = "," AND") */
        TC_ASIGNATURAS.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TC_ASIGNATURAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TC_EDADGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_EDADGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EDADGRADO_GRADOESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_EDADGRADO
      WHERE
        /*  %JoinFKPK(TC_EDADGRADO,:%Old," = "," AND") */
        TC_EDADGRADO.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TC_EDADGRADO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  US_CLAVEHORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_CLAVEHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CLVHOR_GRADOE_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_CLAVEHORARIO
      WHERE
        /*  %JoinFKPK(US_CLAVEHORARIO,:%Old," = "," AND") */
        US_CLAVEHORARIO.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because US_CLAVEHORARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TC_PLANESTUDIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANESTUDIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTU_TC_GRADES_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLANESTUDIOS
      WHERE
        /*  %JoinFKPK(TC_PLANESTUDIOS,:%Old," = "," AND") */
        TC_PLANESTUDIOS.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TC_PLANESTUDIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TW_ALUMNOPROMEDIOSNIVEL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOPROMEDIOSNIVEL_GD", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TC_GRUPOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_GRUPOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GRUP_TC_GRADESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_GRUPOS
      WHERE
        /*  %JoinFKPK(TC_GRUPOS,:%Old," = "," AND") */
        TC_GRUPOS.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TC_GRUPOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TW_FOLIOSASIGNADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRAESC_FOLASI", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TW_ESCUELACIFRASCONTROL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELACIFRASCONTROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCCIFCON_TC_GRADOESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELACIFRASCONTROL
      WHERE
        /*  %JoinFKPK(TW_ESCUELACIFRASCONTROL,:%Old," = "," AND") */
        TW_ESCUELACIFRASCONTROL.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TW_ESCUELACIFRASCONTROL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  US_ASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_ASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRADOES_ASIGNATURA", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_ASIGNATURA
      WHERE
        /*  %JoinFKPK(US_ASIGNATURA,:%Old," = "," AND") */
        US_ASIGNATURA.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because US_ASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRADOESCOLAR  TC_ASIGNATURAGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNAGRADO_TC_GRADOE_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAGRADO
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAGRADO,:%Old," = "," AND") */
        TC_ASIGNATURAGRADO.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRADOESCOLAR because TC_ASIGNATURAGRADO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_GRADOESCOLAR AFTER UPDATE ON TC_GRADOESCOLAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_GRADOESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_GRADOESCOLAR  TC_DOCUMENTOSGRADO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000ca325", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOSGRADO_TC_GRADOESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DOCUMENTOSGRADO
      SET
        /* %SetFK(TC_DOCUMENTOSGRADO,NULL) */
        TC_DOCUMENTOSGRADO.N_IDGRADOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = ",",") */
        TC_DOCUMENTOSGRADO.N_IDGRADOESCOLAR = :old.N_ID;
  END IF;

  /* TC_GRADOESCOLAR  TC_ASIGNATURAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNA_TC_GRADOE_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURAS
      SET
        /* %SetFK(TC_ASIGNATURAS,NULL) */
        TC_ASIGNATURAS.N_IDGRADOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURAS,:%Old," = ",",") */
        TC_ASIGNATURAS.N_IDGRADOESCOLAR = :old.N_ID;
  END IF;

  /* TC_GRADOESCOLAR  TC_EDADGRADO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_EDADGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EDADGRADO_GRADOESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_EDADGRADO
      SET
        /* %SetFK(TC_EDADGRADO,NULL) */
        TC_EDADGRADO.N_IDGRADOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_EDADGRADO,:%Old," = ",",") */
        TC_EDADGRADO.N_IDGRADOESCOLAR = :old.N_ID;
  END IF;

  /* TC_GRADOESCOLAR  US_CLAVEHORARIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_CLAVEHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CLVHOR_GRADOE_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_CLAVEHORARIO
      SET
        /* %SetFK(US_CLAVEHORARIO,NULL) */
        US_CLAVEHORARIO.N_IDGRADOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(US_CLAVEHORARIO,:%Old," = ",",") */
        US_CLAVEHORARIO.N_IDGRADOESCOLAR = :old.N_ID;
  END IF;

  /* TC_GRADOESCOLAR  TC_PLANESTUDIOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANESTUDIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTU_TC_GRADES_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PLANESTUDIOS
      SET
        /* %SetFK(TC_PLANESTUDIOS,NULL) */
        TC_PLANESTUDIOS.N_IDGRADOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TC_PLANESTUDIOS,:%Old," = ",",") */
        TC_PLANESTUDIOS.N_IDGRADOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRADOESCOLAR  TW_ALUMNOPROMEDIOSNIVEL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOPROMEDIOSNIVEL_GD", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRADOESCOLAR because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRADOESCOLAR  TC_GRUPOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_GRUPOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GRUP_TC_GRADESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_GRUPOS
      WHERE
        /*  %JoinFKPK(TC_GRUPOS,:%Old," = "," AND") */
        TC_GRUPOS.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRADOESCOLAR because TC_GRUPOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRADOESCOLAR  TW_FOLIOSASIGNADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRAESC_FOLASI", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRADOESCOLAR because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRADOESCOLAR  TW_ESCUELACIFRASCONTROL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELACIFRASCONTROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCCIFCON_TC_GRADOESC_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELACIFRASCONTROL
      WHERE
        /*  %JoinFKPK(TW_ESCUELACIFRASCONTROL,:%Old," = "," AND") */
        TW_ESCUELACIFRASCONTROL.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRADOESCOLAR because TW_ESCUELACIFRASCONTROL exists.'
      );
    END IF;
  END IF;

  /* TC_GRADOESCOLAR  US_ASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_ASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRADOES_ASIGNATURA", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_ASIGNATURA
      SET
        /* %SetFK(US_ASIGNATURA,NULL) */
        US_ASIGNATURA.N_IDGRADOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(US_ASIGNATURA,:%Old," = ",",") */
        US_ASIGNATURA.N_IDGRADOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRADOESCOLAR  TC_ASIGNATURAGRADO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRADOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNAGRADO_TC_GRADOE_FK", FK_COLUMNS="N_IDGRADOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAGRADO
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAGRADO,:%Old," = "," AND") */
        TC_ASIGNATURAGRADO.N_IDGRADOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRADOESCOLAR because TC_ASIGNATURAGRADO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_GROUP AFTER DELETE ON TC_GROUP for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_GROUP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_GROUP  TW_USER_GROUP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00063c6a", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TW_USER_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USER_GROUP_TC_GROUP_FK", FK_COLUMNS="N_GROUP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USER_GROUP
      WHERE
        /*  %JoinFKPK(TW_USER_GROUP,:%Old," = "," AND") */
        TW_USER_GROUP.N_GROUP_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP because TW_USER_GROUP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GROUP  TW_FUNCION_GRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TW_FUNCION_GRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FUN_GRUPO_TC_GROUP_FK", FK_COLUMNS="N_GRUPO_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FUNCION_GRUPO
      WHERE
        /*  %JoinFKPK(TW_FUNCION_GRUPO,:%Old," = "," AND") */
        TW_FUNCION_GRUPO.N_GRUPO_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP because TW_FUNCION_GRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GROUP  TR_GROUPMOTIVOFLUJOGESTION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPMOTIVOFLUJOGESTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROUPMOT_FL_TC_GROUP_FK", FK_COLUMNS="N_IDGROUP" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GROUPMOTIVOFLUJOGESTION
      WHERE
        /*  %JoinFKPK(TR_GROUPMOTIVOFLUJOGESTION,:%Old," = "," AND") */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDGROUP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP because TR_GROUPMOTIVOFLUJOGESTION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GROUP  TR_GRUPO_CAT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TR_GRUPO_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GRUPO_CAT_FK_GRU", FK_COLUMNS="N_IDGROUP" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GRUPO_CAT
      WHERE
        /*  %JoinFKPK(TR_GRUPO_CAT,:%Old," = "," AND") */
        TR_GRUPO_CAT.N_IDGROUP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP because TR_GRUPO_CAT exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GROUP  TR_GROUPFLUJO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPFLUJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROFLU_TC_GROUP_FK", FK_COLUMNS="N_IDGROUP" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GROUPFLUJO
      WHERE
        /*  %JoinFKPK(TR_GROUPFLUJO,:%Old," = "," AND") */
        TR_GROUPFLUJO.N_IDGROUP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP because TR_GROUPFLUJO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GROUP  TC_ALERTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TC_ALERTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GROUP_FK", FK_COLUMNS="N_IDGROUP" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALERTAS
      WHERE
        /*  %JoinFKPK(TC_ALERTAS,:%Old," = "," AND") */
        TC_ALERTAS.N_IDGROUP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP because TC_ALERTAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_GROUP AFTER UPDATE ON TC_GROUP for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_GROUP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_GROUP  TW_USER_GROUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000638e6", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TW_USER_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USER_GROUP_TC_GROUP_FK", FK_COLUMNS="N_GROUP_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_USER_GROUP
      WHERE
        /*  %JoinFKPK(TW_USER_GROUP,:%Old," = "," AND") */
        TW_USER_GROUP.N_GROUP_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GROUP because TW_USER_GROUP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GROUP  TW_FUNCION_GRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TW_FUNCION_GRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FUN_GRUPO_TC_GROUP_FK", FK_COLUMNS="N_GRUPO_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FUNCION_GRUPO
      WHERE
        /*  %JoinFKPK(TW_FUNCION_GRUPO,:%Old," = "," AND") */
        TW_FUNCION_GRUPO.N_GRUPO_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GROUP because TW_FUNCION_GRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_GROUP  TR_GROUPMOTIVOFLUJOGESTION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPMOTIVOFLUJOGESTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROUPMOT_FL_TC_GROUP_FK", FK_COLUMNS="N_IDGROUP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GROUPMOTIVOFLUJOGESTION
      SET
        /* %SetFK(TR_GROUPMOTIVOFLUJOGESTION,NULL) */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDGROUP = NULL
      WHERE
        /* %JoinFKPK(TR_GROUPMOTIVOFLUJOGESTION,:%Old," = ",",") */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDGROUP = :old.N_ID;
  END IF;

  /* TC_GROUP  TR_GRUPO_CAT on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TR_GRUPO_CAT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GRUPO_CAT_FK_GRU", FK_COLUMNS="N_IDGROUP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GRUPO_CAT
      SET
        /* %SetFK(TR_GRUPO_CAT,NULL) */
        TR_GRUPO_CAT.N_IDGROUP = NULL
      WHERE
        /* %JoinFKPK(TR_GRUPO_CAT,:%Old," = ",",") */
        TR_GRUPO_CAT.N_IDGROUP = :old.N_ID;
  END IF;

  /* TC_GROUP  TR_GROUPFLUJO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPFLUJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROFLU_TC_GROUP_FK", FK_COLUMNS="N_IDGROUP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GROUPFLUJO
      SET
        /* %SetFK(TR_GROUPFLUJO,NULL) */
        TR_GROUPFLUJO.N_IDGROUP = NULL
      WHERE
        /* %JoinFKPK(TR_GROUPFLUJO,:%Old," = ",",") */
        TR_GROUPFLUJO.N_IDGROUP = :old.N_ID;
  END IF;

  /* TC_GROUP  TC_ALERTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GROUP"
    CHILD_OWNER="", CHILD_TABLE="TC_ALERTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GROUP_FK", FK_COLUMNS="N_IDGROUP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALERTAS
      SET
        /* %SetFK(TC_ALERTAS,NULL) */
        TC_ALERTAS.N_IDGROUP = NULL
      WHERE
        /* %JoinFKPK(TC_ALERTAS,:%Old," = ",",") */
        TC_ALERTAS.N_IDGROUP = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_GROUP_BIENES AFTER DELETE ON TC_GROUP_BIENES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_GROUP_BIENES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_GROUP_BIENES  TC_GROUP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e17f", PARENT_OWNER="", PARENT_TABLE="TC_GROUP_BIENES"
    CHILD_OWNER="", CHILD_TABLE="TC_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GROUP_GROUP_BIENES", FK_COLUMNS="N_ID_GROUP_BIENES" */
    SELECT count(*) INTO NUMROWS
      FROM TC_GROUP
      WHERE
        /*  %JoinFKPK(TC_GROUP,:%Old," = "," AND") */
        TC_GROUP.N_ID_GROUP_BIENES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GROUP_BIENES because TC_GROUP exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_GROUP_BIENES AFTER UPDATE ON TC_GROUP_BIENES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_GROUP_BIENES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_GROUP_BIENES  TC_GROUP on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000e8a2", PARENT_OWNER="", PARENT_TABLE="TC_GROUP_BIENES"
    CHILD_OWNER="", CHILD_TABLE="TC_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GROUP_GROUP_BIENES", FK_COLUMNS="N_ID_GROUP_BIENES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_GROUP
      SET
        /* %SetFK(TC_GROUP,NULL) */
        TC_GROUP.N_ID_GROUP_BIENES = NULL
      WHERE
        /* %JoinFKPK(TC_GROUP,:%Old," = ",",") */
        TC_GROUP.N_ID_GROUP_BIENES = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_GRUPOS AFTER DELETE ON TC_GRUPOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_GRUPOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_GRUPOS  US_INSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000316ad", PARENT_OWNER="", PARENT_TABLE="TC_GRUPOS"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOS_INSCRIPCION", FK_COLUMNS="N_IDGRUPO" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRUPOS because US_INSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRUPOS  US_INTEGRACIONGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRUPOS"
    CHILD_OWNER="", CHILD_TABLE="US_INTEGRACIONGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOS_INTEGRUPO", FK_COLUMNS="N_IDGRUPO" */
    SELECT count(*) INTO NUMROWS
      FROM US_INTEGRACIONGRUPO
      WHERE
        /*  %JoinFKPK(US_INTEGRACIONGRUPO,:%Old," = "," AND") */
        US_INTEGRACIONGRUPO.N_IDGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRUPOS because US_INTEGRACIONGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_GRUPOS  TW_ALUMNOASIGNACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRUPOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIGNA_TC_GRUPOS_FK", FK_COLUMNS="N_IDGRUPO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNACION
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNACION,:%Old," = "," AND") */
        TW_ALUMNOASIGNACION.N_IDGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_GRUPOS because TW_ALUMNOASIGNACION exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_GRUPOS AFTER UPDATE ON TC_GRUPOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_GRUPOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_GRUPOS  US_INSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00037a34", PARENT_OWNER="", PARENT_TABLE="TC_GRUPOS"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOS_INSCRIPCION", FK_COLUMNS="N_IDGRUPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRUPOS because US_INSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRUPOS  US_INTEGRACIONGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRUPOS"
    CHILD_OWNER="", CHILD_TABLE="US_INTEGRACIONGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOS_INTEGRUPO", FK_COLUMNS="N_IDGRUPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INTEGRACIONGRUPO
      WHERE
        /*  %JoinFKPK(US_INTEGRACIONGRUPO,:%Old," = "," AND") */
        US_INTEGRACIONGRUPO.N_IDGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRUPOS because US_INTEGRACIONGRUPO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_GRUPOS  TW_ALUMNOASIGNACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_GRUPOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIGNA_TC_GRUPOS_FK", FK_COLUMNS="N_IDGRUPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNACION
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNACION,:%Old," = "," AND") */
        TW_ALUMNOASIGNACION.N_IDGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_GRUPOS because TW_ALUMNOASIGNACION exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_IDIOMAS AFTER DELETE ON TC_IDIOMAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_IDIOMAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_IDIOMAS  TW_IDIOMAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000ebd4", PARENT_OWNER="", PARENT_TABLE="TC_IDIOMAS"
    CHILD_OWNER="", CHILD_TABLE="TW_IDIOMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_IDIOMAS_TC_IDIOMAS_FK", FK_COLUMNS="N_IDIDIOMA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_IDIOMAS
      WHERE
        /*  %JoinFKPK(TW_IDIOMAS,:%Old," = "," AND") */
        TW_IDIOMAS.N_IDIDIOMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_IDIOMAS because TW_IDIOMAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_IDIOMAS AFTER UPDATE ON TC_IDIOMAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_IDIOMAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_IDIOMAS  TW_IDIOMAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001189c", PARENT_OWNER="", PARENT_TABLE="TC_IDIOMAS"
    CHILD_OWNER="", CHILD_TABLE="TW_IDIOMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_IDIOMAS_TC_IDIOMAS_FK", FK_COLUMNS="N_IDIDIOMA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_IDIOMAS
      WHERE
        /*  %JoinFKPK(TW_IDIOMAS,:%Old," = "," AND") */
        TW_IDIOMAS.N_IDIDIOMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_IDIOMAS because TW_IDIOMAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_INCIDENCIATIPOPERSONA AFTER DELETE ON TC_INCIDENCIATIPOPERSONA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_INCIDENCIATIPOPERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_INCIDENCIATIPOPERSONA  TW_ESCUELAINCIDENCIAPER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012c78", PARENT_OWNER="", PARENT_TABLE="TC_INCIDENCIATIPOPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TC_INCTIPPER_FK", FK_COLUMNS="N_IDINCIDENCIATIPOPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAPER
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAPER.N_IDINCIDENCIATIPOPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INCIDENCIATIPOPERSONA because TW_ESCUELAINCIDENCIAPER exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_INCIDENCIATIPOPERSONA AFTER UPDATE ON TC_INCIDENCIATIPOPERSONA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_INCIDENCIATIPOPERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_INCIDENCIATIPOPERSONA  TW_ESCUELAINCIDENCIAPER on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001513f", PARENT_OWNER="", PARENT_TABLE="TC_INCIDENCIATIPOPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TC_INCTIPPER_FK", FK_COLUMNS="N_IDINCIDENCIATIPOPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAPER
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAPER.N_IDINCIDENCIATIPOPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_INCIDENCIATIPOPERSONA because TW_ESCUELAINCIDENCIAPER exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_INDICADORPROMOVIDO AFTER DELETE ON TC_INDICADORPROMOVIDO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_INDICADORPROMOVIDO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_INDICADORPROMOVIDO  TW_ALUMNOPERIODOPROMEDIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00038ec1", PARENT_OWNER="", PARENT_TABLE="TC_INDICADORPROMOVIDO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPERIODOPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUPERPRO_TC_INDPRO_FK", FK_COLUMNS="N_IDINDICADORPROMOVIDO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPERIODOPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPERIODOPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOPERIODOPROMEDIO.N_IDINDICADORPROMOVIDO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INDICADORPROMOVIDO because TW_ALUMNOPERIODOPROMEDIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_INDICADORPROMOVIDO  TW_ALUMNOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_INDICADORPROMOVIDO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ACE_INDPROM_FK", FK_COLUMNS="N_IDINDICADORPROMOVIDO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLAR.N_IDINDICADORPROMOVIDO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INDICADORPROMOVIDO because TW_ALUMNOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_INDICADORPROMOVIDO  TW_ALUMNOOBSERVACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_INDICADORPROMOVIDO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOOBSERVACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOBS_TC_INDPRO_FK", FK_COLUMNS="N_IDINDICADORPROMOVIDO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOOBSERVACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOOBSERVACIONES,:%Old," = "," AND") */
        TW_ALUMNOOBSERVACIONES.N_IDINDICADORPROMOVIDO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INDICADORPROMOVIDO because TW_ALUMNOOBSERVACIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_INDICADORPROMOVIDO AFTER UPDATE ON TC_INDICADORPROMOVIDO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_INDICADORPROMOVIDO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_INDICADORPROMOVIDO  TW_ALUMNOPERIODOPROMEDIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00039369", PARENT_OWNER="", PARENT_TABLE="TC_INDICADORPROMOVIDO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPERIODOPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUPERPRO_TC_INDPRO_FK", FK_COLUMNS="N_IDINDICADORPROMOVIDO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOPERIODOPROMEDIO
      SET
        /* %SetFK(TW_ALUMNOPERIODOPROMEDIO,NULL) */
        TW_ALUMNOPERIODOPROMEDIO.N_IDINDICADORPROMOVIDO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOPERIODOPROMEDIO,:%Old," = ",",") */
        TW_ALUMNOPERIODOPROMEDIO.N_IDINDICADORPROMOVIDO = :old.N_ID;
  END IF;

  /* TC_INDICADORPROMOVIDO  TW_ALUMNOCICLOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_INDICADORPROMOVIDO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ACE_INDPROM_FK", FK_COLUMNS="N_IDINDICADORPROMOVIDO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOCICLOESCOLAR
      SET
        /* %SetFK(TW_ALUMNOCICLOESCOLAR,NULL) */
        TW_ALUMNOCICLOESCOLAR.N_IDINDICADORPROMOVIDO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOCICLOESCOLAR,:%Old," = ",",") */
        TW_ALUMNOCICLOESCOLAR.N_IDINDICADORPROMOVIDO = :old.N_ID;
  END IF;

  /* TC_INDICADORPROMOVIDO  TW_ALUMNOOBSERVACIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_INDICADORPROMOVIDO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOOBSERVACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOBS_TC_INDPRO_FK", FK_COLUMNS="N_IDINDICADORPROMOVIDO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOOBSERVACIONES
      SET
        /* %SetFK(TW_ALUMNOOBSERVACIONES,NULL) */
        TW_ALUMNOOBSERVACIONES.N_IDINDICADORPROMOVIDO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOOBSERVACIONES,:%Old," = ",",") */
        TW_ALUMNOOBSERVACIONES.N_IDINDICADORPROMOVIDO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_INMUEBLESITUACION AFTER DELETE ON TC_INMUEBLESITUACION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_INMUEBLESITUACION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_INMUEBLESITUACION  TW_IMUEBLESITUACIONHIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000229da", PARENT_OWNER="", PARENT_TABLE="TC_INMUEBLESITUACION"
    CHILD_OWNER="", CHILD_TABLE="TW_IMUEBLESITUACIONHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_INMUEBLESITUACION_FK", FK_COLUMNS="N_IDINMUEBLESITUACION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_IMUEBLESITUACIONHIS
      WHERE
        /*  %JoinFKPK(TW_IMUEBLESITUACIONHIS,:%Old," = "," AND") */
        TW_IMUEBLESITUACIONHIS.N_IDINMUEBLESITUACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INMUEBLESITUACION because TW_IMUEBLESITUACIONHIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_INMUEBLESITUACION  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_INMUEBLESITUACION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_INMUEBLESITUACION_INM_FK", FK_COLUMNS="N_IDSITUACION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDSITUACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INMUEBLESITUACION because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_INMUEBLESITUACION AFTER UPDATE ON TC_INMUEBLESITUACION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_INMUEBLESITUACION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_INMUEBLESITUACION  TW_IMUEBLESITUACIONHIS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024265", PARENT_OWNER="", PARENT_TABLE="TC_INMUEBLESITUACION"
    CHILD_OWNER="", CHILD_TABLE="TW_IMUEBLESITUACIONHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_INMUEBLESITUACION_FK", FK_COLUMNS="N_IDINMUEBLESITUACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_IMUEBLESITUACIONHIS
      WHERE
        /*  %JoinFKPK(TW_IMUEBLESITUACIONHIS,:%Old," = "," AND") */
        TW_IMUEBLESITUACIONHIS.N_IDINMUEBLESITUACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_INMUEBLESITUACION because TW_IMUEBLESITUACIONHIS exists.'
      );
    END IF;
  END IF;

  /* TC_INMUEBLESITUACION  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_INMUEBLESITUACION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_INMUEBLESITUACION_INM_FK", FK_COLUMNS="N_IDSITUACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDSITUACION = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDSITUACION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_INMUEBLEUSO AFTER DELETE ON TC_INMUEBLEUSO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_INMUEBLEUSO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_INMUEBLEUSO  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e441", PARENT_OWNER="", PARENT_TABLE="TC_INMUEBLEUSO"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_USO_FK", FK_COLUMNS="N_IDINMUEBLEUSO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDINMUEBLEUSO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_INMUEBLEUSO because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_INMUEBLEUSO AFTER UPDATE ON TC_INMUEBLEUSO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_INMUEBLEUSO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_INMUEBLEUSO  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000ed43", PARENT_OWNER="", PARENT_TABLE="TC_INMUEBLEUSO"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_USO_FK", FK_COLUMNS="N_IDINMUEBLEUSO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDINMUEBLEUSO = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDINMUEBLEUSO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_JEFATURASECTORIAL AFTER DELETE ON TC_JEFATURASECTORIAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_JEFATURASECTORIAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_JEFATURASECTORIAL  TC_ZONAESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010c02", PARENT_OWNER="", PARENT_TABLE="TC_JEFATURASECTORIAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ZONAESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ZONESC_TC_JEFSECT_FK", FK_COLUMNS="N_IDJEFATURASECTORIAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ZONAESCOLAR
      WHERE
        /*  %JoinFKPK(TC_ZONAESCOLAR,:%Old," = "," AND") */
        TC_ZONAESCOLAR.N_IDJEFATURASECTORIAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_JEFATURASECTORIAL because TC_ZONAESCOLAR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_JEFATURASECTORIAL AFTER UPDATE ON TC_JEFATURASECTORIAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_JEFATURASECTORIAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_JEFATURASECTORIAL  TC_ZONAESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012bbc", PARENT_OWNER="", PARENT_TABLE="TC_JEFATURASECTORIAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ZONAESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ZONESC_TC_JEFSECT_FK", FK_COLUMNS="N_IDJEFATURASECTORIAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ZONAESCOLAR
      WHERE
        /*  %JoinFKPK(TC_ZONAESCOLAR,:%Old," = "," AND") */
        TC_ZONAESCOLAR.N_IDJEFATURASECTORIAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_JEFATURASECTORIAL because TC_ZONAESCOLAR exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_LIBRODIRIGIDO AFTER DELETE ON TC_LIBRODIRIGIDO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_LIBRODIRIGIDO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_LIBRODIRIGIDO  TC_LIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001fbc2", PARENT_OWNER="", PARENT_TABLE="TC_LIBRODIRIGIDO"
    CHILD_OWNER="", CHILD_TABLE="TC_LIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_LIBROS_TC_LIBDIRIG_FK", FK_COLUMNS="N_IDLIBRODIRIGIDO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_LIBROS
      WHERE
        /*  %JoinFKPK(TC_LIBROS,:%Old," = "," AND") */
        TC_LIBROS.N_IDLIBRODIRIGIDO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBRODIRIGIDO because TC_LIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_LIBRODIRIGIDO  US_LIBRO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBRODIRIGIDO"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_DIRIGIDO", FK_COLUMNS="N_IDLIBRODIRIGIDO" */
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDLIBRODIRIGIDO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBRODIRIGIDO because US_LIBRO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_LIBRODIRIGIDO AFTER UPDATE ON TC_LIBRODIRIGIDO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_LIBRODIRIGIDO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_LIBRODIRIGIDO  TC_LIBROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00020e74", PARENT_OWNER="", PARENT_TABLE="TC_LIBRODIRIGIDO"
    CHILD_OWNER="", CHILD_TABLE="TC_LIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_LIBROS_TC_LIBDIRIG_FK", FK_COLUMNS="N_IDLIBRODIRIGIDO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_LIBROS
      SET
        /* %SetFK(TC_LIBROS,NULL) */
        TC_LIBROS.N_IDLIBRODIRIGIDO = NULL
      WHERE
        /* %JoinFKPK(TC_LIBROS,:%Old," = ",",") */
        TC_LIBROS.N_IDLIBRODIRIGIDO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_LIBRODIRIGIDO  US_LIBRO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBRODIRIGIDO"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_DIRIGIDO", FK_COLUMNS="N_IDLIBRODIRIGIDO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDLIBRODIRIGIDO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_LIBRODIRIGIDO because US_LIBRO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_LIBROS AFTER DELETE ON TC_LIBROS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_LIBROS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_LIBROS  TW_ALUMNOLIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000310e5", PARENT_OWNER="", PARENT_TABLE="TC_LIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOLIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALULIBROS_TC_LIBROS_FK", FK_COLUMNS="N_IDLIBROS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOLIBROS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOLIBROS,:%Old," = "," AND") */
        TW_ALUMNOLIBROS.N_IDLIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBROS because TW_ALUMNOLIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_LIBROS  TW_ESCUELALIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROS_TC_LIBROS_FK", FK_COLUMNS="N_IDLIBROS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROS,:%Old," = "," AND") */
        TW_ESCUELALIBROS.N_IDLIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBROS because TW_ESCUELALIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_LIBROS  TW_ASIGNATURALIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ASIGNATURALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ASIGLIBROS_TC_LIBROS_FK", FK_COLUMNS="N_IDLIBROS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ASIGNATURALIBROS
      WHERE
        /*  %JoinFKPK(TW_ASIGNATURALIBROS,:%Old," = "," AND") */
        TW_ASIGNATURALIBROS.N_IDLIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBROS because TW_ASIGNATURALIBROS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_LIBROS AFTER UPDATE ON TC_LIBROS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_LIBROS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_LIBROS  TW_ALUMNOLIBROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00036c0c", PARENT_OWNER="", PARENT_TABLE="TC_LIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOLIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALULIBROS_TC_LIBROS_FK", FK_COLUMNS="N_IDLIBROS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOLIBROS
      SET
        /* %SetFK(TW_ALUMNOLIBROS,NULL) */
        TW_ALUMNOLIBROS.N_IDLIBROS = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOLIBROS,:%Old," = ",",") */
        TW_ALUMNOLIBROS.N_IDLIBROS = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_LIBROS  TW_ESCUELALIBROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROS_TC_LIBROS_FK", FK_COLUMNS="N_IDLIBROS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROS,:%Old," = "," AND") */
        TW_ESCUELALIBROS.N_IDLIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_LIBROS because TW_ESCUELALIBROS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_LIBROS  TW_ASIGNATURALIBROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ASIGNATURALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ASIGLIBROS_TC_LIBROS_FK", FK_COLUMNS="N_IDLIBROS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ASIGNATURALIBROS
      WHERE
        /*  %JoinFKPK(TW_ASIGNATURALIBROS,:%Old," = "," AND") */
        TW_ASIGNATURALIBROS.N_IDLIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_LIBROS because TW_ASIGNATURALIBROS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_LIBROUSO AFTER DELETE ON TC_LIBROUSO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_LIBROUSO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_LIBROUSO  TC_LIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001db4f", PARENT_OWNER="", PARENT_TABLE="TC_LIBROUSO"
    CHILD_OWNER="", CHILD_TABLE="TC_LIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_LIBROS_TC_LIBUSO_FK", FK_COLUMNS="N_IDLIBROUSO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_LIBROS
      WHERE
        /*  %JoinFKPK(TC_LIBROS,:%Old," = "," AND") */
        TC_LIBROS.N_IDLIBROUSO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBROUSO because TC_LIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_LIBROUSO  US_LIBRO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBROUSO"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_USO", FK_COLUMNS="N_IDLIBROUSO" */
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDLIBROUSO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_LIBROUSO because US_LIBRO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_LIBROUSO AFTER UPDATE ON TC_LIBROUSO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_LIBROUSO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_LIBROUSO  TC_LIBROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001eecf", PARENT_OWNER="", PARENT_TABLE="TC_LIBROUSO"
    CHILD_OWNER="", CHILD_TABLE="TC_LIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_LIBROS_TC_LIBUSO_FK", FK_COLUMNS="N_IDLIBROUSO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_LIBROS
      SET
        /* %SetFK(TC_LIBROS,NULL) */
        TC_LIBROS.N_IDLIBROUSO = NULL
      WHERE
        /* %JoinFKPK(TC_LIBROS,:%Old," = ",",") */
        TC_LIBROS.N_IDLIBROUSO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_LIBROUSO  US_LIBRO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_LIBROUSO"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_USO", FK_COLUMNS="N_IDLIBROUSO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDLIBROUSO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_LIBROUSO because US_LIBRO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MATERIALCONSTRUCCION AFTER DELETE ON TC_MATERIALCONSTRUCCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MATERIALCONSTRUCCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MATERIALCONSTRUCCION  TW_INMUEBLE_LOCAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003659c", PARENT_OWNER="", PARENT_TABLE="TC_MATERIALCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_MATCONS_FK", FK_COLUMNS="N_IDMATERIALCONSTRUCCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDMATERIALCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MATERIALCONSTRUCCION because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MATERIALCONSTRUCCION  TR_INMUEBLEAULAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MATERIALCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEAULAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUAULA_TC_MATCONSTR_FK", FK_COLUMNS="N_IDMATERIALCONSTRUCCION" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEAULAS
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEAULAS,:%Old," = "," AND") */
        TR_INMUEBLEAULAS.N_IDMATERIALCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MATERIALCONSTRUCCION because TR_INMUEBLEAULAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MATERIALCONSTRUCCION  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MATERIALCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_MAT_CONS_FK", FK_COLUMNS="N_IDMATERIALCONSTRUCCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDMATERIALCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MATERIALCONSTRUCCION because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MATERIALCONSTRUCCION AFTER UPDATE ON TC_MATERIALCONSTRUCCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MATERIALCONSTRUCCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_MATERIALCONSTRUCCION  TW_INMUEBLE_LOCAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0003885d", PARENT_OWNER="", PARENT_TABLE="TC_MATERIALCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_MATCONS_FK", FK_COLUMNS="N_IDMATERIALCONSTRUCCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE_LOCAL
      SET
        /* %SetFK(TW_INMUEBLE_LOCAL,NULL) */
        TW_INMUEBLE_LOCAL.N_IDMATERIALCONSTRUCCION = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = ",",") */
        TW_INMUEBLE_LOCAL.N_IDMATERIALCONSTRUCCION = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MATERIALCONSTRUCCION  TR_INMUEBLEAULAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MATERIALCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEAULAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUAULA_TC_MATCONSTR_FK", FK_COLUMNS="N_IDMATERIALCONSTRUCCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEAULAS
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEAULAS,:%Old," = "," AND") */
        TR_INMUEBLEAULAS.N_IDMATERIALCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MATERIALCONSTRUCCION because TR_INMUEBLEAULAS exists.'
      );
    END IF;
  END IF;

  /* TC_MATERIALCONSTRUCCION  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MATERIALCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_MAT_CONS_FK", FK_COLUMNS="N_IDMATERIALCONSTRUCCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDMATERIALCONSTRUCCION = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDMATERIALCONSTRUCCION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MEDIDADISCIPLINA AFTER DELETE ON TC_MEDIDADISCIPLINA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MEDIDADISCIPLINA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MEDIDADISCIPLINA  TC_NIVELMEDIDA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000100bd", PARENT_OWNER="", PARENT_TABLE="TC_MEDIDADISCIPLINA"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVMEDI_TC_MEDIS_FK", FK_COLUMNS="N_IDMEDIDADISCIPLINA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELMEDIDA
      WHERE
        /*  %JoinFKPK(TC_NIVELMEDIDA,:%Old," = "," AND") */
        TC_NIVELMEDIDA.N_IDMEDIDADISCIPLINA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MEDIDADISCIPLINA because TC_NIVELMEDIDA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MEDIDADISCIPLINA AFTER UPDATE ON TC_MEDIDADISCIPLINA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MEDIDADISCIPLINA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MEDIDADISCIPLINA  TC_NIVELMEDIDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012488", PARENT_OWNER="", PARENT_TABLE="TC_MEDIDADISCIPLINA"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVMEDI_TC_MEDIS_FK", FK_COLUMNS="N_IDMEDIDADISCIPLINA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELMEDIDA
      WHERE
        /*  %JoinFKPK(TC_NIVELMEDIDA,:%Old," = "," AND") */
        TC_NIVELMEDIDA.N_IDMEDIDADISCIPLINA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MEDIDADISCIPLINA because TC_NIVELMEDIDA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MEDIDAS AFTER DELETE ON TC_MEDIDAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MEDIDAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MEDIDAS  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e963", PARENT_OWNER="", PARENT_TABLE="TC_MEDIDAS"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_MEDIDAS_FK1", FK_COLUMNS="N_IDMEDIDAS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDMEDIDAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MEDIDAS because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MEDIDAS AFTER UPDATE ON TC_MEDIDAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MEDIDAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_MEDIDAS  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000e461", PARENT_OWNER="", PARENT_TABLE="TC_MEDIDAS"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_MEDIDAS_FK1", FK_COLUMNS="N_IDMEDIDAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDMEDIDAS = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDMEDIDAS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MODALIDAD AFTER DELETE ON TC_MODALIDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MODALIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MODALIDAD  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00065ab3", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_MODALIDAD_FK1", FK_COLUMNS="N_IDMODALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODALIDAD because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MODALIDAD  TC_FUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_FUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FUNCIONREAL_MODALIDAD_FK", FK_COLUMNS="N_IDMODALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_FUNCIONREAL
      WHERE
        /*  %JoinFKPK(TC_FUNCIONREAL,:%Old," = "," AND") */
        TC_FUNCIONREAL.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODALIDAD because TC_FUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MODALIDAD  TC_PROCESOSPARAMETROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_MODALIDAD_FK", FK_COLUMNS="N_IDMODALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODALIDAD because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MODALIDAD  US_TALLER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="US_TALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TALLER_MODALIDAD_FK", FK_COLUMNS="N_IDMODALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM US_TALLER
      WHERE
        /*  %JoinFKPK(US_TALLER,:%Old," = "," AND") */
        US_TALLER.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODALIDAD because US_TALLER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MODALIDAD  TC_TURNOSESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_TURNOSESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TURNO_MODALIDAD__FK", FK_COLUMNS="N_IDMODALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TURNOSESCOLAR
      WHERE
        /*  %JoinFKPK(TC_TURNOSESCOLAR,:%Old," = "," AND") */
        TC_TURNOSESCOLAR.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODALIDAD because TC_TURNOSESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MODALIDAD  TC_REGLAPLANTILLA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_MODALI_FK", FK_COLUMNS="N_IDMODALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODALIDAD because TC_REGLAPLANTILLA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MODALIDAD AFTER UPDATE ON TC_MODALIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MODALIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MODALIDAD  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00065b67", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_MODALIDAD_FK1", FK_COLUMNS="N_IDMODALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MODALIDAD because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_MODALIDAD  TC_FUNCIONREAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_FUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FUNCIONREAL_MODALIDAD_FK", FK_COLUMNS="N_IDMODALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_FUNCIONREAL
      SET
        /* %SetFK(TC_FUNCIONREAL,NULL) */
        TC_FUNCIONREAL.N_IDMODALIDAD = NULL
      WHERE
        /* %JoinFKPK(TC_FUNCIONREAL,:%Old," = ",",") */
        TC_FUNCIONREAL.N_IDMODALIDAD = :old.N_ID;
  END IF;

  /* TC_MODALIDAD  TC_PROCESOSPARAMETROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_MODALIDAD_FK", FK_COLUMNS="N_IDMODALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PROCESOSPARAMETROS
      SET
        /* %SetFK(TC_PROCESOSPARAMETROS,NULL) */
        TC_PROCESOSPARAMETROS.N_IDMODALIDAD = NULL
      WHERE
        /* %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = ",",") */
        TC_PROCESOSPARAMETROS.N_IDMODALIDAD = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MODALIDAD  US_TALLER on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="US_TALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TALLER_MODALIDAD_FK", FK_COLUMNS="N_IDMODALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_TALLER
      WHERE
        /*  %JoinFKPK(US_TALLER,:%Old," = "," AND") */
        US_TALLER.N_IDMODALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MODALIDAD because US_TALLER exists.'
      );
    END IF;
  END IF;

  /* TC_MODALIDAD  TC_TURNOSESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_TURNOSESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TURNO_MODALIDAD__FK", FK_COLUMNS="N_IDMODALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_TURNOSESCOLAR
      SET
        /* %SetFK(TC_TURNOSESCOLAR,NULL) */
        TC_TURNOSESCOLAR.N_IDMODALIDAD = NULL
      WHERE
        /* %JoinFKPK(TC_TURNOSESCOLAR,:%Old," = ",",") */
        TC_TURNOSESCOLAR.N_IDMODALIDAD = :old.N_ID;
  END IF;

  /* TC_MODALIDAD  TC_REGLAPLANTILLA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MODALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_MODALI_FK", FK_COLUMNS="N_IDMODALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_REGLAPLANTILLA
      SET
        /* %SetFK(TC_REGLAPLANTILLA,NULL) */
        TC_REGLAPLANTILLA.N_IDMODALIDAD = NULL
      WHERE
        /* %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = ",",") */
        TC_REGLAPLANTILLA.N_IDMODALIDAD = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MODULO AFTER DELETE ON TC_MODULO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MODULO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MODULO  TC_MENU on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000df1a", PARENT_OWNER="", PARENT_TABLE="TC_MODULO"
    CHILD_OWNER="", CHILD_TABLE="TC_MENU"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MENU_MODULO_FK", FK_COLUMNS="N_IDMODULO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MENU
      WHERE
        /*  %JoinFKPK(TC_MENU,:%Old," = "," AND") */
        TC_MENU.N_IDMODULO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MODULO because TC_MENU exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MODULO AFTER UPDATE ON TC_MODULO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MODULO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MODULO  TC_MENU on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000100de", PARENT_OWNER="", PARENT_TABLE="TC_MODULO"
    CHILD_OWNER="", CHILD_TABLE="TC_MENU"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MENU_MODULO_FK", FK_COLUMNS="N_IDMODULO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_MENU
      WHERE
        /*  %JoinFKPK(TC_MENU,:%Old," = "," AND") */
        TC_MENU.N_IDMODULO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MODULO because TC_MENU exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOTIVO AFTER DELETE ON TC_MOTIVO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOTIVO  TR_GROUPMOTIVOFLUJOGESTION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003400a", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPMOTIVOFLUJOGESTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROUPMOT_FL_TC_MOT_FK", FK_COLUMNS="N_IDMOTIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_GROUPMOTIVOFLUJOGESTION
      WHERE
        /*  %JoinFKPK(TR_GROUPMOTIVOFLUJOGESTION,:%Old," = "," AND") */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDMOTIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVO because TR_GROUPMOTIVOFLUJOGESTION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MOTIVO  TR_PLAZAASIGNADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAZAASIGNADA_MOTIVO_FK", FK_COLUMNS="N_TIPONOMBRAMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_TIPONOMBRAMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVO because TR_PLAZAASIGNADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MOTIVO  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_MOTIVO_FK", FK_COLUMNS="N_IDMOTIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDMOTIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVO because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOTIVO AFTER UPDATE ON TC_MOTIVO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_MOTIVO  TR_GROUPMOTIVOFLUJOGESTION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00037cab", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TR_GROUPMOTIVOFLUJOGESTION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_GROUPMOT_FL_TC_MOT_FK", FK_COLUMNS="N_IDMOTIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_GROUPMOTIVOFLUJOGESTION
      SET
        /* %SetFK(TR_GROUPMOTIVOFLUJOGESTION,NULL) */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDMOTIVO = NULL
      WHERE
        /* %JoinFKPK(TR_GROUPMOTIVOFLUJOGESTION,:%Old," = ",",") */
        TR_GROUPMOTIVOFLUJOGESTION.N_IDMOTIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MOTIVO  TR_PLAZAASIGNADA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAZAASIGNADA_MOTIVO_FK", FK_COLUMNS="N_TIPONOMBRAMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_TIPONOMBRAMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVO because TR_PLAZAASIGNADA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MOTIVO  TR_MOVPLAZAPERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_MOTIVO_FK", FK_COLUMNS="N_IDMOTIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDMOTIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVO because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOTIVOBAJAALUMNO AFTER DELETE ON TC_MOTIVOBAJAALUMNO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOTIVOBAJAALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOTIVOBAJAALUMNO  TW_ALUMNOBAJAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00021c1f", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOBAJAALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUBAJ_TC_MOTBAJALU_FK", FK_COLUMNS="N_IDMOTIVOBAJAALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDMOTIVOBAJAALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOBAJAALUMNO because TW_ALUMNOBAJAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MOTIVOBAJAALUMNO  US_ALUMNOBAJA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOBAJAALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBAJA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOBAJA_MOTIVO", FK_COLUMNS="N_IDMOTIVOBAJA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBAJA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBAJA,:%Old," = "," AND") */
        US_ALUMNOBAJA.N_IDMOTIVOBAJA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOBAJAALUMNO because US_ALUMNOBAJA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOTIVOBAJAALUMNO AFTER UPDATE ON TC_MOTIVOBAJAALUMNO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOTIVOBAJAALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MOTIVOBAJAALUMNO  TW_ALUMNOBAJAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000262b4", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOBAJAALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUBAJ_TC_MOTBAJALU_FK", FK_COLUMNS="N_IDMOTIVOBAJAALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDMOTIVOBAJAALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVOBAJAALUMNO because TW_ALUMNOBAJAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MOTIVOBAJAALUMNO  US_ALUMNOBAJA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOBAJAALUMNO"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBAJA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOBAJA_MOTIVO", FK_COLUMNS="N_IDMOTIVOBAJA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBAJA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBAJA,:%Old," = "," AND") */
        US_ALUMNOBAJA.N_IDMOTIVOBAJA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVOBAJAALUMNO because US_ALUMNOBAJA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOTIVOFUNCIONREAL AFTER DELETE ON TC_MOTIVOFUNCIONREAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOTIVOFUNCIONREAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOTIVOFUNCIONREAL  TC_PERSONALPLAZA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00026105", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOFUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSOPLAZ_TC_MOTFUNR_FK", FK_COLUMNS="N_IDMOTIVOFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZA,:%Old," = "," AND") */
        TC_PERSONALPLAZA.N_IDMOTIVOFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOFUNCIONREAL because TC_PERSONALPLAZA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MOTIVOFUNCIONREAL  TC_PERSONALPLAZAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOFUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_MOTFUNR_FK", FK_COLUMNS="N_IDMOTIVOFUNCIONREAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = "," AND") */
        TC_PERSONALPLAZAHISTORICO.N_IDMOTIVOFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOFUNCIONREAL because TC_PERSONALPLAZAHISTORICO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOTIVOFUNCIONREAL AFTER UPDATE ON TC_MOTIVOFUNCIONREAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOTIVOFUNCIONREAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MOTIVOFUNCIONREAL  TC_PERSONALPLAZA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000267bf", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOFUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSOPLAZ_TC_MOTFUNR_FK", FK_COLUMNS="N_IDMOTIVOFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZA,:%Old," = "," AND") */
        TC_PERSONALPLAZA.N_IDMOTIVOFUNCIONREAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVOFUNCIONREAL because TC_PERSONALPLAZA exists.'
      );
    END IF;
  END IF;

  /* TC_MOTIVOFUNCIONREAL  TC_PERSONALPLAZAHISTORICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOFUNCIONREAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_MOTFUNR_FK", FK_COLUMNS="N_IDMOTIVOFUNCIONREAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONALPLAZAHISTORICO
      SET
        /* %SetFK(TC_PERSONALPLAZAHISTORICO,NULL) */
        TC_PERSONALPLAZAHISTORICO.N_IDMOTIVOFUNCIONREAL = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = ",",") */
        TC_PERSONALPLAZAHISTORICO.N_IDMOTIVOFUNCIONREAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOTIVOPLANDEACCION AFTER DELETE ON TC_MOTIVOPLANDEACCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOTIVOPLANDEACCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOTIVOPLANDEACCION  TW_NOPROMOPLANDEACCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000257e0", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOPLANDEACCION"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TW_MOTPLAACC_FK", FK_COLUMNS="N_IDMOTIVOPLANDEACCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDMOTIVOPLANDEACCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOPLANDEACCION because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MOTIVOPLANDEACCION  TW_PROMOCONCONDICION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOPLANDEACCION"
    CHILD_OWNER="", CHILD_TABLE="TW_PROMOCONCONDICION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PCONCOND_TC_MOTPLAN_FK", FK_COLUMNS="N_IDMOTIVOPLANDEACCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PROMOCONCONDICION
      WHERE
        /*  %JoinFKPK(TW_PROMOCONCONDICION,:%Old," = "," AND") */
        TW_PROMOCONCONDICION.N_IDMOTIVOPLANDEACCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOPLANDEACCION because TW_PROMOCONCONDICION exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOTIVOPLANDEACCION AFTER UPDATE ON TC_MOTIVOPLANDEACCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOTIVOPLANDEACCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MOTIVOPLANDEACCION  TW_NOPROMOPLANDEACCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00029704", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOPLANDEACCION"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TW_MOTPLAACC_FK", FK_COLUMNS="N_IDMOTIVOPLANDEACCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDMOTIVOPLANDEACCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVOPLANDEACCION because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MOTIVOPLANDEACCION  TW_PROMOCONCONDICION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOPLANDEACCION"
    CHILD_OWNER="", CHILD_TABLE="TW_PROMOCONCONDICION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PCONCOND_TC_MOTPLAN_FK", FK_COLUMNS="N_IDMOTIVOPLANDEACCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PROMOCONCONDICION
      WHERE
        /*  %JoinFKPK(TW_PROMOCONCONDICION,:%Old," = "," AND") */
        TW_PROMOCONCONDICION.N_IDMOTIVOPLANDEACCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVOPLANDEACCION because TW_PROMOCONCONDICION exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOTIVOPROMEDIOSHIS AFTER DELETE ON TC_MOTIVOPROMEDIOSHIS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOTIVOPROMEDIOSHIS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOTIVOPROMEDIOSHIS  TW_ALUMNOPROMEDIOSNIVEL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012499", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOPROMEDIOSHIS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tw_alumnopromN_tc_movpromh_PK", FK_COLUMNS="N_IDTC_MOTIVOPROMEDIOSHIS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDTC_MOTIVOPROMEDIOSHIS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOPROMEDIOSHIS because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOTIVOPROMEDIOSHIS AFTER UPDATE ON TC_MOTIVOPROMEDIOSHIS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOTIVOPROMEDIOSHIS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_MOTIVOPROMEDIOSHIS  TW_ALUMNOPROMEDIOSNIVEL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00011e3d", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOPROMEDIOSHIS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tw_alumnopromN_tc_movpromh_PK", FK_COLUMNS="N_IDTC_MOTIVOPROMEDIOSHIS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOPROMEDIOSNIVEL
      SET
        /* %SetFK(TW_ALUMNOPROMEDIOSNIVEL,NULL) */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDTC_MOTIVOPROMEDIOSHIS = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = ",",") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDTC_MOTIVOPROMEDIOSHIS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOTIVOREC AFTER DELETE ON TC_MOTIVOREC for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOTIVOREC 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOTIVOREC  TW_ALUMNORECOMENDACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010eaf", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOREC"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNORECOMENDACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_MOTIVOREC21", FK_COLUMNS="N_IDMOTIVOREC" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNORECOMENDACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNORECOMENDACIONES,:%Old," = "," AND") */
        TW_ALUMNORECOMENDACIONES.N_IDMOTIVOREC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOTIVOREC because TW_ALUMNORECOMENDACIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOTIVOREC AFTER UPDATE ON TC_MOTIVOREC for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOTIVOREC 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MOTIVOREC  TW_ALUMNORECOMENDACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000128b7", PARENT_OWNER="", PARENT_TABLE="TC_MOTIVOREC"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNORECOMENDACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_MOTIVOREC21", FK_COLUMNS="N_IDMOTIVOREC" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNORECOMENDACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNORECOMENDACIONES,:%Old," = "," AND") */
        TW_ALUMNORECOMENDACIONES.N_IDMOTIVOREC = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOTIVOREC because TW_ALUMNORECOMENDACIONES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOVIMIENTO AFTER DELETE ON TC_MOVIMIENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOVIMIENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOVIMIENTO  TC_MOTIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e536", PARENT_OWNER="", PARENT_TABLE="TC_MOVIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTIVO_TC_MOVIM_FK", FK_COLUMNS="N_IDMOVIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOTIVO
      WHERE
        /*  %JoinFKPK(TC_MOTIVO,:%Old," = "," AND") */
        TC_MOTIVO.N_IDMOVIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOVIMIENTO because TC_MOTIVO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOVIMIENTO AFTER UPDATE ON TC_MOVIMIENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOVIMIENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MOVIMIENTO  TC_MOTIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000102a5", PARENT_OWNER="", PARENT_TABLE="TC_MOVIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTIVO_TC_MOVIM_FK", FK_COLUMNS="N_IDMOVIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_MOTIVO
      WHERE
        /*  %JoinFKPK(TC_MOTIVO,:%Old," = "," AND") */
        TC_MOTIVO.N_IDMOVIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOVIMIENTO because TC_MOTIVO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MOVIMIENTOALUMNO AFTER DELETE ON TC_MOVIMIENTOALUMNO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MOVIMIENTOALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MOVIMIENTOALUMNO  TW_ALUMNOMOVIMIENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011830", PARENT_OWNER="", PARENT_TABLE="TC_MOVIMIENTOALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TC_MOVALU_FK", FK_COLUMNS="N_IDMOVIMIENTOALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDMOVIMIENTOALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MOVIMIENTOALUMNO because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MOVIMIENTOALUMNO AFTER UPDATE ON TC_MOVIMIENTOALUMNO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MOVIMIENTOALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MOVIMIENTOALUMNO  TW_ALUMNOMOVIMIENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012c72", PARENT_OWNER="", PARENT_TABLE="TC_MOVIMIENTOALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TC_MOVALU_FK", FK_COLUMNS="N_IDMOVIMIENTOALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDMOVIMIENTOALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MOVIMIENTOALUMNO because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MUNICIPIODELEGACIONES AFTER DELETE ON TC_MUNICIPIODELEGACIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MUNICIPIODELEGACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MUNICIPIODELEGACIONES  TC_COLONIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005bfb3", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TC_COLONIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_COLONIA_TC_MUNICIP_FK", FK_COLUMNS="N_IDMUNICIPIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_COLONIA
      WHERE
        /*  %JoinFKPK(TC_COLONIA,:%Old," = "," AND") */
        TC_COLONIA.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MUNICIPIODELEGACIONES because TC_COLONIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MUNICIPIODELEGACIONES  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_MUNDEL_FK", FK_COLUMNS="N_IDMUNICIPIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MUNICIPIODELEGACIONES because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MUNICIPIODELEGACIONES  TW_ALUMNODOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_MUNDEL_FK", FK_COLUMNS="N_IDMUNICIPIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MUNICIPIODELEGACIONES because TW_ALUMNODOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MUNICIPIODELEGACIONES  TC_CODIGOPOSTAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TC_CODIGOPOSTAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CODPOS_TC_MUNIDELE_FK", FK_COLUMNS="N_IDMUNICIPIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CODIGOPOSTAL
      WHERE
        /*  %JoinFKPK(TC_CODIGOPOSTAL,:%Old," = "," AND") */
        TC_CODIGOPOSTAL.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MUNICIPIODELEGACIONES because TC_CODIGOPOSTAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_MUNICIPIODELEGACIONES  TW_DOMICILIOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_MUNDEL_FK", FK_COLUMNS="N_IDMUNICIPIODELEGACION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDMUNICIPIODELEGACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MUNICIPIODELEGACIONES because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MUNICIPIODELEGACIONES AFTER UPDATE ON TC_MUNICIPIODELEGACIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MUNICIPIODELEGACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_MUNICIPIODELEGACIONES  TC_COLONIA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00063851", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TC_COLONIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_COLONIA_TC_MUNICIP_FK", FK_COLUMNS="N_IDMUNICIPIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_COLONIA
      SET
        /* %SetFK(TC_COLONIA,NULL) */
        TC_COLONIA.N_IDMUNICIPIO = NULL
      WHERE
        /* %JoinFKPK(TC_COLONIA,:%Old," = ",",") */
        TC_COLONIA.N_IDMUNICIPIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MUNICIPIODELEGACIONES  TW_INMUEBLEDOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_MUNDEL_FK", FK_COLUMNS="N_IDMUNICIPIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MUNICIPIODELEGACIONES because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MUNICIPIODELEGACIONES  TW_ALUMNODOMICILIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNODOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUDOM_TC_MUNDEL_FK", FK_COLUMNS="N_IDMUNICIPIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNODOMICILIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNODOMICILIO,:%Old," = "," AND") */
        TW_ALUMNODOMICILIO.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MUNICIPIODELEGACIONES because TW_ALUMNODOMICILIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MUNICIPIODELEGACIONES  TC_CODIGOPOSTAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TC_CODIGOPOSTAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CODPOS_TC_MUNIDELE_FK", FK_COLUMNS="N_IDMUNICIPIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CODIGOPOSTAL
      WHERE
        /*  %JoinFKPK(TC_CODIGOPOSTAL,:%Old," = "," AND") */
        TC_CODIGOPOSTAL.N_IDMUNICIPIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MUNICIPIODELEGACIONES because TC_CODIGOPOSTAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_MUNICIPIODELEGACIONES  TW_DOMICILIOPERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIODELEGACIONES"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_MUNDEL_FK", FK_COLUMNS="N_IDMUNICIPIODELEGACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDMUNICIPIODELEGACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MUNICIPIODELEGACIONES because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_MUNICIPIOETNIAS AFTER DELETE ON TC_MUNICIPIOETNIAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_MUNICIPIOETNIAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_MUNICIPIOETNIAS  TC_ETNIASINDIGENAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010bab", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIOETNIAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ETNIASINDIGENAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ETNIAIND_TC_MUNIC_ETN_FK", FK_COLUMNS="N_IDMUNICIPIOETNIA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ETNIASINDIGENAS
      WHERE
        /*  %JoinFKPK(TC_ETNIASINDIGENAS,:%Old," = "," AND") */
        TC_ETNIASINDIGENAS.N_IDMUNICIPIOETNIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_MUNICIPIOETNIAS because TC_ETNIASINDIGENAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_MUNICIPIOETNIAS AFTER UPDATE ON TC_MUNICIPIOETNIAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_MUNICIPIOETNIAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_MUNICIPIOETNIAS  TC_ETNIASINDIGENAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013dfa", PARENT_OWNER="", PARENT_TABLE="TC_MUNICIPIOETNIAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ETNIASINDIGENAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ETNIAIND_TC_MUNIC_ETN_FK", FK_COLUMNS="N_IDMUNICIPIOETNIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ETNIASINDIGENAS
      WHERE
        /*  %JoinFKPK(TC_ETNIASINDIGENAS,:%Old," = "," AND") */
        TC_ETNIASINDIGENAS.N_IDMUNICIPIOETNIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_MUNICIPIOETNIAS because TC_ETNIASINDIGENAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NECESIDADESESPECIALES AFTER DELETE ON TC_NECESIDADESESPECIALES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NECESIDADESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NECESIDADESESPECIALES  TW_PERSONANECESIDADESESPECIAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000286d5", PARENT_OWNER="", PARENT_TABLE="TC_NECESIDADESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONANECESIDADESESPECIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERNECESP_TC_NECESP_FK", FK_COLUMNS="N_IDNECESIDADESESPECIALES" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONANECESIDADESESPECIAL
      WHERE
        /*  %JoinFKPK(TW_PERSONANECESIDADESESPECIAL,:%Old," = "," AND") */
        TW_PERSONANECESIDADESESPECIAL.N_IDNECESIDADESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NECESIDADESESPECIALES because TW_PERSONANECESIDADESESPECIAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NECESIDADESESPECIALES  TW_ALUMNOCAPACIDADESDIFERENTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NECESIDADESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCAPACIDADESDIFERENTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAPDIF_TC_NECESP_FK", FK_COLUMNS="N_IDNECESIDADESDIFERENTES" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCAPACIDADESDIFERENTES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCAPACIDADESDIFERENTES,:%Old," = "," AND") */
        TW_ALUMNOCAPACIDADESDIFERENTES.N_IDNECESIDADESDIFERENTES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NECESIDADESESPECIALES because TW_ALUMNOCAPACIDADESDIFERENTES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NECESIDADESESPECIALES AFTER UPDATE ON TC_NECESIDADESESPECIALES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NECESIDADESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_NECESIDADESESPECIALES  TW_PERSONANECESIDADESESPECIAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002d608", PARENT_OWNER="", PARENT_TABLE="TC_NECESIDADESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONANECESIDADESESPECIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERNECESP_TC_NECESP_FK", FK_COLUMNS="N_IDNECESIDADESESPECIALES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONANECESIDADESESPECIAL
      WHERE
        /*  %JoinFKPK(TW_PERSONANECESIDADESESPECIAL,:%Old," = "," AND") */
        TW_PERSONANECESIDADESESPECIAL.N_IDNECESIDADESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NECESIDADESESPECIALES because TW_PERSONANECESIDADESESPECIAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NECESIDADESESPECIALES  TW_ALUMNOCAPACIDADESDIFERENTES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NECESIDADESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCAPACIDADESDIFERENTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAPDIF_TC_NECESP_FK", FK_COLUMNS="N_IDNECESIDADESDIFERENTES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCAPACIDADESDIFERENTES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCAPACIDADESDIFERENTES,:%Old," = "," AND") */
        TW_ALUMNOCAPACIDADESDIFERENTES.N_IDNECESIDADESDIFERENTES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NECESIDADESESPECIALES because TW_ALUMNOCAPACIDADESDIFERENTES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NIVELEDUCATIVO AFTER DELETE ON TC_NIVELEDUCATIVO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NIVELEDUCATIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  SR_NIVEL_EDUCATIVO_FORMATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00226079", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="SR_NIVEL_EDUCATIVO_FORMATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SR_NIVEL_EDUCATIVO_FORMAT_FK1", FK_COLUMNS="N_NIVEL_EDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM SR_NIVEL_EDUCATIVO_FORMATO
      WHERE
        /*  %JoinFKPK(SR_NIVEL_EDUCATIVO_FORMATO,:%Old," = "," AND") */
        SR_NIVEL_EDUCATIVO_FORMATO.N_NIVEL_EDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because SR_NIVEL_EDUCATIVO_FORMATO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_NIVELEDUCAT_FK1", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_FUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_FUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FUNCREAL_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_FUNCIONREAL
      WHERE
        /*  %JoinFKPK(TC_FUNCIONREAL,:%Old," = "," AND") */
        TC_FUNCIONREAL.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_FUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_PROCESOSDATOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSDATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSDATOS_TC_NIVEL_FK1", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSDATOS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSDATOS,:%Old," = "," AND") */
        TC_PROCESOSDATOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_PROCESOSDATOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_CALENDARIOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CALENDESC_TC_NIVELEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CALENDARIOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_CALENDARIOESCOLAR,:%Old," = "," AND") */
        TC_CALENDARIOESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_CALENDARIOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TW_COMUNICADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMUNICADOS_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOS,:%Old," = "," AND") */
        TW_COMUNICADOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TW_COMUNICADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_ASIGNATURAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNA_TC_NIVELEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAS
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAS,:%Old," = "," AND") */
        TC_ASIGNATURAS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_ASIGNATURAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_NIVELEDUCA_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_ALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_CUINORMATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_NIVELEDUCATIVO_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CUINORMATIVA
      WHERE
        /*  %JoinFKPK(TC_CUINORMATIVA,:%Old," = "," AND") */
        TC_CUINORMATIVA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_CUINORMATIVA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_DIRECCIONOPERATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_DIRECCIONOPERATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tc_direccionoperativa_TcnivelE", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DIRECCIONOPERATIVA
      WHERE
        /*  %JoinFKPK(TC_DIRECCIONOPERATIVA,:%Old," = "," AND") */
        TC_DIRECCIONOPERATIVA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_DIRECCIONOPERATIVA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_PROCESOSPARAMETROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_NIVELEDUCATIVO_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  US_PROMEDIONIVELEDUCATIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_NIVDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  SC_FORMATOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="SC_FORMATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_T_N_ID_S_N_IDNIVELEDUCATIVO", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM SC_FORMATOS
      WHERE
        /*  %JoinFKPK(SC_FORMATOS,:%Old," = "," AND") */
        SC_FORMATOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because SC_FORMATOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_MOVIMIENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVIM_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOVIMIENTO
      WHERE
        /*  %JoinFKPK(TC_MOVIMIENTO,:%Old," = "," AND") */
        TC_MOVIMIENTO.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_MOVIMIENTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  US_ESTADISTICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="US_ESTADISTICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="NIVELEDU_ESTADIS_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM US_ESTADISTICA
      WHERE
        /*  %JoinFKPK(US_ESTADISTICA,:%Old," = "," AND") */
        US_ESTADISTICA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because US_ESTADISTICA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_ESTADO_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESTADO_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EDO_INM_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESTADO_INMUEBLE
      WHERE
        /*  %JoinFKPK(TC_ESTADO_INMUEBLE,:%Old," = "," AND") */
        TC_ESTADO_INMUEBLE.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_ESTADO_INMUEBLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_TURNOSESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_TURNOSESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TURNO_NIVEL__FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TURNOSESCOLAR
      WHERE
        /*  %JoinFKPK(TC_TURNOSESCOLAR,:%Old," = "," AND") */
        TC_TURNOSESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_TURNOSESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_NECESIDADESESPECIALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_NECESIDADESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NECESESPE_TC_NIVELEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_NECESIDADESESPECIALES
      WHERE
        /*  %JoinFKPK(TC_NECESIDADESESPECIALES,:%Old," = "," AND") */
        TC_NECESIDADESESPECIALES.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_NECESIDADESESPECIALES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TW_DATOSESTADISTICOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATEST_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_DATOSESTADISTICOS,:%Old," = "," AND") */
        TW_DATOSESTADISTICOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TW_DATOSESTADISTICOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_NIVELFALTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVFAL_TC_NIVFALED_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELFALTA
      WHERE
        /*  %JoinFKPK(TC_NIVELFALTA,:%Old," = "," AND") */
        TC_NIVELFALTA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_NIVELFALTA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_REGLAPLANTILLA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_REGLAPLANTILLA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_RUTAREPORTE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_RUTAREPORTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_RUTAREP_TC_NIVED_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_RUTAREPORTE
      WHERE
        /*  %JoinFKPK(TC_RUTAREPORTE,:%Old," = "," AND") */
        TC_RUTAREPORTE.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_RUTAREPORTE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_CONSULTA_REPORTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_CONSULTA_REPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CONSULTA_REPORTES_TC_N_FK1", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CONSULTA_REPORTES
      WHERE
        /*  %JoinFKPK(TC_CONSULTA_REPORTES,:%Old," = "," AND") */
        TC_CONSULTA_REPORTES.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_CONSULTA_REPORTES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TW_ALUMNOPROMEDIOSNIVEL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOPROMEDIOSNIVEL_NVL", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_GRADOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_GRADOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GRADESC_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_GRADOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_GRADOESCOLAR,:%Old," = "," AND") */
        TC_GRADOESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_GRADOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_ZONAESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ZONAESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tc_zonaescolar_TcnivelE", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ZONAESCOLAR
      WHERE
        /*  %JoinFKPK(TC_ZONAESCOLAR,:%Old," = "," AND") */
        TC_ZONAESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_ZONAESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TW_FOLIOSASIGNADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="NIVEDU_FOLASIG", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_MODALIDAD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_MODALIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MODALIDAD_NIVELE", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MODALIDAD
      WHERE
        /*  %JoinFKPK(TC_MODALIDAD,:%Old," = "," AND") */
        TC_MODALIDAD.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_MODALIDAD exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_PARAMETROVALOR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_PARAMETROVALOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PARAMVAL_TC_NIVED_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PARAMETROVALOR
      WHERE
        /*  %JoinFKPK(TC_PARAMETROVALOR,:%Old," = "," AND") */
        TC_PARAMETROVALOR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_PARAMETROVALOR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELEDUCATIVO  TC_TIPOASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOAS_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TIPOASIGNATURA
      WHERE
        /*  %JoinFKPK(TC_TIPOASIGNATURA,:%Old," = "," AND") */
        TC_TIPOASIGNATURA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELEDUCATIVO because TC_TIPOASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NIVELEDUCATIVO AFTER UPDATE ON TC_NIVELEDUCATIVO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NIVELEDUCATIVO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_NIVELEDUCATIVO  SR_NIVEL_EDUCATIVO_FORMATO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00237303", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="SR_NIVEL_EDUCATIVO_FORMATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SR_NIVEL_EDUCATIVO_FORMAT_FK1", FK_COLUMNS="N_NIVEL_EDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SR_NIVEL_EDUCATIVO_FORMATO
      SET
        /* %SetFK(SR_NIVEL_EDUCATIVO_FORMATO,NULL) */
        SR_NIVEL_EDUCATIVO_FORMATO.N_NIVEL_EDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(SR_NIVEL_EDUCATIVO_FORMATO,:%Old," = ",",") */
        SR_NIVEL_EDUCATIVO_FORMATO.N_NIVEL_EDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_NIVELEDUCAT_FK1", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_FUNCIONREAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_FUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FUNCREAL_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_FUNCIONREAL
      SET
        /* %SetFK(TC_FUNCIONREAL,NULL) */
        TC_FUNCIONREAL.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_FUNCIONREAL,:%Old," = ",",") */
        TC_FUNCIONREAL.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_PROCESOSDATOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSDATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSDATOS_TC_NIVEL_FK1", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSDATOS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSDATOS,:%Old," = "," AND") */
        TC_PROCESOSDATOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_PROCESOSDATOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_CALENDARIOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CALENDESC_TC_NIVELEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CALENDARIOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_CALENDARIOESCOLAR,:%Old," = "," AND") */
        TC_CALENDARIOESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_CALENDARIOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TW_COMUNICADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMUNICADOS_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOS,:%Old," = "," AND") */
        TW_COMUNICADOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TW_COMUNICADOS exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_ASIGNATURAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNA_TC_NIVELEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURAS
      SET
        /* %SetFK(TC_ASIGNATURAS,NULL) */
        TC_ASIGNATURAS.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURAS,:%Old," = ",",") */
        TC_ASIGNATURAS.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_ALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_NIVELEDUCA_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNO
      SET
        /* %SetFK(TC_ALUMNO,NULL) */
        TC_ALUMNO.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNO,:%Old," = ",",") */
        TC_ALUMNO.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_CUINORMATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_NIVELEDUCATIVO_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CUINORMATIVA
      SET
        /* %SetFK(TC_CUINORMATIVA,NULL) */
        TC_CUINORMATIVA.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_CUINORMATIVA,:%Old," = ",",") */
        TC_CUINORMATIVA.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_DIRECCIONOPERATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_DIRECCIONOPERATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tc_direccionoperativa_TcnivelE", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DIRECCIONOPERATIVA
      SET
        /* %SetFK(TC_DIRECCIONOPERATIVA,NULL) */
        TC_DIRECCIONOPERATIVA.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_DIRECCIONOPERATIVA,:%Old," = ",",") */
        TC_DIRECCIONOPERATIVA.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_PROCESOSPARAMETROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_NIVELEDUCATIVO_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  US_PROMEDIONIVELEDUCATIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_NIVDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  SC_FORMATOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="SC_FORMATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_T_N_ID_S_N_IDNIVELEDUCATIVO", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_FORMATOS
      SET
        /* %SetFK(SC_FORMATOS,NULL) */
        SC_FORMATOS.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(SC_FORMATOS,:%Old," = ",",") */
        SC_FORMATOS.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_MOVIMIENTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVIM_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOVIMIENTO
      SET
        /* %SetFK(TC_MOVIMIENTO,NULL) */
        TC_MOVIMIENTO.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_MOVIMIENTO,:%Old," = ",",") */
        TC_MOVIMIENTO.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  US_ESTADISTICA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="US_ESTADISTICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="NIVELEDU_ESTADIS_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ESTADISTICA
      WHERE
        /*  %JoinFKPK(US_ESTADISTICA,:%Old," = "," AND") */
        US_ESTADISTICA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because US_ESTADISTICA exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_ESTADO_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESTADO_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EDO_INM_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ESTADO_INMUEBLE
      SET
        /* %SetFK(TC_ESTADO_INMUEBLE,NULL) */
        TC_ESTADO_INMUEBLE.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_ESTADO_INMUEBLE,:%Old," = ",",") */
        TC_ESTADO_INMUEBLE.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_TURNOSESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_TURNOSESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TURNO_NIVEL__FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_TURNOSESCOLAR
      SET
        /* %SetFK(TC_TURNOSESCOLAR,NULL) */
        TC_TURNOSESCOLAR.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_TURNOSESCOLAR,:%Old," = ",",") */
        TC_TURNOSESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_NECESIDADESESPECIALES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_NECESIDADESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NECESESPE_TC_NIVELEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_NECESIDADESESPECIALES
      SET
        /* %SetFK(TC_NECESIDADESESPECIALES,NULL) */
        TC_NECESIDADESESPECIALES.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_NECESIDADESESPECIALES,:%Old," = ",",") */
        TC_NECESIDADESESPECIALES.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TW_DATOSESTADISTICOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATEST_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_DATOSESTADISTICOS,:%Old," = "," AND") */
        TW_DATOSESTADISTICOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TW_DATOSESTADISTICOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_NIVELFALTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVFAL_TC_NIVFALED_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELFALTA
      WHERE
        /*  %JoinFKPK(TC_NIVELFALTA,:%Old," = "," AND") */
        TC_NIVELFALTA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_NIVELFALTA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_REGLAPLANTILLA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_REGLAPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_REGPLAN_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_REGLAPLANTILLA
      WHERE
        /*  %JoinFKPK(TC_REGLAPLANTILLA,:%Old," = "," AND") */
        TC_REGLAPLANTILLA.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_REGLAPLANTILLA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_RUTAREPORTE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_RUTAREPORTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_RUTAREP_TC_NIVED_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_RUTAREPORTE
      WHERE
        /*  %JoinFKPK(TC_RUTAREPORTE,:%Old," = "," AND") */
        TC_RUTAREPORTE.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_RUTAREPORTE exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_CONSULTA_REPORTES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_CONSULTA_REPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CONSULTA_REPORTES_TC_N_FK1", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CONSULTA_REPORTES
      SET
        /* %SetFK(TC_CONSULTA_REPORTES,NULL) */
        TC_CONSULTA_REPORTES.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_CONSULTA_REPORTES,:%Old," = ",",") */
        TC_CONSULTA_REPORTES.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TW_ALUMNOPROMEDIOSNIVEL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROMEDIOSNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOPROMEDIOSNIVEL_NVL", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROMEDIOSNIVEL
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROMEDIOSNIVEL,:%Old," = "," AND") */
        TW_ALUMNOPROMEDIOSNIVEL.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TW_ALUMNOPROMEDIOSNIVEL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TC_GRADOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_GRADOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_GRADESC_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_GRADOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_GRADOESCOLAR,:%Old," = "," AND") */
        TC_GRADOESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TC_GRADOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_ZONAESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_ZONAESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tc_zonaescolar_TcnivelE", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ZONAESCOLAR
      SET
        /* %SetFK(TC_ZONAESCOLAR,NULL) */
        TC_ZONAESCOLAR.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_ZONAESCOLAR,:%Old," = ",",") */
        TC_ZONAESCOLAR.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELEDUCATIVO  TW_FOLIOSASIGNADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="NIVEDU_FOLASIG", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDNIVELEDUCATIVO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELEDUCATIVO because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_MODALIDAD on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_MODALIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MODALIDAD_NIVELE", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MODALIDAD
      SET
        /* %SetFK(TC_MODALIDAD,NULL) */
        TC_MODALIDAD.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_MODALIDAD,:%Old," = ",",") */
        TC_MODALIDAD.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_PARAMETROVALOR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_PARAMETROVALOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PARAMVAL_TC_NIVED_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PARAMETROVALOR
      SET
        /* %SetFK(TC_PARAMETROVALOR,NULL) */
        TC_PARAMETROVALOR.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_PARAMETROVALOR,:%Old," = ",",") */
        TC_PARAMETROVALOR.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;

  /* TC_NIVELEDUCATIVO  TC_TIPOASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELEDUCATIVO"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOAS_TC_NIVEDU_FK", FK_COLUMNS="N_IDNIVELEDUCATIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_TIPOASIGNATURA
      SET
        /* %SetFK(TC_TIPOASIGNATURA,NULL) */
        TC_TIPOASIGNATURA.N_IDNIVELEDUCATIVO = NULL
      WHERE
        /* %JoinFKPK(TC_TIPOASIGNATURA,:%Old," = ",",") */
        TC_TIPOASIGNATURA.N_IDNIVELEDUCATIVO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NIVELESTUDIO AFTER DELETE ON TC_NIVELESTUDIO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NIVELESTUDIO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NIVELESTUDIO  TW_HISTORIAACADEMICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010b49", PARENT_OWNER="", PARENT_TABLE="TC_NIVELESTUDIO"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_NIVELESTUDIO_FK", FK_COLUMNS="N_IDNIVELESTUDIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_HISTORIAACADEMICA
      WHERE
        /*  %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = "," AND") */
        TW_HISTORIAACADEMICA.N_IDNIVELESTUDIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELESTUDIO because TW_HISTORIAACADEMICA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NIVELESTUDIO AFTER UPDATE ON TC_NIVELESTUDIO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NIVELESTUDIO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_NIVELESTUDIO  TW_HISTORIAACADEMICA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010afe", PARENT_OWNER="", PARENT_TABLE="TC_NIVELESTUDIO"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_NIVELESTUDIO_FK", FK_COLUMNS="N_IDNIVELESTUDIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_HISTORIAACADEMICA
      SET
        /* %SetFK(TW_HISTORIAACADEMICA,NULL) */
        TW_HISTORIAACADEMICA.N_IDNIVELESTUDIO = NULL
      WHERE
        /* %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = ",",") */
        TW_HISTORIAACADEMICA.N_IDNIVELESTUDIO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NIVELFALTA AFTER DELETE ON TC_NIVELFALTA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NIVELFALTA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NIVELFALTA  TC_NIVELMEDIDA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00020729", PARENT_OWNER="", PARENT_TABLE="TC_NIVELFALTA"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVMEDI_TC_NIVFAL_FK", FK_COLUMNS="N_IDNIVELFALTA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELMEDIDA
      WHERE
        /*  %JoinFKPK(TC_NIVELMEDIDA,:%Old," = "," AND") */
        TC_NIVELMEDIDA.N_IDNIVELFALTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELFALTA because TC_NIVELMEDIDA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_NIVELFALTA  TC_FALTACONDUCTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELFALTA"
    CHILD_OWNER="", CHILD_TABLE="TC_FALTACONDUCTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FALTACOND_TC_NIVFAL_FK", FK_COLUMNS="N_IDNIVELFALTA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_FALTACONDUCTA
      WHERE
        /*  %JoinFKPK(TC_FALTACONDUCTA,:%Old," = "," AND") */
        TC_FALTACONDUCTA.N_IDNIVELFALTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELFALTA because TC_FALTACONDUCTA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NIVELFALTA AFTER UPDATE ON TC_NIVELFALTA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NIVELFALTA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_NIVELFALTA  TC_NIVELMEDIDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024c5f", PARENT_OWNER="", PARENT_TABLE="TC_NIVELFALTA"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVMEDI_TC_NIVFAL_FK", FK_COLUMNS="N_IDNIVELFALTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELMEDIDA
      WHERE
        /*  %JoinFKPK(TC_NIVELMEDIDA,:%Old," = "," AND") */
        TC_NIVELMEDIDA.N_IDNIVELFALTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELFALTA because TC_NIVELMEDIDA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_NIVELFALTA  TC_FALTACONDUCTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_NIVELFALTA"
    CHILD_OWNER="", CHILD_TABLE="TC_FALTACONDUCTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_FALTACOND_TC_NIVFAL_FK", FK_COLUMNS="N_IDNIVELFALTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_FALTACONDUCTA
      WHERE
        /*  %JoinFKPK(TC_FALTACONDUCTA,:%Old," = "," AND") */
        TC_FALTACONDUCTA.N_IDNIVELFALTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELFALTA because TC_FALTACONDUCTA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NIVELFALTATIPO AFTER DELETE ON TC_NIVELFALTATIPO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NIVELFALTATIPO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NIVELFALTATIPO  TC_NIVELFALTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f9f4", PARENT_OWNER="", PARENT_TABLE="TC_NIVELFALTATIPO"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVFAL_TC_NIVFALTIP_FK", FK_COLUMNS="N_IDNIVELFALTATIPO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELFALTA
      WHERE
        /*  %JoinFKPK(TC_NIVELFALTA,:%Old," = "," AND") */
        TC_NIVELFALTA.N_IDNIVELFALTATIPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELFALTATIPO because TC_NIVELFALTA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NIVELFALTATIPO AFTER UPDATE ON TC_NIVELFALTATIPO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NIVELFALTATIPO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_NIVELFALTATIPO  TC_NIVELFALTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001207c", PARENT_OWNER="", PARENT_TABLE="TC_NIVELFALTATIPO"
    CHILD_OWNER="", CHILD_TABLE="TC_NIVELFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_NIVFAL_TC_NIVFALTIP_FK", FK_COLUMNS="N_IDNIVELFALTATIPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_NIVELFALTA
      WHERE
        /*  %JoinFKPK(TC_NIVELFALTA,:%Old," = "," AND") */
        TC_NIVELFALTA.N_IDNIVELFALTATIPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELFALTATIPO because TC_NIVELFALTA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NIVELMEDIDA AFTER DELETE ON TC_NIVELMEDIDA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NIVELMEDIDA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NIVELMEDIDA  TW_ALUMNOINCIDENCIAMEDIDA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011999", PARENT_OWNER="", PARENT_TABLE="TC_NIVELMEDIDA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCMED_TC_NIVMEDIDA_FK", FK_COLUMNS="N_IDNIVELMEDIDA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAMEDIDA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAMEDIDA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAMEDIDA.N_IDNIVELMEDIDA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELMEDIDA because TW_ALUMNOINCIDENCIAMEDIDA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NIVELMEDIDA AFTER UPDATE ON TC_NIVELMEDIDA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NIVELMEDIDA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_NIVELMEDIDA  TW_ALUMNOINCIDENCIAMEDIDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000134a6", PARENT_OWNER="", PARENT_TABLE="TC_NIVELMEDIDA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCMED_TC_NIVMEDIDA_FK", FK_COLUMNS="N_IDNIVELMEDIDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAMEDIDA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAMEDIDA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAMEDIDA.N_IDNIVELMEDIDA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_NIVELMEDIDA because TW_ALUMNOINCIDENCIAMEDIDA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_NIVELNUTRICION AFTER DELETE ON TC_NIVELNUTRICION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_NIVELNUTRICION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_NIVELNUTRICION  TC_ALUMNOCOMPLEMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000112d1", PARENT_OWNER="", PARENT_TABLE="TC_NIVELNUTRICION"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_NIVNUT_FK", FK_COLUMNS="N_IDNIVELNUTRICION" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDNIVELNUTRICION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_NIVELNUTRICION because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_NIVELNUTRICION AFTER UPDATE ON TC_NIVELNUTRICION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_NIVELNUTRICION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_NIVELNUTRICION  TC_ALUMNOCOMPLEMENTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010ece", PARENT_OWNER="", PARENT_TABLE="TC_NIVELNUTRICION"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_NIVNUT_FK", FK_COLUMNS="N_IDNIVELNUTRICION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNOCOMPLEMENTO
      SET
        /* %SetFK(TC_ALUMNOCOMPLEMENTO,NULL) */
        TC_ALUMNOCOMPLEMENTO.N_IDNIVELNUTRICION = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = ",",") */
        TC_ALUMNOCOMPLEMENTO.N_IDNIVELNUTRICION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_OCUPACION AFTER DELETE ON TC_OCUPACION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_OCUPACION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_OCUPACION  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010819", PARENT_OWNER="", PARENT_TABLE="TC_OCUPACION"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_OCUPA_FK", FK_COLUMNS="N_IDOCUPACION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDOCUPACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_OCUPACION because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_OCUPACION AFTER UPDATE ON TC_OCUPACION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_OCUPACION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_OCUPACION  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012667", PARENT_OWNER="", PARENT_TABLE="TC_OCUPACION"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_OCUPA_FK", FK_COLUMNS="N_IDOCUPACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDOCUPACION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_OCUPACION because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_OCUPACIONINMUEBLE AFTER DELETE ON TC_OCUPACIONINMUEBLE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_OCUPACIONINMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_OCUPACIONINMUEBLE  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f5eb", PARENT_OWNER="", PARENT_TABLE="TC_OCUPACIONINMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_OCUP_FK", FK_COLUMNS="N_IDOCUPACIONINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDOCUPACIONINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_OCUPACIONINMUEBLE because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_OCUPACIONINMUEBLE AFTER UPDATE ON TC_OCUPACIONINMUEBLE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_OCUPACIONINMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_OCUPACIONINMUEBLE  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000f7ca", PARENT_OWNER="", PARENT_TABLE="TC_OCUPACIONINMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_OCUP_FK", FK_COLUMNS="N_IDOCUPACIONINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDOCUPACIONINMUEBLE = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDOCUPACIONINMUEBLE = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ORIGENPERSONA AFTER DELETE ON TC_ORIGENPERSONA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ORIGENPERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ORIGENPERSONA  TC_PERSONAL on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000ca0f", PARENT_OWNER="", PARENT_TABLE="TC_ORIGENPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ORIPER_FK", FK_COLUMNS="N_IDORIGENPERSONA" */
    UPDATE TC_PERSONAL
      SET
        /* %SetFK(TC_PERSONAL,NULL) */
        TC_PERSONAL.N_IDORIGENPERSONA = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDORIGENPERSONA = :old.N_ID;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ORIGENPERSONA AFTER UPDATE ON TC_ORIGENPERSONA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ORIGENPERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ORIGENPERSONA  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000110ca", PARENT_OWNER="", PARENT_TABLE="TC_ORIGENPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_ORIPER_FK", FK_COLUMNS="N_IDORIGENPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDORIGENPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ORIGENPERSONA because TC_PERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ORIGENREGISTRO AFTER DELETE ON TC_ORIGENREGISTRO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ORIGENREGISTRO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ORIGENREGISTRO  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f09f", PARENT_OWNER="", PARENT_TABLE="TC_ORIGENREGISTRO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ORIGENREGISTRO_FK", FK_COLUMNS="N_IDORIGENREGISTRO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDORIGENREGISTRO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ORIGENREGISTRO because TC_ALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ORIGENREGISTRO AFTER UPDATE ON TC_ORIGENREGISTRO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ORIGENREGISTRO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_ORIGENREGISTRO  TC_ALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000f762", PARENT_OWNER="", PARENT_TABLE="TC_ORIGENREGISTRO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_ORIGENREGISTRO_FK", FK_COLUMNS="N_IDORIGENREGISTRO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNO
      SET
        /* %SetFK(TC_ALUMNO,NULL) */
        TC_ALUMNO.N_IDORIGENREGISTRO = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNO,:%Old," = ",",") */
        TC_ALUMNO.N_IDORIGENREGISTRO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PAIS AFTER DELETE ON TC_PAIS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PAIS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PAIS  TC_ENTIDADESFEDERATIVAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001e636", PARENT_OWNER="", PARENT_TABLE="TC_PAIS"
    CHILD_OWNER="", CHILD_TABLE="TC_ENTIDADESFEDERATIVAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ENTIDADESFEDERAT_TC_PAIS_FK", FK_COLUMNS="N_IDPAIS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ENTIDADESFEDERATIVAS
      WHERE
        /*  %JoinFKPK(TC_ENTIDADESFEDERATIVAS,:%Old," = "," AND") */
        TC_ENTIDADESFEDERATIVAS.N_IDPAIS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PAIS because TC_ENTIDADESFEDERATIVAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PAIS  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PAIS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_PAIS_FK", FK_COLUMNS="N_IDPAIS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDPAIS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PAIS because TC_ALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PAIS AFTER UPDATE ON TC_PAIS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PAIS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PAIS  TC_ENTIDADESFEDERATIVAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024668", PARENT_OWNER="", PARENT_TABLE="TC_PAIS"
    CHILD_OWNER="", CHILD_TABLE="TC_ENTIDADESFEDERATIVAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ENTIDADESFEDERAT_TC_PAIS_FK", FK_COLUMNS="N_IDPAIS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ENTIDADESFEDERATIVAS
      WHERE
        /*  %JoinFKPK(TC_ENTIDADESFEDERATIVAS,:%Old," = "," AND") */
        TC_ENTIDADESFEDERATIVAS.N_IDPAIS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PAIS because TC_ENTIDADESFEDERATIVAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PAIS  TC_ALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PAIS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_PAIS_FK", FK_COLUMNS="N_IDPAIS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDPAIS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PAIS because TC_ALUMNO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PARAMETRO AFTER DELETE ON TC_PARAMETRO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PARAMETRO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PARAMETRO  TC_PARAMETROVALOR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fc93", PARENT_OWNER="", PARENT_TABLE="TC_PARAMETRO"
    CHILD_OWNER="", CHILD_TABLE="TC_PARAMETROVALOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PARAMVAL_TC_PARAM_FK", FK_COLUMNS="N_IDPARAMETRO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PARAMETROVALOR
      WHERE
        /*  %JoinFKPK(TC_PARAMETROVALOR,:%Old," = "," AND") */
        TC_PARAMETROVALOR.N_IDPARAMETRO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PARAMETRO because TC_PARAMETROVALOR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PARAMETRO AFTER UPDATE ON TC_PARAMETRO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PARAMETRO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PARAMETRO  TC_PARAMETROVALOR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000120fa", PARENT_OWNER="", PARENT_TABLE="TC_PARAMETRO"
    CHILD_OWNER="", CHILD_TABLE="TC_PARAMETROVALOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PARAMVAL_TC_PARAM_FK", FK_COLUMNS="N_IDPARAMETRO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PARAMETROVALOR
      WHERE
        /*  %JoinFKPK(TC_PARAMETROVALOR,:%Old," = "," AND") */
        TC_PARAMETROVALOR.N_IDPARAMETRO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PARAMETRO because TC_PARAMETROVALOR exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PARCELASESCOLARES AFTER DELETE ON TC_PARCELASESCOLARES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PARCELASESCOLARES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PARCELASESCOLARES  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fd1e", PARENT_OWNER="", PARENT_TABLE="TC_PARCELASESCOLARES"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_PARC_ESC_FK", FK_COLUMNS="N_IDPARCELASESCOLARES" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDPARCELASESCOLARES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PARCELASESCOLARES because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PARCELASESCOLARES AFTER UPDATE ON TC_PARCELASESCOLARES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PARCELASESCOLARES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_PARCELASESCOLARES  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000fc94", PARENT_OWNER="", PARENT_TABLE="TC_PARCELASESCOLARES"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_PARC_ESC_FK", FK_COLUMNS="N_IDPARCELASESCOLARES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDPARCELASESCOLARES = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDPARCELASESCOLARES = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PARENTESCO AFTER DELETE ON TC_PARENTESCO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PARENTESCO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PARENTESCO  TW_ALUMNOCONTACTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00033b91", PARENT_OWNER="", PARENT_TABLE="TC_PARENTESCO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_PARENT_FK", FK_COLUMNS="N_IDPARENTESCO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDPARENTESCO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PARENTESCO because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PARENTESCO  US_ALUMNOBAJA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PARENTESCO"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBAJA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ID_PARENTESCO_RESP", FK_COLUMNS="N_IDPARENTESCORESPONSABLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBAJA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBAJA,:%Old," = "," AND") */
        US_ALUMNOBAJA.N_IDPARENTESCORESPONSABLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PARENTESCO because US_ALUMNOBAJA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PARENTESCO  TW_USUARIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PARENTESCO"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_PARENTESCO_FK", FK_COLUMNS="N_IDPARENTESCO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDPARENTESCO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PARENTESCO because TW_USUARIODETALLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PARENTESCO AFTER UPDATE ON TC_PARENTESCO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PARENTESCO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PARENTESCO  TW_ALUMNOCONTACTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00036b2c", PARENT_OWNER="", PARENT_TABLE="TC_PARENTESCO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCON_TC_PARENT_FK", FK_COLUMNS="N_IDPARENTESCO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOS,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOS.N_IDPARENTESCO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PARENTESCO because TW_ALUMNOCONTACTOS exists.'
      );
    END IF;
  END IF;

  /* TC_PARENTESCO  US_ALUMNOBAJA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PARENTESCO"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBAJA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ID_PARENTESCO_RESP", FK_COLUMNS="N_IDPARENTESCORESPONSABLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_ALUMNOBAJA
      SET
        /* %SetFK(US_ALUMNOBAJA,NULL) */
        US_ALUMNOBAJA.N_IDPARENTESCORESPONSABLE = NULL
      WHERE
        /* %JoinFKPK(US_ALUMNOBAJA,:%Old," = ",",") */
        US_ALUMNOBAJA.N_IDPARENTESCORESPONSABLE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PARENTESCO  TW_USUARIODETALLE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PARENTESCO"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_PARENTESCO_FK", FK_COLUMNS="N_IDPARENTESCO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDPARENTESCO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PARENTESCO because TW_USUARIODETALLE exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PERSONAL AFTER DELETE ON TC_PERSONAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALHOJAMOVIMIENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00251476", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALHOJAMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSHOJMOV_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALHOJAMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_PERSONALHOJAMOVIMIENTOS,:%Old," = "," AND") */
        TW_PERSONALHOJAMOVIMIENTOS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALHOJAMOVIMIENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONAFALTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTAS
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTAS,:%Old," = "," AND") */
        TW_PERSONAFALTAS.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONAFALTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SC_COMENTARIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_COMENTARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PERSONA", FK_COLUMNS="N_PERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM SC_COMENTARIOS
      WHERE
        /*  %JoinFKPK(SC_COMENTARIOS,:%Old," = "," AND") */
        SC_COMENTARIOS.N_PERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SC_COMENTARIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SC_REPORTES_USUARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_REPORTES_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_D366D7F3_C728_4E", FK_COLUMNS="N_USUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SC_REPORTES_USUARIO
      WHERE
        /*  %JoinFKPK(SC_REPORTES_USUARIO,:%Old," = "," AND") */
        SC_REPORTES_USUARIO.N_USUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SC_REPORTES_USUARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SR_INTERVENCIONES_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_RESPONSABLE", FK_COLUMNS="N_RESPONSABLE" */
    SELECT count(*) INTO NUMROWS
      FROM SR_INTERVENCIONES_VISITAS
      WHERE
        /*  %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = "," AND") */
        SR_INTERVENCIONES_VISITAS.N_RESPONSABLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SR_INTERVENCIONES_VISITAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_INFORMACIONBANCARIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INFORMACIONBANCARIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INFOBANCARIA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INFORMACIONBANCARIA
      WHERE
        /*  %JoinFKPK(TW_INFORMACIONBANCARIA,:%Old," = "," AND") */
        TW_INFORMACIONBANCARIA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_INFORMACIONBANCARIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SW_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SUPERVISOR", FK_COLUMNS="N_SUPERVISOR" */
    SELECT count(*) INTO NUMROWS
      FROM SW_VISITAS
      WHERE
        /*  %JoinFKPK(SW_VISITAS,:%Old," = "," AND") */
        SW_VISITAS.N_SUPERVISOR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SW_VISITAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALCORREO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCORREO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERCOR_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALCORREO
      WHERE
        /*  %JoinFKPK(TW_PERSONALCORREO,:%Old," = "," AND") */
        TW_PERSONALCORREO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALCORREO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TR_PERSONALFUNCIONREALHIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREALHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PERSONAL5921", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREALHIS
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREALHIS,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREALHIS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TR_PERSONALFUNCIONREALHIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_REPORTE_ACTAHECHOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_REPORTE_ACTAHECHOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPACTA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPORTE_ACTAHECHOS
      WHERE
        /*  %JoinFKPK(TW_REPORTE_ACTAHECHOS,:%Old," = "," AND") */
        TW_REPORTE_ACTAHECHOS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_REPORTE_ACTAHECHOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TR_PERSONACANDIDATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONACANDIDATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PERSONAL573", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONACANDIDATO
      WHERE
        /*  %JoinFKPK(TR_PERSONACANDIDATO,:%Old," = "," AND") */
        TR_PERSONACANDIDATO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TR_PERSONACANDIDATO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SC_CONSEJOTECNICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOTECNICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_933D19EC_C18C_46", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM SC_CONSEJOTECNICO
      WHERE
        /*  %JoinFKPK(SC_CONSEJOTECNICO,:%Old," = "," AND") */
        SC_CONSEJOTECNICO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SC_CONSEJOTECNICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TC_UR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_UR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_UR_FK2", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_UR
      WHERE
        /*  %JoinFKPK(TC_UR,:%Old," = "," AND") */
        TC_UR.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TC_UR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SR_PROPOSITO_ACCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SR_PROPOSITO_ACCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROP_RESPONSABLE", FK_COLUMNS="N_ID_RESPONSABLE" */
    SELECT count(*) INTO NUMROWS
      FROM SR_PROPOSITO_ACCIONES
      WHERE
        /*  %JoinFKPK(SR_PROPOSITO_ACCIONES,:%Old," = "," AND") */
        SR_PROPOSITO_ACCIONES.N_ID_RESPONSABLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SR_PROPOSITO_ACCIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_HISTORIAACADEMICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_HISTORIAACADEMICA
      WHERE
        /*  %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = "," AND") */
        TW_HISTORIAACADEMICA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_HISTORIAACADEMICA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONANECESIDADESESPECIAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONANECESIDADESESPECIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERNECESP_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONANECESIDADESESPECIAL
      WHERE
        /*  %JoinFKPK(TW_PERSONANECESIDADESESPECIAL,:%Old," = "," AND") */
        TW_PERSONANECESIDADESESPECIAL.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONANECESIDADESESPECIAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TC_PERSONAREEMPLAZO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM__TC_PERSONA_FK", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_PERSON_FK", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALINCAPICIDAD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALINCAPICIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERINC_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALINCAPICIDAD
      WHERE
        /*  %JoinFKPK(TW_PERSONALINCAPICIDAD,:%Old," = "," AND") */
        TW_PERSONALINCAPICIDAD.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALINCAPICIDAD exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALHOJAUNICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALHOJAUNICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSHOJUNIC_TC_PERS_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALHOJAUNICA
      WHERE
        /*  %JoinFKPK(TW_PERSONALHOJAUNICA,:%Old," = "," AND") */
        TW_PERSONALHOJAUNICA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALHOJAUNICA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALTELEFONOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALTELEFONOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PER_TEL_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALTELEFONOS
      WHERE
        /*  %JoinFKPK(TW_PERSONALTELEFONOS,:%Old," = "," AND") */
        TW_PERSONALTELEFONOS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALTELEFONOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TR_PERSONALFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PERSONAL5901", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREAL,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREAL.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TR_PERSONALFUNCIONREAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALDIALECTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALDIALECTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERDIA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALDIALECTO
      WHERE
        /*  %JoinFKPK(TW_PERSONALDIALECTO,:%Old," = "," AND") */
        TW_PERSONALDIALECTO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALDIALECTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_IDIOMAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_IDIOMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_IDIOMAS_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_IDIOMAS
      WHERE
        /*  %JoinFKPK(TW_IDIOMAS,:%Old," = "," AND") */
        TW_IDIOMAS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_IDIOMAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  SC_ASISTENTESCONSEJO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_ASISTENTESCONSEJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_91D94054_AE4F_49", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM SC_ASISTENTESCONSEJO
      WHERE
        /*  %JoinFKPK(SC_ASISTENTESCONSEJO,:%Old," = "," AND") */
        SC_ASISTENTESCONSEJO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because SC_ASISTENTESCONSEJO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONAESPECIALIZACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAESPECIALIZACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERESP_TC_PERSONA_FK", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAESPECIALIZACION
      WHERE
        /*  %JoinFKPK(TW_PERSONAESPECIALIZACION,:%Old," = "," AND") */
        TW_PERSONAESPECIALIZACION.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONAESPECIALIZACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_ESCUELAINCIDENCIAPER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAPER
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAPER.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_ESCUELAINCIDENCIAPER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TR_PLAZAASIGNADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAASI_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TR_PLAZAASIGNADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_REPORTESESPECIALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_REPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPESP_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_REPORTESESPECIALES,:%Old," = "," AND") */
        TW_REPORTESESPECIALES.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_REPORTESESPECIALES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_PERSON_FK", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALHOJAPERCEPCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALHOJAPERCEPCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSHOJPERCEP_TC_PERS_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALHOJAPERCEPCIONES
      WHERE
        /*  %JoinFKPK(TW_PERSONALHOJAPERCEPCIONES,:%Old," = "," AND") */
        TW_PERSONALHOJAPERCEPCIONES.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALHOJAPERCEPCIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_DOMICILIOPERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONAL  TW_PERSONALCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSONALCICLOESCOLAR__FK2", FK_COLUMNS="N_IDPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(TW_PERSONALCICLOESCOLAR,:%Old," = "," AND") */
        TW_PERSONALCICLOESCOLAR.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONAL because TW_PERSONALCICLOESCOLAR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PERSONAL AFTER UPDATE ON TC_PERSONAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALHOJAMOVIMIENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0026c8a4", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALHOJAMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSHOJMOV_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALHOJAMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_PERSONALHOJAMOVIMIENTOS,:%Old," = "," AND") */
        TW_PERSONALHOJAMOVIMIENTOS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALHOJAMOVIMIENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONAFALTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTAS
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTAS,:%Old," = "," AND") */
        TW_PERSONAFALTAS.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONAFALTAS exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  SC_COMENTARIOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_COMENTARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PERSONA", FK_COLUMNS="N_PERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_COMENTARIOS
      SET
        /* %SetFK(SC_COMENTARIOS,NULL) */
        SC_COMENTARIOS.N_PERSONA = NULL
      WHERE
        /* %JoinFKPK(SC_COMENTARIOS,:%Old," = ",",") */
        SC_COMENTARIOS.N_PERSONA = :old.N_ID;
  END IF;

  /* TC_PERSONAL  SC_REPORTES_USUARIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_REPORTES_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_D366D7F3_C728_4E", FK_COLUMNS="N_USUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_REPORTES_USUARIO
      SET
        /* %SetFK(SC_REPORTES_USUARIO,NULL) */
        SC_REPORTES_USUARIO.N_USUARIO = NULL
      WHERE
        /* %JoinFKPK(SC_REPORTES_USUARIO,:%Old," = ",",") */
        SC_REPORTES_USUARIO.N_USUARIO = :old.N_ID;
  END IF;

  /* TC_PERSONAL  SR_INTERVENCIONES_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SR_INTERVENCIONES_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_RESPONSABLE", FK_COLUMNS="N_RESPONSABLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SR_INTERVENCIONES_VISITAS
      SET
        /* %SetFK(SR_INTERVENCIONES_VISITAS,NULL) */
        SR_INTERVENCIONES_VISITAS.N_RESPONSABLE = NULL
      WHERE
        /* %JoinFKPK(SR_INTERVENCIONES_VISITAS,:%Old," = ",",") */
        SR_INTERVENCIONES_VISITAS.N_RESPONSABLE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_INFORMACIONBANCARIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INFORMACIONBANCARIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INFOBANCARIA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INFORMACIONBANCARIA
      WHERE
        /*  %JoinFKPK(TW_INFORMACIONBANCARIA,:%Old," = "," AND") */
        TW_INFORMACIONBANCARIA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_INFORMACIONBANCARIA exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  SW_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SUPERVISOR", FK_COLUMNS="N_SUPERVISOR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SW_VISITAS
      SET
        /* %SetFK(SW_VISITAS,NULL) */
        SW_VISITAS.N_SUPERVISOR = NULL
      WHERE
        /* %JoinFKPK(SW_VISITAS,:%Old," = ",",") */
        SW_VISITAS.N_SUPERVISOR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALCORREO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCORREO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERCOR_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALCORREO
      WHERE
        /*  %JoinFKPK(TW_PERSONALCORREO,:%Old," = "," AND") */
        TW_PERSONALCORREO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALCORREO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TR_PERSONALFUNCIONREALHIS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREALHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PERSONAL5921", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREALHIS
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREALHIS,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREALHIS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TR_PERSONALFUNCIONREALHIS exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  TW_REPORTE_ACTAHECHOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_REPORTE_ACTAHECHOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPACTA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_REPORTE_ACTAHECHOS
      SET
        /* %SetFK(TW_REPORTE_ACTAHECHOS,NULL) */
        TW_REPORTE_ACTAHECHOS.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TW_REPORTE_ACTAHECHOS,:%Old," = ",",") */
        TW_REPORTE_ACTAHECHOS.N_IDPERSONAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TR_PERSONACANDIDATO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONACANDIDATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PERSONAL573", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONACANDIDATO
      WHERE
        /*  %JoinFKPK(TR_PERSONACANDIDATO,:%Old," = "," AND") */
        TR_PERSONACANDIDATO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TR_PERSONACANDIDATO exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  SC_CONSEJOTECNICO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_CONSEJOTECNICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_933D19EC_C18C_46", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_CONSEJOTECNICO
      SET
        /* %SetFK(SC_CONSEJOTECNICO,NULL) */
        SC_CONSEJOTECNICO.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(SC_CONSEJOTECNICO,:%Old," = ",",") */
        SC_CONSEJOTECNICO.N_IDPERSONAL = :old.N_ID;
  END IF;

  /* TC_PERSONAL  TC_UR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_UR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_UR_FK2", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_UR
      SET
        /* %SetFK(TC_UR,NULL) */
        TC_UR.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TC_UR,:%Old," = ",",") */
        TC_UR.N_IDPERSONAL = :old.N_ID;
  END IF;

  /* TC_PERSONAL  SR_PROPOSITO_ACCIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SR_PROPOSITO_ACCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PROP_RESPONSABLE", FK_COLUMNS="N_ID_RESPONSABLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SR_PROPOSITO_ACCIONES
      SET
        /* %SetFK(SR_PROPOSITO_ACCIONES,NULL) */
        SR_PROPOSITO_ACCIONES.N_ID_RESPONSABLE = NULL
      WHERE
        /* %JoinFKPK(SR_PROPOSITO_ACCIONES,:%Old," = ",",") */
        SR_PROPOSITO_ACCIONES.N_ID_RESPONSABLE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_HISTORIAACADEMICA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_HISTORIAACADEMICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_HISACA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_HISTORIAACADEMICA
      WHERE
        /*  %JoinFKPK(TW_HISTORIAACADEMICA,:%Old," = "," AND") */
        TW_HISTORIAACADEMICA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_HISTORIAACADEMICA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONANECESIDADESESPECIAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONANECESIDADESESPECIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERNECESP_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONANECESIDADESESPECIAL
      WHERE
        /*  %JoinFKPK(TW_PERSONANECESIDADESESPECIAL,:%Old," = "," AND") */
        TW_PERSONANECESIDADESESPECIAL.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONANECESIDADESESPECIAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TC_PERSONAREEMPLAZO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM__TC_PERSONA_FK", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TR_INASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_PERSON_FK", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALINCAPICIDAD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALINCAPICIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERINC_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALINCAPICIDAD
      WHERE
        /*  %JoinFKPK(TW_PERSONALINCAPICIDAD,:%Old," = "," AND") */
        TW_PERSONALINCAPICIDAD.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALINCAPICIDAD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALHOJAUNICA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALHOJAUNICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSHOJUNIC_TC_PERS_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALHOJAUNICA
      WHERE
        /*  %JoinFKPK(TW_PERSONALHOJAUNICA,:%Old," = "," AND") */
        TW_PERSONALHOJAUNICA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALHOJAUNICA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALTELEFONOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALTELEFONOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PER_TEL_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALTELEFONOS
      WHERE
        /*  %JoinFKPK(TW_PERSONALTELEFONOS,:%Old," = "," AND") */
        TW_PERSONALTELEFONOS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALTELEFONOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TR_PERSONALFUNCIONREAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PERSONAL5901", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TR_PERSONALFUNCIONREAL,:%Old," = "," AND") */
        TR_PERSONALFUNCIONREAL.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TR_PERSONALFUNCIONREAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALDIALECTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALDIALECTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERDIA_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALDIALECTO
      WHERE
        /*  %JoinFKPK(TW_PERSONALDIALECTO,:%Old," = "," AND") */
        TW_PERSONALDIALECTO.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALDIALECTO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_IDIOMAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_IDIOMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_IDIOMAS_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_IDIOMAS
      WHERE
        /*  %JoinFKPK(TW_IDIOMAS,:%Old," = "," AND") */
        TW_IDIOMAS.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_IDIOMAS exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  SC_ASISTENTESCONSEJO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SC_ASISTENTESCONSEJO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_91D94054_AE4F_49", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SC_ASISTENTESCONSEJO
      SET
        /* %SetFK(SC_ASISTENTESCONSEJO,NULL) */
        SC_ASISTENTESCONSEJO.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(SC_ASISTENTESCONSEJO,:%Old," = ",",") */
        SC_ASISTENTESCONSEJO.N_IDPERSONAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONAESPECIALIZACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAESPECIALIZACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERESP_TC_PERSONA_FK", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAESPECIALIZACION
      WHERE
        /*  %JoinFKPK(TW_PERSONAESPECIALIZACION,:%Old," = "," AND") */
        TW_PERSONAESPECIALIZACION.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONAESPECIALIZACION exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  TW_ESCUELAINCIDENCIAPER on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ESCUELAINCIDENCIAPER
      SET
        /* %SetFK(TW_ESCUELAINCIDENCIAPER,NULL) */
        TW_ESCUELAINCIDENCIAPER.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = ",",") */
        TW_ESCUELAINCIDENCIAPER.N_IDPERSONAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TR_PLAZAASIGNADA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAASI_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TR_PLAZAASIGNADA exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  TW_REPORTESESPECIALES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_REPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPESP_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_REPORTESESPECIALES
      SET
        /* %SetFK(TW_REPORTESESPECIALES,NULL) */
        TW_REPORTESESPECIALES.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TW_REPORTESESPECIALES,:%Old," = ",",") */
        TW_REPORTESESPECIALES.N_IDPERSONAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TR_MOVPLAZAPERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPER_TC_PERSON_FK", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_PERSONALHOJAPERCEPCIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALHOJAPERCEPCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSHOJPERCEP_TC_PERS_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALHOJAPERCEPCIONES
      WHERE
        /*  %JoinFKPK(TW_PERSONALHOJAPERCEPCIONES,:%Old," = "," AND") */
        TW_PERSONALHOJAPERCEPCIONES.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_PERSONALHOJAPERCEPCIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONAL  TW_DOMICILIOPERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_DOMICILIOPERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DOMPER_TC_PERSONAL_FK", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DOMICILIOPERSONAL
      WHERE
        /*  %JoinFKPK(TW_DOMICILIOPERSONAL,:%Old," = "," AND") */
        TW_DOMICILIOPERSONAL.N_IDPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONAL because TW_DOMICILIOPERSONAL exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONAL  TW_PERSONALCICLOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERSONALCICLOESCOLAR__FK2", FK_COLUMNS="N_IDPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONALCICLOESCOLAR
      SET
        /* %SetFK(TW_PERSONALCICLOESCOLAR,NULL) */
        TW_PERSONALCICLOESCOLAR.N_IDPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONALCICLOESCOLAR,:%Old," = ",",") */
        TW_PERSONALCICLOESCOLAR.N_IDPERSONAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PERSONALPLAZA AFTER DELETE ON TC_PERSONALPLAZA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PERSONALPLAZA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  US_GRUPOTALLER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000cc8a3", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_GRUPOTALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOTALLER_PERSONALPLA_FK", FK_COLUMNS="N_IDPERSONALPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM US_GRUPOTALLER
      WHERE
        /*  %JoinFKPK(US_GRUPOTALLER,:%Old," = "," AND") */
        US_GRUPOTALLER.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because US_GRUPOTALLER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  US_DISPONIBILIDADDOCENTE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_DISPONIBILIDADDOCENTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERSONALPLAZA_DISPDOCENTE", FK_COLUMNS="N_IDPERSONALPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM US_DISPONIBILIDADDOCENTE
      WHERE
        /*  %JoinFKPK(US_DISPONIBILIDADDOCENTE,:%Old," = "," AND") */
        US_DISPONIBILIDADDOCENTE.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because US_DISPONIBILIDADDOCENTE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TC_PERSONALPLAZAESCUELAHIST on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELAHIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAESH_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELAHIST
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELAHIST,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELAHIST.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TC_PERSONALPLAZAESCUELAHIST exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TW_BITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDPPLAZA_FK", FK_COLUMNS="N_IDPERSONALPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_BITACORA
      WHERE
        /*  %JoinFKPK(TW_BITACORA,:%Old," = "," AND") */
        TW_BITACORA.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TW_BITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TR_PERSONALGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERGRU_TC_PERPLA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALGRUPO
      WHERE
        /*  %JoinFKPK(TR_PERSONALGRUPO,:%Old," = "," AND") */
        TR_PERSONALGRUPO.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TR_PERSONALGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TW_PLANTILLAAUTORIZADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_PERPLA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PLANTILLAAUTORIZADA
      WHERE
        /*  %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = "," AND") */
        TW_PLANTILLAAUTORIZADA.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TW_PLANTILLAAUTORIZADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TC_PERSONALPLAZAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = "," AND") */
        TC_PERSONALPLAZAHISTORICO.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TC_PERSONALPLAZAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  US_HORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERPLAZA_HORARIO", FK_COLUMNS="N_IDPERSONALPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIO
      WHERE
        /*  %JoinFKPK(US_HORARIO,:%Old," = "," AND") */
        US_HORARIO.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because US_HORARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TC_PERSONAREEMPLAZO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  TC_PERSONALPLAZAESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAES_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELA,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELA.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because TC_PERSONALPLAZAESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZA  US_PERSONALASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_PERSONALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERPLAZA_PERASIG", FK_COLUMNS="N_IDPERSONALPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM US_PERSONALASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PERSONALASIGNATURA,:%Old," = "," AND") */
        US_PERSONALASIGNATURA.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZA because US_PERSONALASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PERSONALPLAZA AFTER UPDATE ON TC_PERSONALPLAZA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PERSONALPLAZA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZA  US_GRUPOTALLER on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000d47b6", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_GRUPOTALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOTALLER_PERSONALPLA_FK", FK_COLUMNS="N_IDPERSONALPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_GRUPOTALLER
      WHERE
        /*  %JoinFKPK(US_GRUPOTALLER,:%Old," = "," AND") */
        US_GRUPOTALLER.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZA because US_GRUPOTALLER exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZA  US_DISPONIBILIDADDOCENTE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_DISPONIBILIDADDOCENTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERSONALPLAZA_DISPDOCENTE", FK_COLUMNS="N_IDPERSONALPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_DISPONIBILIDADDOCENTE
      WHERE
        /*  %JoinFKPK(US_DISPONIBILIDADDOCENTE,:%Old," = "," AND") */
        US_DISPONIBILIDADDOCENTE.N_IDPERSONALPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZA because US_DISPONIBILIDADDOCENTE exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONALPLAZA  TC_PERSONALPLAZAESCUELAHIST on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELAHIST"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAESH_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONALPLAZAESCUELAHIST
      SET
        /* %SetFK(TC_PERSONALPLAZAESCUELAHIST,NULL) */
        TC_PERSONALPLAZAESCUELAHIST.N_IDPERSONAPLAZA = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONALPLAZAESCUELAHIST,:%Old," = ",",") */
        TC_PERSONALPLAZAESCUELAHIST.N_IDPERSONAPLAZA = :old.N_ID;
  END IF;

  /* TC_PERSONALPLAZA  TW_BITACORA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDPPLAZA_FK", FK_COLUMNS="N_IDPERSONALPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_BITACORA
      SET
        /* %SetFK(TW_BITACORA,NULL) */
        TW_BITACORA.N_IDPERSONALPLAZA = NULL
      WHERE
        /* %JoinFKPK(TW_BITACORA,:%Old," = ",",") */
        TW_BITACORA.N_IDPERSONALPLAZA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZA  TR_PERSONALGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONALGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERGRU_TC_PERPLA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONALGRUPO
      WHERE
        /*  %JoinFKPK(TR_PERSONALGRUPO,:%Old," = "," AND") */
        TR_PERSONALGRUPO.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZA because TR_PERSONALGRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONALPLAZA  TW_PLANTILLAAUTORIZADA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_PERPLA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PLANTILLAAUTORIZADA
      SET
        /* %SetFK(TW_PLANTILLAAUTORIZADA,NULL) */
        TW_PLANTILLAAUTORIZADA.N_IDPERSONAPLAZA = NULL
      WHERE
        /* %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = ",",") */
        TW_PLANTILLAAUTORIZADA.N_IDPERSONAPLAZA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZA  TC_PERSONALPLAZAHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAH_TC_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAHISTORICO,:%Old," = "," AND") */
        TC_PERSONALPLAZAHISTORICO.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZA because TC_PERSONALPLAZAHISTORICO exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONALPLAZA  US_HORARIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERPLAZA_HORARIO", FK_COLUMNS="N_IDPERSONALPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_HORARIO
      SET
        /* %SetFK(US_HORARIO,NULL) */
        US_HORARIO.N_IDPERSONALPLAZA = NULL
      WHERE
        /* %JoinFKPK(US_HORARIO,:%Old," = ",",") */
        US_HORARIO.N_IDPERSONALPLAZA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZA  TC_PERSONAREEMPLAZO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZA because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZA  TC_PERSONALPLAZAESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAES_TC_PERPZA_FK", FK_COLUMNS="N_IDPERSONAPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELA,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELA.N_IDPERSONAPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZA because TC_PERSONALPLAZAESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONALPLAZA  US_PERSONALASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZA"
    CHILD_OWNER="", CHILD_TABLE="US_PERSONALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERPLAZA_PERASIG", FK_COLUMNS="N_IDPERSONALPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_PERSONALASIGNATURA
      SET
        /* %SetFK(US_PERSONALASIGNATURA,NULL) */
        US_PERSONALASIGNATURA.N_IDPERSONALPLAZA = NULL
      WHERE
        /* %JoinFKPK(US_PERSONALASIGNATURA,:%Old," = ",",") */
        US_PERSONALASIGNATURA.N_IDPERSONALPLAZA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PERSONALPLAZAESCUELA AFTER DELETE ON TC_PERSONALPLAZAESCUELA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PERSONALPLAZAESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZAESCUELA  TW_DIASHORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000349a1", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_DIASHORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DIASHORA_TC_PERPLAESC_FK", FK_COLUMNS="N_IDPERSONAPLAZAESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DIASHORA
      WHERE
        /*  %JoinFKPK(TW_DIASHORA,:%Old," = "," AND") */
        TW_DIASHORA.N_IDPERSONAPLAZAESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZAESCUELA because TW_DIASHORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZAESCUELA  TR_MOVPLAPERASIG on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAPERASIG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVPLAPERASIG_PPE", FK_COLUMNS="N_IDPERSONAPLAZAESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAPERASIG
      WHERE
        /*  %JoinFKPK(TR_MOVPLAPERASIG,:%Old," = "," AND") */
        TR_MOVPLAPERASIG.N_IDPERSONAPLAZAESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PERSONALPLAZAESCUELA because TR_MOVPLAPERASIG exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PERSONALPLAZAESCUELA  TR_MOVPLAZAPERSONADET on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_PERPZAES_FK", FK_COLUMNS="N_IDPERSONALPLAZAESCUELA" */
    UPDATE TR_MOVPLAZAPERSONADET
      SET
        /* %SetFK(TR_MOVPLAZAPERSONADET,NULL) */
        TR_MOVPLAZAPERSONADET.N_IDPERSONALPLAZAESCUELA = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONADET.N_IDPERSONALPLAZAESCUELA = :old.N_ID;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PERSONALPLAZAESCUELA AFTER UPDATE ON TC_PERSONALPLAZAESCUELA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PERSONALPLAZAESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PERSONALPLAZAESCUELA  TW_DIASHORA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00037681", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TW_DIASHORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DIASHORA_TC_PERPLAESC_FK", FK_COLUMNS="N_IDPERSONAPLAZAESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DIASHORA
      WHERE
        /*  %JoinFKPK(TW_DIASHORA,:%Old," = "," AND") */
        TW_DIASHORA.N_IDPERSONAPLAZAESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PERSONALPLAZAESCUELA because TW_DIASHORA exists.'
      );
    END IF;
  END IF;

  /* TC_PERSONALPLAZAESCUELA  TR_MOVPLAPERASIG on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAPERASIG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVPLAPERASIG_PPE", FK_COLUMNS="N_IDPERSONAPLAZAESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAPERASIG
      SET
        /* %SetFK(TR_MOVPLAPERASIG,NULL) */
        TR_MOVPLAPERASIG.N_IDPERSONAPLAZAESCUELA = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAPERASIG,:%Old," = ",",") */
        TR_MOVPLAPERASIG.N_IDPERSONAPLAZAESCUELA = :old.N_ID;
  END IF;

  /* TC_PERSONALPLAZAESCUELA  TR_MOVPLAZAPERSONADET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PERSONALPLAZAESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_PERPZAES_FK", FK_COLUMNS="N_IDPERSONALPLAZAESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAZAPERSONADET
      SET
        /* %SetFK(TR_MOVPLAZAPERSONADET,NULL) */
        TR_MOVPLAZAPERSONADET.N_IDPERSONALPLAZAESCUELA = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = ",",") */
        TR_MOVPLAZAPERSONADET.N_IDPERSONALPLAZAESCUELA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PLANDEESTUDIOSASIGNATURA AFTER DELETE ON TC_PLANDEESTUDIOSASIGNATURA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PLANDEESTUDIOSASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PLANDEESTUDIOSASIGNATURA  TR_PERSONAHORARIOHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00079506", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIOHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHORHIS_TC_PLAESTAS_FK", FK_COLUMNS="N_IDPLANESTUDIOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIOHISTORICO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIOHISTORICO,:%Old," = "," AND") */
        TR_PERSONAHORARIOHISTORICO.N_IDPLANESTUDIOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANDEESTUDIOSASIGNATURA because TR_PERSONAHORARIOHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANDEESTUDIOSASIGNATURA  TR_PERSONAHORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHOR_TC_PLAESAS_FK", FK_COLUMNS="N_IDPLANESTUDIOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIO,:%Old," = "," AND") */
        TR_PERSONAHORARIO.N_IDPLANESTUDIOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANDEESTUDIOSASIGNATURA because TR_PERSONAHORARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANDEESTUDIOSASIGNATURA  TW_ALUMNOLIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOLIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALULIBROS_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOLIBROS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOLIBROS,:%Old," = "," AND") */
        TW_ALUMNOLIBROS.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANDEESTUDIOSASIGNATURA because TW_ALUMNOLIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANDEESTUDIOSASIGNATURA  TW_ALUMNOASIGNATURAPROMEDIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNATURAPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIPRO_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNATURAPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNATURAPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOASIGNATURAPROMEDIO.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANDEESTUDIOSASIGNATURA because TW_ALUMNOASIGNATURAPROMEDIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANDEESTUDIOSASIGNATURA  TW_ALUMNOCALIFICACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAL_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCALIFICACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCALIFICACIONES,:%Old," = "," AND") */
        TW_ALUMNOCALIFICACIONES.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANDEESTUDIOSASIGNATURA because TW_ALUMNOCALIFICACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANDEESTUDIOSASIGNATURA  TW_ASIGNATURALIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ASIGNATURALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ASIGLIBROS_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ASIGNATURALIBROS
      WHERE
        /*  %JoinFKPK(TW_ASIGNATURALIBROS,:%Old," = "," AND") */
        TW_ASIGNATURALIBROS.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANDEESTUDIOSASIGNATURA because TW_ASIGNATURALIBROS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PLANDEESTUDIOSASIGNATURA AFTER UPDATE ON TC_PLANDEESTUDIOSASIGNATURA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PLANDEESTUDIOSASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PLANDEESTUDIOSASIGNATURA  TR_PERSONAHORARIOHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00085f11", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIOHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHORHIS_TC_PLAESTAS_FK", FK_COLUMNS="N_IDPLANESTUDIOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIOHISTORICO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIOHISTORICO,:%Old," = "," AND") */
        TR_PERSONAHORARIOHISTORICO.N_IDPLANESTUDIOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANDEESTUDIOSASIGNATURA because TR_PERSONAHORARIOHISTORICO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PLANDEESTUDIOSASIGNATURA  TR_PERSONAHORARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHOR_TC_PLAESAS_FK", FK_COLUMNS="N_IDPLANESTUDIOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIO,:%Old," = "," AND") */
        TR_PERSONAHORARIO.N_IDPLANESTUDIOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANDEESTUDIOSASIGNATURA because TR_PERSONAHORARIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PLANDEESTUDIOSASIGNATURA  TW_ALUMNOLIBROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOLIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALULIBROS_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOLIBROS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOLIBROS,:%Old," = "," AND") */
        TW_ALUMNOLIBROS.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANDEESTUDIOSASIGNATURA because TW_ALUMNOLIBROS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PLANDEESTUDIOSASIGNATURA  TW_ALUMNOASIGNATURAPROMEDIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNATURAPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIPRO_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNATURAPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNATURAPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOASIGNATURAPROMEDIO.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANDEESTUDIOSASIGNATURA because TW_ALUMNOASIGNATURAPROMEDIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PLANDEESTUDIOSASIGNATURA  TW_ALUMNOCALIFICACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAL_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCALIFICACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCALIFICACIONES,:%Old," = "," AND") */
        TW_ALUMNOCALIFICACIONES.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANDEESTUDIOSASIGNATURA because TW_ALUMNOCALIFICACIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PLANDEESTUDIOSASIGNATURA  TW_ASIGNATURALIBROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_ASIGNATURALIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ASIGLIBROS_TC_PLAESTASI_FK", FK_COLUMNS="N_IDPLANDEESTUDIOSASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ASIGNATURALIBROS
      WHERE
        /*  %JoinFKPK(TW_ASIGNATURALIBROS,:%Old," = "," AND") */
        TW_ASIGNATURALIBROS.N_IDPLANDEESTUDIOSASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANDEESTUDIOSASIGNATURA because TW_ASIGNATURALIBROS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PLANESTUDIOS AFTER DELETE ON TC_PLANESTUDIOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PLANESTUDIOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PLANESTUDIOS  US_PLANESTUDIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00036af1", PARENT_OWNER="", PARENT_TABLE="TC_PLANESTUDIOS"
    CHILD_OWNER="", CHILD_TABLE="US_PLANESTUDIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANEST_PLANESTDET", FK_COLUMNS="N_IDPLANESTUDIOS" */
    SELECT count(*) INTO NUMROWS
      FROM US_PLANESTUDIODETALLE
      WHERE
        /*  %JoinFKPK(US_PLANESTUDIODETALLE,:%Old," = "," AND") */
        US_PLANESTUDIODETALLE.N_IDPLANESTUDIOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANESTUDIOS because US_PLANESTUDIODETALLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANESTUDIOS  US_INTEGRACIONGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANESTUDIOS"
    CHILD_OWNER="", CHILD_TABLE="US_INTEGRACIONGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANEST_INTEGRUPO", FK_COLUMNS="N_IDPLANESTUDIOS" */
    SELECT count(*) INTO NUMROWS
      FROM US_INTEGRACIONGRUPO
      WHERE
        /*  %JoinFKPK(US_INTEGRACIONGRUPO,:%Old," = "," AND") */
        US_INTEGRACIONGRUPO.N_IDPLANESTUDIOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANESTUDIOS because US_INTEGRACIONGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLANESTUDIOS  TC_PLANDEESTUDIOSASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANESTUDIOS"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTAS_TC_PLANEST_FK", FK_COLUMNS="N_IDPLANESTUDIOS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLANDEESTUDIOSASIGNATURA
      WHERE
        /*  %JoinFKPK(TC_PLANDEESTUDIOSASIGNATURA,:%Old," = "," AND") */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDPLANESTUDIOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLANESTUDIOS because TC_PLANDEESTUDIOSASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PLANESTUDIOS AFTER UPDATE ON TC_PLANESTUDIOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PLANESTUDIOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_PLANESTUDIOS  US_PLANESTUDIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00038509", PARENT_OWNER="", PARENT_TABLE="TC_PLANESTUDIOS"
    CHILD_OWNER="", CHILD_TABLE="US_PLANESTUDIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANEST_PLANESTDET", FK_COLUMNS="N_IDPLANESTUDIOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_PLANESTUDIODETALLE
      SET
        /* %SetFK(US_PLANESTUDIODETALLE,NULL) */
        US_PLANESTUDIODETALLE.N_IDPLANESTUDIOS = NULL
      WHERE
        /* %JoinFKPK(US_PLANESTUDIODETALLE,:%Old," = ",",") */
        US_PLANESTUDIODETALLE.N_IDPLANESTUDIOS = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PLANESTUDIOS  US_INTEGRACIONGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANESTUDIOS"
    CHILD_OWNER="", CHILD_TABLE="US_INTEGRACIONGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANEST_INTEGRUPO", FK_COLUMNS="N_IDPLANESTUDIOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INTEGRACIONGRUPO
      WHERE
        /*  %JoinFKPK(US_INTEGRACIONGRUPO,:%Old," = "," AND") */
        US_INTEGRACIONGRUPO.N_IDPLANESTUDIOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLANESTUDIOS because US_INTEGRACIONGRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_PLANESTUDIOS  TC_PLANDEESTUDIOSASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLANESTUDIOS"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTAS_TC_PLANEST_FK", FK_COLUMNS="N_IDPLANESTUDIOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PLANDEESTUDIOSASIGNATURA
      SET
        /* %SetFK(TC_PLANDEESTUDIOSASIGNATURA,NULL) */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDPLANESTUDIOS = NULL
      WHERE
        /* %JoinFKPK(TC_PLANDEESTUDIOSASIGNATURA,:%Old," = ",",") */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDPLANESTUDIOS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PLAZA AFTER DELETE ON TC_PLAZA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PLAZA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PLAZA  TR_PLAZAASIGNADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00033288", PARENT_OWNER="", PARENT_TABLE="TC_PLAZA"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAASI_TC_PLAZA_FK", FK_COLUMNS="N_IDPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_IDPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLAZA because TR_PLAZAASIGNADA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLAZA  TW_CALENDARIOFALTASDET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_PLAZA_FK", FK_COLUMNS="N_IDPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CALENDARIOFALTASDET
      WHERE
        /*  %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = "," AND") */
        TW_CALENDARIOFALTASDET.N_IDPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLAZA because TW_CALENDARIOFALTASDET exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PLAZA  TW_MOVPLAZAPERSONAPLAZAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_MOVPLAZAPERSONAPLAZAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_MOVPPPLAZAS_PLAZA", FK_COLUMNS="N_IDPLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_MOVPLAZAPERSONAPLAZAS
      WHERE
        /*  %JoinFKPK(TW_MOVPLAZAPERSONAPLAZAS,:%Old," = "," AND") */
        TW_MOVPLAZAPERSONAPLAZAS.N_IDPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PLAZA because TW_MOVPLAZAPERSONAPLAZAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PLAZA AFTER UPDATE ON TC_PLAZA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PLAZA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PLAZA  TR_PLAZAASIGNADA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00033ffe", PARENT_OWNER="", PARENT_TABLE="TC_PLAZA"
    CHILD_OWNER="", CHILD_TABLE="TR_PLAZAASIGNADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PLAASI_TC_PLAZA_FK", FK_COLUMNS="N_IDPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PLAZAASIGNADA
      WHERE
        /*  %JoinFKPK(TR_PLAZAASIGNADA,:%Old," = "," AND") */
        TR_PLAZAASIGNADA.N_IDPLAZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PLAZA because TR_PLAZAASIGNADA exists.'
      );
    END IF;
  END IF;

  /* TC_PLAZA  TW_CALENDARIOFALTASDET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_PLAZA_FK", FK_COLUMNS="N_IDPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CALENDARIOFALTASDET
      SET
        /* %SetFK(TW_CALENDARIOFALTASDET,NULL) */
        TW_CALENDARIOFALTASDET.N_IDPLAZA = NULL
      WHERE
        /* %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = ",",") */
        TW_CALENDARIOFALTASDET.N_IDPLAZA = :old.N_ID;
  END IF;

  /* TC_PLAZA  TW_MOVPLAZAPERSONAPLAZAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PLAZA"
    CHILD_OWNER="", CHILD_TABLE="TW_MOVPLAZAPERSONAPLAZAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_MOVPPPLAZAS_PLAZA", FK_COLUMNS="N_IDPLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_MOVPLAZAPERSONAPLAZAS
      SET
        /* %SetFK(TW_MOVPLAZAPERSONAPLAZAS,NULL) */
        TW_MOVPLAZAPERSONAPLAZAS.N_IDPLAZA = NULL
      WHERE
        /* %JoinFKPK(TW_MOVPLAZAPERSONAPLAZAS,:%Old," = ",",") */
        TW_MOVPLAZAPERSONAPLAZAS.N_IDPLAZA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PROCESOS AFTER DELETE ON TC_PROCESOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PROCESOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TW_SEGREPORTES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000ad3ab", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PROCESOS568", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TW_SEGREPORTES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TC_PROCESOSDATOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSDATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSDATOS_TC_PROCE_FK1", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSDATOS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSDATOS,:%Old," = "," AND") */
        TC_PROCESOSDATOS.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TC_PROCESOSDATOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TC_CALENDARIOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CALENDESC_TC_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CALENDARIOESCOLAR
      WHERE
        /*  %JoinFKPK(TC_CALENDARIOESCOLAR,:%Old," = "," AND") */
        TC_CALENDARIOESCOLAR.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TC_CALENDARIOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TC_PROCESOSPARAMETROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TW_BITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDPROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_BITACORA
      WHERE
        /*  %JoinFKPK(TW_BITACORA,:%Old," = "," AND") */
        TW_BITACORA.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TW_BITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TR_FOLIOSPROCESO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOSPROCESO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLIOPROC_TC_PROC_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOSPROCESO
      WHERE
        /*  %JoinFKPK(TR_FOLIOSPROCESO,:%Old," = "," AND") */
        TR_FOLIOSPROCESO.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TR_FOLIOSPROCESO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TW_GENERAARCHIVOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TW_GENERAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_GENERAARCH_TC_PROCESOS_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_GENERAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_GENERAARCHIVOS,:%Old," = "," AND") */
        TW_GENERAARCHIVOS.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TW_GENERAARCHIVOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TC_RUTAREPORTE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_RUTAREPORTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_RUTAREP_TC_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_RUTAREPORTE
      WHERE
        /*  %JoinFKPK(TC_RUTAREPORTE,:%Old," = "," AND") */
        TC_RUTAREPORTE.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TC_RUTAREPORTE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TR_MOVIMIENTOSCICLO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVIMIENTOSCICLO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVIMCICL__TC_PROCE_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVIMIENTOSCICLO
      WHERE
        /*  %JoinFKPK(TR_MOVIMIENTOSCICLO,:%Old," = "," AND") */
        TR_MOVIMIENTOSCICLO.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TR_MOVIMIENTOSCICLO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOS  TC_MOVIMIENTOALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVALU_TC_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOVIMIENTOALUMNO
      WHERE
        /*  %JoinFKPK(TC_MOVIMIENTOALUMNO,:%Old," = "," AND") */
        TC_MOVIMIENTOALUMNO.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOS because TC_MOVIMIENTOALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PROCESOS AFTER UPDATE ON TC_PROCESOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PROCESOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PROCESOS  TW_SEGREPORTES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000b805e", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TW_SEGREPORTES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_PROCESOS568", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_SEGREPORTES
      WHERE
        /*  %JoinFKPK(TW_SEGREPORTES,:%Old," = "," AND") */
        TW_SEGREPORTES.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROCESOS because TW_SEGREPORTES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PROCESOS  TC_PROCESOSDATOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSDATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSDATOS_TC_PROCE_FK1", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSDATOS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSDATOS,:%Old," = "," AND") */
        TC_PROCESOSDATOS.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROCESOS because TC_PROCESOSDATOS exists.'
      );
    END IF;
  END IF;

  /* TC_PROCESOS  TC_CALENDARIOESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_CALENDARIOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CALENDESC_TC_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CALENDARIOESCOLAR
      SET
        /* %SetFK(TC_CALENDARIOESCOLAR,NULL) */
        TC_CALENDARIOESCOLAR.N_IDPROCESO = NULL
      WHERE
        /* %JoinFKPK(TC_CALENDARIOESCOLAR,:%Old," = ",",") */
        TC_CALENDARIOESCOLAR.N_IDPROCESO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PROCESOS  TC_PROCESOSPARAMETROS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROCESOS because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;
  END IF;

  /* TC_PROCESOS  TW_BITACORA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDPROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_BITACORA
      SET
        /* %SetFK(TW_BITACORA,NULL) */
        TW_BITACORA.N_IDPROCESO = NULL
      WHERE
        /* %JoinFKPK(TW_BITACORA,:%Old," = ",",") */
        TW_BITACORA.N_IDPROCESO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PROCESOS  TR_FOLIOSPROCESO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOSPROCESO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLIOPROC_TC_PROC_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOSPROCESO
      WHERE
        /*  %JoinFKPK(TR_FOLIOSPROCESO,:%Old," = "," AND") */
        TR_FOLIOSPROCESO.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROCESOS because TR_FOLIOSPROCESO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PROCESOS  TW_GENERAARCHIVOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TW_GENERAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_GENERAARCH_TC_PROCESOS_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_GENERAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_GENERAARCHIVOS,:%Old," = "," AND") */
        TW_GENERAARCHIVOS.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROCESOS because TW_GENERAARCHIVOS exists.'
      );
    END IF;
  END IF;

  /* TC_PROCESOS  TC_RUTAREPORTE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_RUTAREPORTE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_RUTAREP_TC_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_RUTAREPORTE
      SET
        /* %SetFK(TC_RUTAREPORTE,NULL) */
        TC_RUTAREPORTE.N_IDPROCESO = NULL
      WHERE
        /* %JoinFKPK(TC_RUTAREPORTE,:%Old," = ",",") */
        TC_RUTAREPORTE.N_IDPROCESO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_PROCESOS  TR_MOVIMIENTOSCICLO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVIMIENTOSCICLO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVIMCICL__TC_PROCE_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVIMIENTOSCICLO
      WHERE
        /*  %JoinFKPK(TR_MOVIMIENTOSCICLO,:%Old," = "," AND") */
        TR_MOVIMIENTOSCICLO.N_IDPROCESO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROCESOS because TR_MOVIMIENTOSCICLO exists.'
      );
    END IF;
  END IF;

  /* TC_PROCESOS  TC_MOVIMIENTOALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOS"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVALU_TC_PROCESO_FK", FK_COLUMNS="N_IDPROCESO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOVIMIENTOALUMNO
      SET
        /* %SetFK(TC_MOVIMIENTOALUMNO,NULL) */
        TC_MOVIMIENTOALUMNO.N_IDPROCESO = NULL
      WHERE
        /* %JoinFKPK(TC_MOVIMIENTOALUMNO,:%Old," = ",",") */
        TC_MOVIMIENTOALUMNO.N_IDPROCESO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PROCESOSPERSONAL AFTER DELETE ON TC_PROCESOSPERSONAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PROCESOSPERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PROCESOSPERSONAL  TC_MOTIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00022723", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOSPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTIVO_TC_PROCPERS_FK", FK_COLUMNS="N_IDPROCESOSPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOTIVO
      WHERE
        /*  %JoinFKPK(TC_MOTIVO,:%Old," = "," AND") */
        TC_MOTIVO.N_IDPROCESOSPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOSPERSONAL because TC_MOTIVO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_PROCESOSPERSONAL  TC_MOTIVOPROCESOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOSPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVOPROCESOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTIVOPROC_TC_PROCPER_FK", FK_COLUMNS="N_IDPROCESOSPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOTIVOPROCESOS
      WHERE
        /*  %JoinFKPK(TC_MOTIVOPROCESOS,:%Old," = "," AND") */
        TC_MOTIVOPROCESOS.N_IDPROCESOSPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROCESOSPERSONAL because TC_MOTIVOPROCESOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PROCESOSPERSONAL AFTER UPDATE ON TC_PROCESOSPERSONAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PROCESOSPERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_PROCESOSPERSONAL  TC_MOTIVO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00022073", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOSPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTIVO_TC_PROCPERS_FK", FK_COLUMNS="N_IDPROCESOSPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOTIVO
      SET
        /* %SetFK(TC_MOTIVO,NULL) */
        TC_MOTIVO.N_IDPROCESOSPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TC_MOTIVO,:%Old," = ",",") */
        TC_MOTIVO.N_IDPROCESOSPERSONAL = :old.N_ID;
  END IF;

  /* TC_PROCESOSPERSONAL  TC_MOTIVOPROCESOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_PROCESOSPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVOPROCESOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTIVOPROC_TC_PROCPER_FK", FK_COLUMNS="N_IDPROCESOSPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOTIVOPROCESOS
      SET
        /* %SetFK(TC_MOTIVOPROCESOS,NULL) */
        TC_MOTIVOPROCESOS.N_IDPROCESOSPERSONAL = NULL
      WHERE
        /* %JoinFKPK(TC_MOTIVOPROCESOS,:%Old," = ",",") */
        TC_MOTIVOPROCESOS.N_IDPROCESOSPERSONAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PROGRAMA AFTER DELETE ON TC_PROGRAMA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PROGRAMA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PROGRAMA  TR_ESCUELAPROGRAMAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fdc4", PARENT_OWNER="", PARENT_TABLE="TC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELAPROGRAMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCPROG_TC_PROG_FK", FK_COLUMNS="N_IDPROGRAMA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELAPROGRAMAS
      WHERE
        /*  %JoinFKPK(TR_ESCUELAPROGRAMAS,:%Old," = "," AND") */
        TR_ESCUELAPROGRAMAS.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROGRAMA because TR_ESCUELAPROGRAMAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PROGRAMA AFTER UPDATE ON TC_PROGRAMA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PROGRAMA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PROGRAMA  TR_ESCUELAPROGRAMAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011f73", PARENT_OWNER="", PARENT_TABLE="TC_PROGRAMA"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELAPROGRAMAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCPROG_TC_PROG_FK", FK_COLUMNS="N_IDPROGRAMA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELAPROGRAMAS
      WHERE
        /*  %JoinFKPK(TR_ESCUELAPROGRAMAS,:%Old," = "," AND") */
        TR_ESCUELAPROGRAMAS.N_IDPROGRAMA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROGRAMA because TR_ESCUELAPROGRAMAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PROPIEDADINMUEBLE AFTER DELETE ON TC_PROPIEDADINMUEBLE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PROPIEDADINMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PROPIEDADINMUEBLE  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011222", PARENT_OWNER="", PARENT_TABLE="TC_PROPIEDADINMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_PROP_INM_FK", FK_COLUMNS="N_IDPROPIEDADINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDPROPIEDADINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROPIEDADINMUEBLE because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PROPIEDADINMUEBLE AFTER UPDATE ON TC_PROPIEDADINMUEBLE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PROPIEDADINMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_PROPIEDADINMUEBLE  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000fe62", PARENT_OWNER="", PARENT_TABLE="TC_PROPIEDADINMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_PROP_INM_FK", FK_COLUMNS="N_IDPROPIEDADINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDPROPIEDADINMUEBLE = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDPROPIEDADINMUEBLE = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PROPIETARIOSCONSTRUCCION AFTER DELETE ON TC_PROPIETARIOSCONSTRUCCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PROPIETARIOSCONSTRUCCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PROPIETARIOSCONSTRUCCION  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000111d0", PARENT_OWNER="", PARENT_TABLE="TC_PROPIETARIOSCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_PROP_CONS_FK", FK_COLUMNS="N_IDPROPIETARIOSCONSTRUCCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDPROPIETARIOSCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROPIETARIOSCONSTRUCCION because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PROPIETARIOSCONSTRUCCION AFTER UPDATE ON TC_PROPIETARIOSCONSTRUCCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PROPIETARIOSCONSTRUCCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_PROPIETARIOSCONSTRUCCION  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010ad3", PARENT_OWNER="", PARENT_TABLE="TC_PROPIETARIOSCONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_PROP_CONS_FK", FK_COLUMNS="N_IDPROPIETARIOSCONSTRUCCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDPROPIETARIOSCONSTRUCCION = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDPROPIETARIOSCONSTRUCCION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_PROYECTOS AFTER DELETE ON TC_PROYECTOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_PROYECTOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_PROYECTOS  TW_ALUMNOPROYECTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fe02", PARENT_OWNER="", PARENT_TABLE="TC_PROYECTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROYECTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMPROY_TC_PROYECTOS_FK", FK_COLUMNS="N_IDPROYECTOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROYECTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROYECTOS,:%Old," = "," AND") */
        TW_ALUMNOPROYECTOS.N_IDPROYECTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_PROYECTOS because TW_ALUMNOPROYECTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_PROYECTOS AFTER UPDATE ON TC_PROYECTOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_PROYECTOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_PROYECTOS  TW_ALUMNOPROYECTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000115e1", PARENT_OWNER="", PARENT_TABLE="TC_PROYECTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPROYECTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMPROY_TC_PROYECTOS_FK", FK_COLUMNS="N_IDPROYECTOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPROYECTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPROYECTOS,:%Old," = "," AND") */
        TW_ALUMNOPROYECTOS.N_IDPROYECTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_PROYECTOS because TW_ALUMNOPROYECTOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_RECOMENDACIONTIPO AFTER DELETE ON TC_RECOMENDACIONTIPO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_RECOMENDACIONTIPO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_RECOMENDACIONTIPO  TW_ALUMNORECOMENDACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011b23", PARENT_OWNER="", PARENT_TABLE="TC_RECOMENDACIONTIPO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNORECOMENDACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_RECOMENDACIONTIPO22", FK_COLUMNS="N_IDRECOMENDACIONTIPO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNORECOMENDACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNORECOMENDACIONES,:%Old," = "," AND") */
        TW_ALUMNORECOMENDACIONES.N_IDRECOMENDACIONTIPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_RECOMENDACIONTIPO because TW_ALUMNORECOMENDACIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_RECOMENDACIONTIPO AFTER UPDATE ON TC_RECOMENDACIONTIPO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_RECOMENDACIONTIPO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_RECOMENDACIONTIPO  TW_ALUMNORECOMENDACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013335", PARENT_OWNER="", PARENT_TABLE="TC_RECOMENDACIONTIPO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNORECOMENDACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_RECOMENDACIONTIPO22", FK_COLUMNS="N_IDRECOMENDACIONTIPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNORECOMENDACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNORECOMENDACIONES,:%Old," = "," AND") */
        TW_ALUMNORECOMENDACIONES.N_IDRECOMENDACIONTIPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_RECOMENDACIONTIPO because TW_ALUMNORECOMENDACIONES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_REGION AFTER DELETE ON TC_REGION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_REGION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_REGION  TC_PAIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000dd44", PARENT_OWNER="", PARENT_TABLE="TC_REGION"
    CHILD_OWNER="", CHILD_TABLE="TC_PAIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_REGION466", FK_COLUMNS="N_IDREGION" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PAIS
      WHERE
        /*  %JoinFKPK(TC_PAIS,:%Old," = "," AND") */
        TC_PAIS.N_IDREGION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REGION because TC_PAIS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_REGION AFTER UPDATE ON TC_REGION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_REGION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_REGION  TC_PAIS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000dbe5", PARENT_OWNER="", PARENT_TABLE="TC_REGION"
    CHILD_OWNER="", CHILD_TABLE="TC_PAIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTC_REGION466", FK_COLUMNS="N_IDREGION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PAIS
      SET
        /* %SetFK(TC_PAIS,NULL) */
        TC_PAIS.N_IDREGION = NULL
      WHERE
        /* %JoinFKPK(TC_PAIS,:%Old," = ",",") */
        TC_PAIS.N_IDREGION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_REGLAPLANTILLA AFTER DELETE ON TC_REGLAPLANTILLA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_REGLAPLANTILLA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_REGLAPLANTILLA  TW_PLANTILLAAUTORIZADA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001182c", PARENT_OWNER="", PARENT_TABLE="TC_REGLAPLANTILLA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_REGLAPLAN_FK", FK_COLUMNS="N_IDREGLASPLANTILLA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PLANTILLAAUTORIZADA
      WHERE
        /*  %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = "," AND") */
        TW_PLANTILLAAUTORIZADA.N_IDREGLASPLANTILLA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REGLAPLANTILLA because TW_PLANTILLAAUTORIZADA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_REGLAPLANTILLA AFTER UPDATE ON TC_REGLAPLANTILLA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_REGLAPLANTILLA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_REGLAPLANTILLA  TW_PLANTILLAAUTORIZADA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012fd6", PARENT_OWNER="", PARENT_TABLE="TC_REGLAPLANTILLA"
    CHILD_OWNER="", CHILD_TABLE="TW_PLANTILLAAUTORIZADA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PLANAUT_TC_REGLAPLAN_FK", FK_COLUMNS="N_IDREGLASPLANTILLA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PLANTILLAAUTORIZADA
      WHERE
        /*  %JoinFKPK(TW_PLANTILLAAUTORIZADA,:%Old," = "," AND") */
        TW_PLANTILLAAUTORIZADA.N_IDREGLASPLANTILLA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_REGLAPLANTILLA because TW_PLANTILLAAUTORIZADA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_REPEVAESTATUS AFTER DELETE ON TC_REPEVAESTATUS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_REPEVAESTATUS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_REPEVAESTATUS  TR_REPEVAZONACT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003164d", PARENT_OWNER="", PARENT_TABLE="TC_REPEVAESTATUS"
    CHILD_OWNER="", CHILD_TABLE="TR_REPEVAZONACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REPEVAZONACT_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_REPEVAZONACT
      WHERE
        /*  %JoinFKPK(TR_REPEVAZONACT,:%Old," = "," AND") */
        TR_REPEVAZONACT.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REPEVAESTATUS because TR_REPEVAZONACT exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_REPEVAESTATUS  TW_REPEVAZONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_REPEVAESTATUS"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVAZONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVAZONA_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVAZONA
      WHERE
        /*  %JoinFKPK(TW_REPEVAZONA,:%Old," = "," AND") */
        TW_REPEVAZONA.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REPEVAESTATUS because TW_REPEVAZONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_REPEVAESTATUS  TW_REPEVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_REPEVAESTATUS"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVA_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVA
      WHERE
        /*  %JoinFKPK(TW_REPEVA,:%Old," = "," AND") */
        TW_REPEVA.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REPEVAESTATUS because TW_REPEVA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_REPEVAESTATUS AFTER UPDATE ON TC_REPEVAESTATUS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_REPEVAESTATUS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_REPEVAESTATUS  TR_REPEVAZONACT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00035e5f", PARENT_OWNER="", PARENT_TABLE="TC_REPEVAESTATUS"
    CHILD_OWNER="", CHILD_TABLE="TR_REPEVAZONACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REPEVAZONACT_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_REPEVAZONACT
      WHERE
        /*  %JoinFKPK(TR_REPEVAZONACT,:%Old," = "," AND") */
        TR_REPEVAZONACT.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_REPEVAESTATUS because TR_REPEVAZONACT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_REPEVAESTATUS  TW_REPEVAZONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_REPEVAESTATUS"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVAZONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVAZONA_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVAZONA
      WHERE
        /*  %JoinFKPK(TW_REPEVAZONA,:%Old," = "," AND") */
        TW_REPEVAZONA.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_REPEVAESTATUS because TW_REPEVAZONA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_REPEVAESTATUS  TW_REPEVA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_REPEVAESTATUS"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVA_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVA
      WHERE
        /*  %JoinFKPK(TW_REPEVA,:%Old," = "," AND") */
        TW_REPEVA.N_IDESTATUS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_REPEVAESTATUS because TW_REPEVA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_REPORTESESPECIALES AFTER DELETE ON TC_REPORTESESPECIALES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_REPORTESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_REPORTESESPECIALES  TC_DATOSREPORTESESPECIALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002614f", PARENT_OWNER="", PARENT_TABLE="TC_REPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TC_DATOSREPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DATREPESP_TC_REPESP_FK", FK_COLUMNS="N_IDREPORTESESPECIALES" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DATOSREPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TC_DATOSREPORTESESPECIALES,:%Old," = "," AND") */
        TC_DATOSREPORTESESPECIALES.N_IDREPORTESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REPORTESESPECIALES because TC_DATOSREPORTESESPECIALES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_REPORTESESPECIALES  TW_REPORTESESPECIALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_REPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_REPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPESP_TC_REPESP_FK", FK_COLUMNS="N_IDREPORTESESPECIALES" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_REPORTESESPECIALES,:%Old," = "," AND") */
        TW_REPORTESESPECIALES.N_IDREPORTESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_REPORTESESPECIALES because TW_REPORTESESPECIALES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_REPORTESESPECIALES AFTER UPDATE ON TC_REPORTESESPECIALES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_REPORTESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_REPORTESESPECIALES  TC_DATOSREPORTESESPECIALES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00027f63", PARENT_OWNER="", PARENT_TABLE="TC_REPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TC_DATOSREPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DATREPESP_TC_REPESP_FK", FK_COLUMNS="N_IDREPORTESESPECIALES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DATOSREPORTESESPECIALES
      SET
        /* %SetFK(TC_DATOSREPORTESESPECIALES,NULL) */
        TC_DATOSREPORTESESPECIALES.N_IDREPORTESESPECIALES = NULL
      WHERE
        /* %JoinFKPK(TC_DATOSREPORTESESPECIALES,:%Old," = ",",") */
        TC_DATOSREPORTESESPECIALES.N_IDREPORTESESPECIALES = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_REPORTESESPECIALES  TW_REPORTESESPECIALES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_REPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_REPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPESP_TC_REPESP_FK", FK_COLUMNS="N_IDREPORTESESPECIALES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_REPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_REPORTESESPECIALES,:%Old," = "," AND") */
        TW_REPORTESESPECIALES.N_IDREPORTESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_REPORTESESPECIALES because TW_REPORTESESPECIALES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SERVICIO AFTER DELETE ON TC_SERVICIO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SERVICIO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SERVICIO  TC_DETALLESERVICIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00022be3", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIO"
    CHILD_OWNER="", CHILD_TABLE="TC_DETALLESERVICIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DETALLESERV_TC_SERV_FK", FK_COLUMNS="N_IDSERVICIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DETALLESERVICIO
      WHERE
        /*  %JoinFKPK(TC_DETALLESERVICIO,:%Old," = "," AND") */
        TC_DETALLESERVICIO.N_IDSERVICIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIO because TC_DETALLESERVICIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIO  TW_INMUEBLESERVICIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIO"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLESERVICIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLESER_TC_SERVICIO_FK", FK_COLUMNS="N_IDSERVICIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLESERVICIOS
      WHERE
        /*  %JoinFKPK(TW_INMUEBLESERVICIOS,:%Old," = "," AND") */
        TW_INMUEBLESERVICIOS.N_IDSERVICIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIO because TW_INMUEBLESERVICIOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SERVICIO AFTER UPDATE ON TC_SERVICIO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SERVICIO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SERVICIO  TC_DETALLESERVICIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000279ff", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIO"
    CHILD_OWNER="", CHILD_TABLE="TC_DETALLESERVICIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DETALLESERV_TC_SERV_FK", FK_COLUMNS="N_IDSERVICIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_DETALLESERVICIO
      WHERE
        /*  %JoinFKPK(TC_DETALLESERVICIO,:%Old," = "," AND") */
        TC_DETALLESERVICIO.N_IDSERVICIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SERVICIO because TC_DETALLESERVICIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_SERVICIO  TW_INMUEBLESERVICIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIO"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLESERVICIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLESER_TC_SERVICIO_FK", FK_COLUMNS="N_IDSERVICIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLESERVICIOS
      WHERE
        /*  %JoinFKPK(TW_INMUEBLESERVICIOS,:%Old," = "," AND") */
        TW_INMUEBLESERVICIOS.N_IDSERVICIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SERVICIO because TW_INMUEBLESERVICIOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SERVICIOESCUELA AFTER DELETE ON TC_SERVICIOESCUELA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SERVICIOESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SERVICIOESCUELA  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005b257", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_SERVICIOESC_FK1", FK_COLUMNS="N_IDSERVICIOESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDSERVICIOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOESCUELA because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIOESCUELA  TC_CUINORMATIVA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_SERVICIOESC_FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CUINORMATIVA
      WHERE
        /*  %JoinFKPK(TC_CUINORMATIVA,:%Old," = "," AND") */
        TC_CUINORMATIVA.N_IDSERVICIOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOESCUELA because TC_CUINORMATIVA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIOESCUELA  TC_PROCESOSPARAMETROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_SERVICIOE_FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDSERVICIOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOESCUELA because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIOESCUELA  TC_MOVIMIENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVIM_TC_SERVESC_FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOVIMIENTO
      WHERE
        /*  %JoinFKPK(TC_MOVIMIENTO,:%Old," = "," AND") */
        TC_MOVIMIENTO.N_IDSERVICIOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOESCUELA because TC_MOVIMIENTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIOESCUELA  TC_TURNOSESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_TURNOSESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TURNO_SERVESC__FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TURNOSESCOLAR
      WHERE
        /*  %JoinFKPK(TC_TURNOSESCOLAR,:%Old," = "," AND") */
        TC_TURNOSESCOLAR.N_IDSERVICIOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOESCUELA because TC_TURNOSESCOLAR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SERVICIOESCUELA AFTER UPDATE ON TC_SERVICIOESCUELA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SERVICIOESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SERVICIOESCUELA  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0005955e", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_SERVICIOESC_FK1", FK_COLUMNS="N_IDSERVICIOESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDSERVICIOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SERVICIOESCUELA because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_SERVICIOESCUELA  TC_CUINORMATIVA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_CUINORMATIVA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CUINORM_SERVICIOESC_FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_CUINORMATIVA
      SET
        /* %SetFK(TC_CUINORMATIVA,NULL) */
        TC_CUINORMATIVA.N_IDSERVICIOESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_CUINORMATIVA,:%Old," = ",",") */
        TC_CUINORMATIVA.N_IDSERVICIOESCUELA = :old.N_ID;
  END IF;

  /* TC_SERVICIOESCUELA  TC_PROCESOSPARAMETROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_SERVICIOE_FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PROCESOSPARAMETROS
      SET
        /* %SetFK(TC_PROCESOSPARAMETROS,NULL) */
        TC_PROCESOSPARAMETROS.N_IDSERVICIOESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = ",",") */
        TC_PROCESOSPARAMETROS.N_IDSERVICIOESCUELA = :old.N_ID;
  END IF;

  /* TC_SERVICIOESCUELA  TC_MOVIMIENTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_MOVIMIENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOVIM_TC_SERVESC_FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOVIMIENTO
      SET
        /* %SetFK(TC_MOVIMIENTO,NULL) */
        TC_MOVIMIENTO.N_IDSERVICIOESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_MOVIMIENTO,:%Old," = ",",") */
        TC_MOVIMIENTO.N_IDSERVICIOESCUELA = :old.N_ID;
  END IF;

  /* TC_SERVICIOESCUELA  TC_TURNOSESCOLAR on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_TURNOSESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TURNO_SERVESC__FK", FK_COLUMNS="N_IDSERVICIOESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_TURNOSESCOLAR
      SET
        /* %SetFK(TC_TURNOSESCOLAR,NULL) */
        TC_TURNOSESCOLAR.N_IDSERVICIOESCUELA = NULL
      WHERE
        /* %JoinFKPK(TC_TURNOSESCOLAR,:%Old," = ",",") */
        TC_TURNOSESCOLAR.N_IDSERVICIOESCUELA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SERVICIOREGIONAL AFTER DELETE ON TC_SERVICIOREGIONAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SERVICIOREGIONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SERVICIOREGIONAL  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000376bd", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOREGIONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_SERVICIOREG_FK1", FK_COLUMNS="N_IDSERVICIOREGIONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDSERVICIOREGIONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOREGIONAL because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIOREGIONAL  TR_INMUEBLE_LOCAL_CT_HIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOREGIONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT_HIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_SERVICIOREGIONAL_H_FK", FK_COLUMNS="N_IDSERVICIOREGIONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLE_LOCAL_CT_HIS
      WHERE
        /*  %JoinFKPK(TR_INMUEBLE_LOCAL_CT_HIS,:%Old," = "," AND") */
        TR_INMUEBLE_LOCAL_CT_HIS.N_IDSERVICIOREGIONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOREGIONAL because TR_INMUEBLE_LOCAL_CT_HIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SERVICIOREGIONAL  TR_INMUEBLE_LOCAL_CT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOREGIONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_SERVICIOREGIONAL_FK", FK_COLUMNS="N_IDSERVICIOREGIONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLE_LOCAL_CT
      WHERE
        /*  %JoinFKPK(TR_INMUEBLE_LOCAL_CT,:%Old," = "," AND") */
        TR_INMUEBLE_LOCAL_CT.N_IDSERVICIOREGIONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SERVICIOREGIONAL because TR_INMUEBLE_LOCAL_CT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SERVICIOREGIONAL AFTER UPDATE ON TC_SERVICIOREGIONAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SERVICIOREGIONAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SERVICIOREGIONAL  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000378a0", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOREGIONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_SERVICIOREG_FK1", FK_COLUMNS="N_IDSERVICIOREGIONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDSERVICIOREGIONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SERVICIOREGIONAL because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_SERVICIOREGIONAL  TR_INMUEBLE_LOCAL_CT_HIS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOREGIONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT_HIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_SERVICIOREGIONAL_H_FK", FK_COLUMNS="N_IDSERVICIOREGIONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_INMUEBLE_LOCAL_CT_HIS
      SET
        /* %SetFK(TR_INMUEBLE_LOCAL_CT_HIS,NULL) */
        TR_INMUEBLE_LOCAL_CT_HIS.N_IDSERVICIOREGIONAL = NULL
      WHERE
        /* %JoinFKPK(TR_INMUEBLE_LOCAL_CT_HIS,:%Old," = ",",") */
        TR_INMUEBLE_LOCAL_CT_HIS.N_IDSERVICIOREGIONAL = :old.N_ID;
  END IF;

  /* TC_SERVICIOREGIONAL  TR_INMUEBLE_LOCAL_CT on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SERVICIOREGIONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_SERVICIOREGIONAL_FK", FK_COLUMNS="N_IDSERVICIOREGIONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_INMUEBLE_LOCAL_CT
      SET
        /* %SetFK(TR_INMUEBLE_LOCAL_CT,NULL) */
        TR_INMUEBLE_LOCAL_CT.N_IDSERVICIOREGIONAL = NULL
      WHERE
        /* %JoinFKPK(TR_INMUEBLE_LOCAL_CT,:%Old," = ",",") */
        TR_INMUEBLE_LOCAL_CT.N_IDSERVICIOREGIONAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SEXO AFTER DELETE ON TC_SEXO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SEXO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SEXO  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002f6a5", PARENT_OWNER="", PARENT_TABLE="TC_SEXO"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_SEXO_FK", FK_COLUMNS="N_IDSEXO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDSEXO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SEXO because TC_PERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SEXO  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SEXO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_SEXO_FK", FK_COLUMNS="N_IDSEXO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDSEXO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SEXO because TC_ALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SEXO  TW_USUARIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SEXO"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_SEXO_FK", FK_COLUMNS="N_IDSEXO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_IDSEXO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SEXO because TW_USUARIODETALLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SEXO AFTER UPDATE ON TC_SEXO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SEXO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SEXO  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000328ca", PARENT_OWNER="", PARENT_TABLE="TC_SEXO"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_SEXO_FK", FK_COLUMNS="N_IDSEXO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDSEXO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SEXO because TC_PERSONAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_SEXO  TC_ALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SEXO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_SEXO_FK", FK_COLUMNS="N_IDSEXO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDSEXO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SEXO because TC_ALUMNO exists.'
      );
    END IF;
  END IF;

  /* TC_SEXO  TW_USUARIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SEXO"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TC_SEXO_FK", FK_COLUMNS="N_IDSEXO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_USUARIODETALLE
      SET
        /* %SetFK(TW_USUARIODETALLE,NULL) */
        TW_USUARIODETALLE.N_IDSEXO = NULL
      WHERE
        /* %JoinFKPK(TW_USUARIODETALLE,:%Old," = ",",") */
        TW_USUARIODETALLE.N_IDSEXO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SITUACIONALUMNO AFTER DELETE ON TC_SITUACIONALUMNO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SITUACIONALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SITUACIONALUMNO  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f07f", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_SITUACIONALU_FK", FK_COLUMNS="N_IDSITUACIONALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDSITUACIONALUMNO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SITUACIONALUMNO because TC_ALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SITUACIONALUMNO AFTER UPDATE ON TC_SITUACIONALUMNO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SITUACIONALUMNO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_SITUACIONALUMNO  TC_ALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000f211", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONALUMNO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_SITUACIONALU_FK", FK_COLUMNS="N_IDSITUACIONALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNO
      SET
        /* %SetFK(TC_ALUMNO,NULL) */
        TC_ALUMNO.N_IDSITUACIONALUMNO = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNO,:%Old," = ",",") */
        TC_ALUMNO.N_IDSITUACIONALUMNO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SITUACIONLABORAL AFTER DELETE ON TC_SITUACIONLABORAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SITUACIONLABORAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SITUACIONLABORAL  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047060", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_SITUACION", FK_COLUMNS="N_SITUACIONLABORALPER" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_SITUACIONLABORALPER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SITUACIONLABORAL because TC_PERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SITUACIONLABORAL  TR_MOVPLAZAPERSONADET on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_SITUALAB_FK", FK_COLUMNS="N_SITUACIONLABORALPPE" */
    UPDATE TR_MOVPLAZAPERSONADET
      SET
        /* %SetFK(TR_MOVPLAZAPERSONADET,NULL) */
        TR_MOVPLAZAPERSONADET.N_SITUACIONLABORALPPE = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONADET.N_SITUACIONLABORALPPE = :old.N_ID;

    /* ERwin Builtin Trigger */
    /* TC_SITUACIONLABORAL  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="N_SITUACIONLABORALPER_FK", FK_COLUMNS="N_SITUACIONLABORALPER" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_SITUACIONLABORALPER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SITUACIONLABORAL because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SITUACIONLABORAL  TC_MOTIVOFUNCIONREAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVOFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTFUNREAL_TC_SITLAB_FK", FK_COLUMNS="N_IDSITUACIONLABORAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_MOTIVOFUNCIONREAL
      WHERE
        /*  %JoinFKPK(TC_MOTIVOFUNCIONREAL,:%Old," = "," AND") */
        TC_MOTIVOFUNCIONREAL.N_IDSITUACIONLABORAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SITUACIONLABORAL because TC_MOTIVOFUNCIONREAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SITUACIONLABORAL AFTER UPDATE ON TC_SITUACIONLABORAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SITUACIONLABORAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SITUACIONLABORAL  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00048cf2", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_SITUACION", FK_COLUMNS="N_SITUACIONLABORALPER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_SITUACIONLABORALPER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SITUACIONLABORAL because TC_PERSONAL exists.'
      );
    END IF;
  END IF;

  /* TC_SITUACIONLABORAL  TR_MOVPLAZAPERSONADET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_SITUALAB_FK", FK_COLUMNS="N_SITUACIONLABORALPPE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAZAPERSONADET
      SET
        /* %SetFK(TR_MOVPLAZAPERSONADET,NULL) */
        TR_MOVPLAZAPERSONADET.N_SITUACIONLABORALPPE = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = ",",") */
        TR_MOVPLAZAPERSONADET.N_SITUACIONLABORALPPE = :old.N_ID;
  END IF;

  /* TC_SITUACIONLABORAL  TR_MOVPLAZAPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="N_SITUACIONLABORALPER_FK", FK_COLUMNS="N_SITUACIONLABORALPER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAZAPERSONA
      SET
        /* %SetFK(TR_MOVPLAZAPERSONA,NULL) */
        TR_MOVPLAZAPERSONA.N_SITUACIONLABORALPER = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = ",",") */
        TR_MOVPLAZAPERSONA.N_SITUACIONLABORALPER = :old.N_ID;
  END IF;

  /* TC_SITUACIONLABORAL  TC_MOTIVOFUNCIONREAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SITUACIONLABORAL"
    CHILD_OWNER="", CHILD_TABLE="TC_MOTIVOFUNCIONREAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_MOTFUNREAL_TC_SITLAB_FK", FK_COLUMNS="N_IDSITUACIONLABORAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_MOTIVOFUNCIONREAL
      SET
        /* %SetFK(TC_MOTIVOFUNCIONREAL,NULL) */
        TC_MOTIVOFUNCIONREAL.N_IDSITUACIONLABORAL = NULL
      WHERE
        /* %JoinFKPK(TC_MOTIVOFUNCIONREAL,:%Old," = ",",") */
        TC_MOTIVOFUNCIONREAL.N_IDSITUACIONLABORAL = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SOSTENIMIENTO AFTER DELETE ON TC_SOSTENIMIENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SOSTENIMIENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SOSTENIMIENTO  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00022ae1", PARENT_OWNER="", PARENT_TABLE="TC_SOSTENIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_SOSTENIMIEN_FK1", FK_COLUMNS="N_IDSOSTENIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDSOSTENIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SOSTENIMIENTO because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SOSTENIMIENTO  TC_PROCESOSPARAMETROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SOSTENIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_SOSTENIMIENTO_FK", FK_COLUMNS="N_IDSOSTENIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PROCESOSPARAMETROS
      WHERE
        /*  %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = "," AND") */
        TC_PROCESOSPARAMETROS.N_IDSOSTENIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SOSTENIMIENTO because TC_PROCESOSPARAMETROS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SOSTENIMIENTO AFTER UPDATE ON TC_SOSTENIMIENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SOSTENIMIENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SOSTENIMIENTO  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002359c", PARENT_OWNER="", PARENT_TABLE="TC_SOSTENIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_SOSTENIMIEN_FK1", FK_COLUMNS="N_IDSOSTENIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDSOSTENIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SOSTENIMIENTO because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_SOSTENIMIENTO  TC_PROCESOSPARAMETROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SOSTENIMIENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_PROCESOSPARAMETROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PROCESOSP_SOSTENIMIENTO_FK", FK_COLUMNS="N_IDSOSTENIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PROCESOSPARAMETROS
      SET
        /* %SetFK(TC_PROCESOSPARAMETROS,NULL) */
        TC_PROCESOSPARAMETROS.N_IDSOSTENIMIENTO = NULL
      WHERE
        /* %JoinFKPK(TC_PROCESOSPARAMETROS,:%Old," = ",",") */
        TC_PROCESOSPARAMETROS.N_IDSOSTENIMIENTO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_SUBUNIDAD AFTER DELETE ON TC_SUBUNIDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_SUBUNIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_SUBUNIDAD  TC_CLAVEPRESUPUESTAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00032ba8", PARENT_OWNER="", PARENT_TABLE="TC_SUBUNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_CLAVEPRESUPUESTAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CLAVEPRES__TC_SUBUNI_FK", FK_COLUMNS="N_IDSUBUNIDADPLAZAPRSUPUESTAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_CLAVEPRESUPUESTAL
      WHERE
        /*  %JoinFKPK(TC_CLAVEPRESUPUESTAL,:%Old," = "," AND") */
        TC_CLAVEPRESUPUESTAL.N_IDSUBUNIDADPLAZAPRSUPUESTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SUBUNIDAD because TC_CLAVEPRESUPUESTAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SUBUNIDAD  TW_CALENDARIOFALTASDET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SUBUNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_SUBUNIDAD_FK", FK_COLUMNS="N_SUBUNIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CALENDARIOFALTASDET
      WHERE
        /*  %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = "," AND") */
        TW_CALENDARIOFALTASDET.N_SUBUNIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SUBUNIDAD because TW_CALENDARIOFALTASDET exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_SUBUNIDAD  TC_PLAZA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SUBUNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_PLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLAZA_SUBUNIDAD_FK1", FK_COLUMNS="N_IDSUBUNIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLAZA
      WHERE
        /*  %JoinFKPK(TC_PLAZA,:%Old," = "," AND") */
        TC_PLAZA.N_IDSUBUNIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_SUBUNIDAD because TC_PLAZA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_SUBUNIDAD AFTER UPDATE ON TC_SUBUNIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_SUBUNIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_SUBUNIDAD  TC_CLAVEPRESUPUESTAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000365f6", PARENT_OWNER="", PARENT_TABLE="TC_SUBUNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_CLAVEPRESUPUESTAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_CLAVEPRES__TC_SUBUNI_FK", FK_COLUMNS="N_IDSUBUNIDADPLAZAPRSUPUESTAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_CLAVEPRESUPUESTAL
      WHERE
        /*  %JoinFKPK(TC_CLAVEPRESUPUESTAL,:%Old," = "," AND") */
        TC_CLAVEPRESUPUESTAL.N_IDSUBUNIDADPLAZAPRSUPUESTAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SUBUNIDAD because TC_CLAVEPRESUPUESTAL exists.'
      );
    END IF;
  END IF;

  /* TC_SUBUNIDAD  TW_CALENDARIOFALTASDET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SUBUNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_SUBUNIDAD_FK", FK_COLUMNS="N_SUBUNIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CALENDARIOFALTASDET
      SET
        /* %SetFK(TW_CALENDARIOFALTASDET,NULL) */
        TW_CALENDARIOFALTASDET.N_SUBUNIDAD = NULL
      WHERE
        /* %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = ",",") */
        TW_CALENDARIOFALTASDET.N_SUBUNIDAD = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_SUBUNIDAD  TC_PLAZA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_SUBUNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_PLAZA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLAZA_SUBUNIDAD_FK1", FK_COLUMNS="N_IDSUBUNIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PLAZA
      WHERE
        /*  %JoinFKPK(TC_PLAZA,:%Old," = "," AND") */
        TC_PLAZA.N_IDSUBUNIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_SUBUNIDAD because TC_PLAZA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPO_BECA AFTER DELETE ON TC_TIPO_BECA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPO_BECA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPO_BECA  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fe75", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_BECA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPLAZAPERSONA_TC_TIPOB_FK", FK_COLUMNS="N_IDTIPO_BECA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDTIPO_BECA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPO_BECA because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPO_BECA AFTER UPDATE ON TC_TIPO_BECA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPO_BECA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPO_BECA  TR_MOVPLAZAPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010510", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_BECA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPLAZAPERSONA_TC_TIPOB_FK", FK_COLUMNS="N_IDTIPO_BECA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAZAPERSONA
      SET
        /* %SetFK(TR_MOVPLAZAPERSONA,NULL) */
        TR_MOVPLAZAPERSONA.N_IDTIPO_BECA = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = ",",") */
        TR_MOVPLAZAPERSONA.N_IDTIPO_BECA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPO_CONSTRUCCION AFTER DELETE ON TC_TIPO_CONSTRUCCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPO_CONSTRUCCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPO_CONSTRUCCION  TW_INMUEBLE_LOCAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002296a", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_CONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_TIPO_CONS_FK", FK_COLUMNS="N_IDTIPOCONSTRUCCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDTIPOCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPO_CONSTRUCCION because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPO_CONSTRUCCION  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_CONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_TIPO_CONS_FK", FK_COLUMNS="N_IDTIPOCONSTRUCCION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDTIPOCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPO_CONSTRUCCION because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPO_CONSTRUCCION AFTER UPDATE ON TC_TIPO_CONSTRUCCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPO_CONSTRUCCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPO_CONSTRUCCION  TW_INMUEBLE_LOCAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00023fc2", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_CONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_TIPO_CONS_FK", FK_COLUMNS="N_IDTIPOCONSTRUCCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDTIPOCONSTRUCCION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPO_CONSTRUCCION because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;
  END IF;

  /* TC_TIPO_CONSTRUCCION  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_CONSTRUCCION"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_TIPO_CONS_FK", FK_COLUMNS="N_IDTIPOCONSTRUCCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDTIPOCONSTRUCCION = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDTIPOCONSTRUCCION = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPO_LIC_BECA AFTER DELETE ON TC_TIPO_LIC_BECA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPO_LIC_BECA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPO_LIC_BECA  TR_MOVPLAZAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010afa", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_LIC_BECA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPLAZAPERSONA_TC_TIPOLBFK", FK_COLUMNS="N_IDTIPO_LICENCIA_BECA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONA
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONA.N_IDTIPO_LICENCIA_BECA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPO_LIC_BECA because TR_MOVPLAZAPERSONA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPO_LIC_BECA AFTER UPDATE ON TC_TIPO_LIC_BECA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPO_LIC_BECA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPO_LIC_BECA  TR_MOVPLAZAPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00012022", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_LIC_BECA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPLAZAPERSONA_TC_TIPOLBFK", FK_COLUMNS="N_IDTIPO_LICENCIA_BECA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVPLAZAPERSONA
      SET
        /* %SetFK(TR_MOVPLAZAPERSONA,NULL) */
        TR_MOVPLAZAPERSONA.N_IDTIPO_LICENCIA_BECA = NULL
      WHERE
        /* %JoinFKPK(TR_MOVPLAZAPERSONA,:%Old," = ",",") */
        TR_MOVPLAZAPERSONA.N_IDTIPO_LICENCIA_BECA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPO_LOCAL AFTER DELETE ON TC_TIPO_LOCAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPO_LOCAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPO_LOCAL  TW_INMUEBLE_LOCAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010402", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_TIPO_LOCAL_FK", FK_COLUMNS="N_ID_TIPOLOCAL" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_ID_TIPOLOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPO_LOCAL because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPO_LOCAL AFTER UPDATE ON TC_TIPO_LOCAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPO_LOCAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPO_LOCAL  TW_INMUEBLE_LOCAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000129de", PARENT_OWNER="", PARENT_TABLE="TC_TIPO_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_TIPO_LOCAL_FK", FK_COLUMNS="N_ID_TIPOLOCAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_ID_TIPOLOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPO_LOCAL because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOASIGNATURA AFTER DELETE ON TC_TIPOASIGNATURA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURA  TC_ASIGNATURAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005f151", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNA_TC_TIPOASI_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ASIGNATURAS
      WHERE
        /*  %JoinFKPK(TC_ASIGNATURAS,:%Old," = "," AND") */
        TC_ASIGNATURAS.N_IDTIPOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURA because TC_ASIGNATURAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURA  TW_TOTALESCALIFICACIONESGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_TOTALESCALIFICACIONESGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_TOTCALG_TC_TIPOASIG_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_TOTALESCALIFICACIONESGRUPO
      WHERE
        /*  %JoinFKPK(TW_TOTALESCALIFICACIONESGRUPO,:%Old," = "," AND") */
        TW_TOTALESCALIFICACIONESGRUPO.N_IDTIPOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURA because TW_TOTALESCALIFICACIONESGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURA  TC_TIPOASIGNATURAPERIODOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURAPERIODOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOASPE_TC_TIPOASI_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_TIPOASIGNATURAPERIODOS
      WHERE
        /*  %JoinFKPK(TC_TIPOASIGNATURAPERIODOS,:%Old," = "," AND") */
        TC_TIPOASIGNATURAPERIODOS.N_IDTIPOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURA because TC_TIPOASIGNATURAPERIODOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURA  TC_EQUIVALENCIA_PROMEDIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_EQUIVALENCIA_PROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EQUIV_PROM_TAP_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_EQUIVALENCIA_PROMEDIO
      WHERE
        /*  %JoinFKPK(TC_EQUIVALENCIA_PROMEDIO,:%Old," = "," AND") */
        TC_EQUIVALENCIA_PROMEDIO.N_IDTIPOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURA because TC_EQUIVALENCIA_PROMEDIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURA  TC_PLANDEESTUDIOSASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTAS_TC_TIPOASIG_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PLANDEESTUDIOSASIGNATURA
      WHERE
        /*  %JoinFKPK(TC_PLANDEESTUDIOSASIGNATURA,:%Old," = "," AND") */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDTIPOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURA because TC_PLANDEESTUDIOSASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOASIGNATURA AFTER UPDATE ON TC_TIPOASIGNATURA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOASIGNATURA  TC_ASIGNATURAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0006242e", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_ASIGNATURAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ASIGNA_TC_TIPOASI_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ASIGNATURAS
      SET
        /* %SetFK(TC_ASIGNATURAS,NULL) */
        TC_ASIGNATURAS.N_IDTIPOASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_ASIGNATURAS,:%Old," = ",",") */
        TC_ASIGNATURAS.N_IDTIPOASIGNATURA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURA  TW_TOTALESCALIFICACIONESGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TW_TOTALESCALIFICACIONESGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_TOTCALG_TC_TIPOASIG_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_TOTALESCALIFICACIONESGRUPO
      WHERE
        /*  %JoinFKPK(TW_TOTALESCALIFICACIONESGRUPO,:%Old," = "," AND") */
        TW_TOTALESCALIFICACIONESGRUPO.N_IDTIPOASIGNATURA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURA because TW_TOTALESCALIFICACIONESGRUPO exists.'
      );
    END IF;
  END IF;

  /* TC_TIPOASIGNATURA  TC_TIPOASIGNATURAPERIODOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_TIPOASIGNATURAPERIODOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_TIPOASPE_TC_TIPOASI_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_TIPOASIGNATURAPERIODOS
      SET
        /* %SetFK(TC_TIPOASIGNATURAPERIODOS,NULL) */
        TC_TIPOASIGNATURAPERIODOS.N_IDTIPOASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_TIPOASIGNATURAPERIODOS,:%Old," = ",",") */
        TC_TIPOASIGNATURAPERIODOS.N_IDTIPOASIGNATURA = :old.N_ID;
  END IF;

  /* TC_TIPOASIGNATURA  TC_EQUIVALENCIA_PROMEDIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_EQUIVALENCIA_PROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_EQUIV_PROM_TAP_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_EQUIVALENCIA_PROMEDIO
      SET
        /* %SetFK(TC_EQUIVALENCIA_PROMEDIO,NULL) */
        TC_EQUIVALENCIA_PROMEDIO.N_IDTIPOASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_EQUIVALENCIA_PROMEDIO,:%Old," = ",",") */
        TC_EQUIVALENCIA_PROMEDIO.N_IDTIPOASIGNATURA = :old.N_ID;
  END IF;

  /* TC_TIPOASIGNATURA  TC_PLANDEESTUDIOSASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="TC_PLANDEESTUDIOSASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PLANESTAS_TC_TIPOASIG_FK", FK_COLUMNS="N_IDTIPOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PLANDEESTUDIOSASIGNATURA
      SET
        /* %SetFK(TC_PLANDEESTUDIOSASIGNATURA,NULL) */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDTIPOASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(TC_PLANDEESTUDIOSASIGNATURA,:%Old," = ",",") */
        TC_PLANDEESTUDIOSASIGNATURA.N_IDTIPOASIGNATURA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOASIGNATURAPERIODOS AFTER DELETE ON TC_TIPOASIGNATURAPERIODOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOASIGNATURAPERIODOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOPERIODOPROMEDIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0007b935", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPERIODOPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUPERPRO_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPERIODOPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPERIODOPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOPERIODOPROMEDIO.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOPERIODOPROMEDIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURAPERIODOS  TW_CORRIGEEVALUACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_CORRIGEEVALUACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COREVA_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CORRIGEEVALUACIONES
      WHERE
        /*  %JoinFKPK(TW_CORRIGEEVALUACIONES,:%Old," = "," AND") */
        TW_CORRIGEEVALUACIONES.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURAPERIODOS because TW_CORRIGEEVALUACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURAPERIODOS  TW_TOTALESCALIFICACIONESGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_TOTALESCALIFICACIONESGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_TOTCALG_TC_TIPOASIGPER_FK", FK_COLUMNS="N_TIPOASIGNATURAPERIODOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_TOTALESCALIFICACIONESGRUPO
      WHERE
        /*  %JoinFKPK(TW_TOTALESCALIFICACIONESGRUPO,:%Old," = "," AND") */
        TW_TOTALESCALIFICACIONESGRUPO.N_TIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURAPERIODOS because TW_TOTALESCALIFICACIONESGRUPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOAPOYOREQUERIDOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOAPOYOREQUERIDOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUAPOREQ_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOAPOYOREQUERIDOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOAPOYOREQUERIDOS,:%Old," = "," AND") */
        TW_ALUMNOAPOYOREQUERIDOS.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOAPOYOREQUERIDOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOCALIFICACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAL_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCALIFICACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCALIFICACIONES,:%Old," = "," AND") */
        TW_ALUMNOCALIFICACIONES.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOCALIFICACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOOBSERVACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOOBSERVACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOBS_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOOBSERVACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOOBSERVACIONES,:%Old," = "," AND") */
        TW_ALUMNOOBSERVACIONES.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOOBSERVACIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOASIGNATURAPERIODOS AFTER UPDATE ON TC_TIPOASIGNATURAPERIODOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOASIGNATURAPERIODOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOPERIODOPROMEDIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0008720c", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPERIODOPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUPERPRO_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPERIODOPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPERIODOPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOPERIODOPROMEDIO.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOPERIODOPROMEDIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURAPERIODOS  TW_CORRIGEEVALUACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_CORRIGEEVALUACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COREVA_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CORRIGEEVALUACIONES
      WHERE
        /*  %JoinFKPK(TW_CORRIGEEVALUACIONES,:%Old," = "," AND") */
        TW_CORRIGEEVALUACIONES.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURAPERIODOS because TW_CORRIGEEVALUACIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURAPERIODOS  TW_TOTALESCALIFICACIONESGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_TOTALESCALIFICACIONESGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_TOTCALG_TC_TIPOASIGPER_FK", FK_COLUMNS="N_TIPOASIGNATURAPERIODOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_TOTALESCALIFICACIONESGRUPO
      WHERE
        /*  %JoinFKPK(TW_TOTALESCALIFICACIONESGRUPO,:%Old," = "," AND") */
        TW_TOTALESCALIFICACIONESGRUPO.N_TIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURAPERIODOS because TW_TOTALESCALIFICACIONESGRUPO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOAPOYOREQUERIDOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOAPOYOREQUERIDOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUAPOREQ_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOAPOYOREQUERIDOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOAPOYOREQUERIDOS,:%Old," = "," AND") */
        TW_ALUMNOAPOYOREQUERIDOS.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOAPOYOREQUERIDOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOCALIFICACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAL_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCALIFICACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCALIFICACIONES,:%Old," = "," AND") */
        TW_ALUMNOCALIFICACIONES.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOCALIFICACIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOASIGNATURAPERIODOS  TW_ALUMNOOBSERVACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOASIGNATURAPERIODOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOOBSERVACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOBS_TC_TIPASIPER_FK", FK_COLUMNS="N_IDTIPOASIGNATURAPERIODOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOOBSERVACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOOBSERVACIONES,:%Old," = "," AND") */
        TW_ALUMNOOBSERVACIONES.N_IDTIPOASIGNATURAPERIODOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOASIGNATURAPERIODOS because TW_ALUMNOOBSERVACIONES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPODEDATO AFTER DELETE ON TC_TIPODEDATO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPODEDATO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPODEDATO  TC_DATOSESTADISTICOSBORR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002280e", PARENT_OWNER="", PARENT_TABLE="TC_TIPODEDATO"
    CHILD_OWNER="", CHILD_TABLE="TC_DATOSESTADISTICOSBORR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DATOSESTA_TC_TIPODAT_FK", FK_COLUMNS="N_IDTIPODATO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DATOSESTADISTICOSBORR
      WHERE
        /*  %JoinFKPK(TC_DATOSESTADISTICOSBORR,:%Old," = "," AND") */
        TC_DATOSESTADISTICOSBORR.N_IDTIPODATO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPODEDATO because TC_DATOSESTADISTICOSBORR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPODEDATO  TW_DATOSESTADISTICOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPODEDATO"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATEST_TC_TIPDAT_FK", FK_COLUMNS="N_IDTIPODATO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_DATOSESTADISTICOS,:%Old," = "," AND") */
        TW_DATOSESTADISTICOS.N_IDTIPODATO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPODEDATO because TW_DATOSESTADISTICOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPODEDATO AFTER UPDATE ON TC_TIPODEDATO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPODEDATO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPODEDATO  TC_DATOSESTADISTICOSBORR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000268bd", PARENT_OWNER="", PARENT_TABLE="TC_TIPODEDATO"
    CHILD_OWNER="", CHILD_TABLE="TC_DATOSESTADISTICOSBORR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DATOSESTA_TC_TIPODAT_FK", FK_COLUMNS="N_IDTIPODATO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_DATOSESTADISTICOSBORR
      WHERE
        /*  %JoinFKPK(TC_DATOSESTADISTICOSBORR,:%Old," = "," AND") */
        TC_DATOSESTADISTICOSBORR.N_IDTIPODATO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPODEDATO because TC_DATOSESTADISTICOSBORR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPODEDATO  TW_DATOSESTADISTICOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPODEDATO"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATEST_TC_TIPDAT_FK", FK_COLUMNS="N_IDTIPODATO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_DATOSESTADISTICOS,:%Old," = "," AND") */
        TW_DATOSESTADISTICOS.N_IDTIPODATO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPODEDATO because TW_DATOSESTADISTICOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPODOCUMENTO AFTER DELETE ON TC_TIPODOCUMENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPODOCUMENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPODOCUMENTO  TC_ALUMNOCOMPLEMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011e4c", PARENT_OWNER="", PARENT_TABLE="TC_TIPODOCUMENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_TIPODOC_FK", FK_COLUMNS="N_IDTIPODOCUMENTOPROBATORIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDTIPODOCUMENTOPROBATORIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPODOCUMENTO because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPODOCUMENTO AFTER UPDATE ON TC_TIPODOCUMENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPODOCUMENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPODOCUMENTO  TC_ALUMNOCOMPLEMENTO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000122b3", PARENT_OWNER="", PARENT_TABLE="TC_TIPODOCUMENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_TIPODOC_FK", FK_COLUMNS="N_IDTIPODOCUMENTOPROBATORIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNOCOMPLEMENTO
      SET
        /* %SetFK(TC_ALUMNOCOMPLEMENTO,NULL) */
        TC_ALUMNOCOMPLEMENTO.N_IDTIPODOCUMENTOPROBATORIO = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = ",",") */
        TC_ALUMNOCOMPLEMENTO.N_IDTIPODOCUMENTOPROBATORIO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOEMPLEADO AFTER DELETE ON TC_TIPOEMPLEADO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOEMPLEADO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOEMPLEADO  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f2f5", PARENT_OWNER="", PARENT_TABLE="TC_TIPOEMPLEADO"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_TIPEMP_FK", FK_COLUMNS="N_IDTIPOEMPLEADO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDTIPOEMPLEADO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOEMPLEADO because TC_PERSONAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOEMPLEADO AFTER UPDATE ON TC_TIPOEMPLEADO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOEMPLEADO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOEMPLEADO  TC_PERSONAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001141e", PARENT_OWNER="", PARENT_TABLE="TC_TIPOEMPLEADO"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_TIPEMP_FK", FK_COLUMNS="N_IDTIPOEMPLEADO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDTIPOEMPLEADO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOEMPLEADO because TC_PERSONAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOESCUELA AFTER DELETE ON TC_TIPOESCUELA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOESCUELA  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f8a4", PARENT_OWNER="", PARENT_TABLE="TC_TIPOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_TIPOESCUELA_FK1", FK_COLUMNS="N_IDTIPOESCUELA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDTIPOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOESCUELA because TC_ESCUELA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOESCUELA AFTER UPDATE ON TC_TIPOESCUELA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOESCUELA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOESCUELA  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001258d", PARENT_OWNER="", PARENT_TABLE="TC_TIPOESCUELA"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_TIPOESCUELA_FK1", FK_COLUMNS="N_IDTIPOESCUELA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDTIPOESCUELA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOESCUELA because TC_ESCUELA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOINASISTENCIAS AFTER DELETE ON TC_TIPOINASISTENCIAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOINASISTENCIAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOINASISTENCIAS  TW_ALUMNOINASISTENCIAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011cd6", PARENT_OWNER="", PARENT_TABLE="TC_TIPOINASISTENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINA_TC_TIPOINASIS_FK", FK_COLUMNS="N_IDTIPOINASISTENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINASISTENCIAS,:%Old," = "," AND") */
        TW_ALUMNOINASISTENCIAS.N_IDTIPOINASISTENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOINASISTENCIAS because TW_ALUMNOINASISTENCIAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOINASISTENCIAS AFTER UPDATE ON TC_TIPOINASISTENCIAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOINASISTENCIAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOINASISTENCIAS  TW_ALUMNOINASISTENCIAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001456f", PARENT_OWNER="", PARENT_TABLE="TC_TIPOINASISTENCIAS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINA_TC_TIPOINASIS_FK", FK_COLUMNS="N_IDTIPOINASISTENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINASISTENCIAS,:%Old," = "," AND") */
        TW_ALUMNOINASISTENCIAS.N_IDTIPOINASISTENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOINASISTENCIAS because TW_ALUMNOINASISTENCIAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOINCORPORACIONSEP AFTER DELETE ON TC_TIPOINCORPORACIONSEP for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOINCORPORACIONSEP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOINCORPORACIONSEP  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000101b7", PARENT_OWNER="", PARENT_TABLE="TC_TIPOINCORPORACIONSEP"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_TIPOINCORPO_FK1", FK_COLUMNS="N_IDTIPOINCORPORACIONSEP" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDTIPOINCORPORACIONSEP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOINCORPORACIONSEP because TC_ESCUELA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOINCORPORACIONSEP AFTER UPDATE ON TC_TIPOINCORPORACIONSEP for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOINCORPORACIONSEP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOINCORPORACIONSEP  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011ea5", PARENT_OWNER="", PARENT_TABLE="TC_TIPOINCORPORACIONSEP"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_TIPOINCORPO_FK1", FK_COLUMNS="N_IDTIPOINCORPORACIONSEP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDTIPOINCORPORACIONSEP = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOINCORPORACIONSEP because TC_ESCUELA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOINMUEBLE AFTER DELETE ON TC_TIPOINMUEBLE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOINMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOINMUEBLE  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fa60", PARENT_OWNER="", PARENT_TABLE="TC_TIPOINMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_TIPO_INM_FK", FK_COLUMNS="N_IDTIPOINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDTIPOINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOINMUEBLE because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOINMUEBLE AFTER UPDATE ON TC_TIPOINMUEBLE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOINMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOINMUEBLE  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000fd6b", PARENT_OWNER="", PARENT_TABLE="TC_TIPOINMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_TIPO_INM_FK", FK_COLUMNS="N_IDTIPOINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDTIPOINMUEBLE = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDTIPOINMUEBLE = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOMOVIMIENTO_IR AFTER DELETE ON TC_TIPOMOVIMIENTO_IR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOMOVIMIENTO_IR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOMOVIMIENTO_IR  TW_PERSONAFALTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000240da", PARENT_OWNER="", PARENT_TABLE="TC_TIPOMOVIMIENTO_IR"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_TIPOMOV_FK", FK_COLUMNS="N_IDTIPOMOVIMIENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTAS
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTAS,:%Old," = "," AND") */
        TW_PERSONAFALTAS.N_IDTIPOMOVIMIENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOMOVIMIENTO_IR because TW_PERSONAFALTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOMOVIMIENTO_IR  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOMOVIMIENTO_IR"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_TIPOMOV_FK", FK_COLUMNS="N_IDTIPOMOV" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDTIPOMOV = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOMOVIMIENTO_IR because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOMOVIMIENTO_IR AFTER UPDATE ON TC_TIPOMOVIMIENTO_IR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOMOVIMIENTO_IR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOMOVIMIENTO_IR  TW_PERSONAFALTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000253b9", PARENT_OWNER="", PARENT_TABLE="TC_TIPOMOVIMIENTO_IR"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TC_TIPOMOV_FK", FK_COLUMNS="N_IDTIPOMOVIMIENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONAFALTAS
      SET
        /* %SetFK(TW_PERSONAFALTAS,NULL) */
        TW_PERSONAFALTAS.N_IDTIPOMOVIMIENTO = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONAFALTAS,:%Old," = ",",") */
        TW_PERSONAFALTAS.N_IDTIPOMOVIMIENTO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOMOVIMIENTO_IR  TR_INASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOMOVIMIENTO_IR"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TC_TIPOMOV_FK", FK_COLUMNS="N_IDTIPOMOV" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_IDTIPOMOV = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOMOVIMIENTO_IR because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOPERSONAL AFTER DELETE ON TC_TIPOPERSONAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOPERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOPERSONAL  TC_PERSONAREEMPLAZO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000239d5", PARENT_OWNER="", PARENT_TABLE="TC_TIPOPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM_TC_TIPPERS_FK", FK_COLUMNS="N_IDTIPOPERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDTIPOPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOPERSONAL because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOPERSONAL  TR_CATEGORIAPORMOTIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAPORMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATMOTIVO_TC_TIPOPERS_FK", FK_COLUMNS="N_TIPO_PERSONAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAPORMOTIVO
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAPORMOTIVO,:%Old," = "," AND") */
        TR_CATEGORIAPORMOTIVO.N_TIPO_PERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOPERSONAL because TR_CATEGORIAPORMOTIVO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOPERSONAL AFTER UPDATE ON TC_TIPOPERSONAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOPERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOPERSONAL  TC_PERSONAREEMPLAZO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00027906", PARENT_OWNER="", PARENT_TABLE="TC_TIPOPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAREEMPLAZO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERREM_TC_TIPPERS_FK", FK_COLUMNS="N_IDTIPOPERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAREEMPLAZO
      WHERE
        /*  %JoinFKPK(TC_PERSONAREEMPLAZO,:%Old," = "," AND") */
        TC_PERSONAREEMPLAZO.N_IDTIPOPERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOPERSONAL because TC_PERSONAREEMPLAZO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOPERSONAL  TR_CATEGORIAPORMOTIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOPERSONAL"
    CHILD_OWNER="", CHILD_TABLE="TR_CATEGORIAPORMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_CATMOTIVO_TC_TIPOPERS_FK", FK_COLUMNS="N_TIPO_PERSONAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_CATEGORIAPORMOTIVO
      WHERE
        /*  %JoinFKPK(TR_CATEGORIAPORMOTIVO,:%Old," = "," AND") */
        TR_CATEGORIAPORMOTIVO.N_TIPO_PERSONAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOPERSONAL because TR_CATEGORIAPORMOTIVO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOPERSONAL_FR AFTER DELETE ON TC_TIPOPERSONAL_FR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOPERSONAL_FR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOPERSONAL_FR  TC_DIAINHABIL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fe60", PARENT_OWNER="", PARENT_TABLE="TC_TIPOPERSONAL_FR"
    CHILD_OWNER="", CHILD_TABLE="TC_DIAINHABIL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DIAINHABIL_TC_TIPOPERS_FK", FK_COLUMNS="N_IDTIPOPERSONAL_FR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DIAINHABIL
      WHERE
        /*  %JoinFKPK(TC_DIAINHABIL,:%Old," = "," AND") */
        TC_DIAINHABIL.N_IDTIPOPERSONAL_FR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOPERSONAL_FR because TC_DIAINHABIL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOPERSONAL_FR AFTER UPDATE ON TC_TIPOPERSONAL_FR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOPERSONAL_FR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOPERSONAL_FR  TC_DIAINHABIL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000ff58", PARENT_OWNER="", PARENT_TABLE="TC_TIPOPERSONAL_FR"
    CHILD_OWNER="", CHILD_TABLE="TC_DIAINHABIL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DIAINHABIL_TC_TIPOPERS_FK", FK_COLUMNS="N_IDTIPOPERSONAL_FR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DIAINHABIL
      SET
        /* %SetFK(TC_DIAINHABIL,NULL) */
        TC_DIAINHABIL.N_IDTIPOPERSONAL_FR = NULL
      WHERE
        /* %JoinFKPK(TC_DIAINHABIL,:%Old," = ",",") */
        TC_DIAINHABIL.N_IDTIPOPERSONAL_FR = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPORESPUESTA AFTER DELETE ON TC_TIPORESPUESTA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPORESPUESTA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPORESPUESTA  TR_RESPUESTADATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00036154", PARENT_OWNER="", PARENT_TABLE="TC_TIPORESPUESTA"
    CHILD_OWNER="", CHILD_TABLE="TR_RESPUESTADATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_RESPDATO_TC_TIPRES_FK", FK_COLUMNS="N_IDTIPORESPUESTA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_RESPUESTADATO
      WHERE
        /*  %JoinFKPK(TR_RESPUESTADATO,:%Old," = "," AND") */
        TR_RESPUESTADATO.N_IDTIPORESPUESTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPORESPUESTA because TR_RESPUESTADATO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPORESPUESTA  TC_DATOSESTADISTICOSBORR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPORESPUESTA"
    CHILD_OWNER="", CHILD_TABLE="TC_DATOSESTADISTICOSBORR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DATOSESTA_TC_TIPORES_FK", FK_COLUMNS="N_IDTIPORESPUESTA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DATOSESTADISTICOSBORR
      WHERE
        /*  %JoinFKPK(TC_DATOSESTADISTICOSBORR,:%Old," = "," AND") */
        TC_DATOSESTADISTICOSBORR.N_IDTIPORESPUESTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPORESPUESTA because TC_DATOSESTADISTICOSBORR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPORESPUESTA  TW_DATOSESTADISTICOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPORESPUESTA"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATEST_TC_TIPRES_FK", FK_COLUMNS="N_IDTIPORESPUESTA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_DATOSESTADISTICOS,:%Old," = "," AND") */
        TW_DATOSESTADISTICOS.N_IDTIPORESPUESTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPORESPUESTA because TW_DATOSESTADISTICOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPORESPUESTA AFTER UPDATE ON TC_TIPORESPUESTA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPORESPUESTA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPORESPUESTA  TR_RESPUESTADATO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003c6db", PARENT_OWNER="", PARENT_TABLE="TC_TIPORESPUESTA"
    CHILD_OWNER="", CHILD_TABLE="TR_RESPUESTADATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_RESPDATO_TC_TIPRES_FK", FK_COLUMNS="N_IDTIPORESPUESTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_RESPUESTADATO
      WHERE
        /*  %JoinFKPK(TR_RESPUESTADATO,:%Old," = "," AND") */
        TR_RESPUESTADATO.N_IDTIPORESPUESTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPORESPUESTA because TR_RESPUESTADATO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPORESPUESTA  TC_DATOSESTADISTICOSBORR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPORESPUESTA"
    CHILD_OWNER="", CHILD_TABLE="TC_DATOSESTADISTICOSBORR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DATOSESTA_TC_TIPORES_FK", FK_COLUMNS="N_IDTIPORESPUESTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_DATOSESTADISTICOSBORR
      WHERE
        /*  %JoinFKPK(TC_DATOSESTADISTICOSBORR,:%Old," = "," AND") */
        TC_DATOSESTADISTICOSBORR.N_IDTIPORESPUESTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPORESPUESTA because TC_DATOSESTADISTICOSBORR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPORESPUESTA  TW_DATOSESTADISTICOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPORESPUESTA"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSESTADISTICOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATEST_TC_TIPRES_FK", FK_COLUMNS="N_IDTIPORESPUESTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSESTADISTICOS
      WHERE
        /*  %JoinFKPK(TW_DATOSESTADISTICOS,:%Old," = "," AND") */
        TW_DATOSESTADISTICOS.N_IDTIPORESPUESTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPORESPUESTA because TW_DATOSESTADISTICOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOSANGRE AFTER DELETE ON TC_TIPOSANGRE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOSANGRE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOSANGRE  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00020b7f", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSANGRE"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_TIPSAN_FK", FK_COLUMNS="N_IDTIPOSANGRE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDTIPOSANGRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOSANGRE because TC_PERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOSANGRE  TC_ALUMNOCOMPLEMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSANGRE"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_TIPOSAN_FK", FK_COLUMNS="N_IDTIPOSANGRE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDTIPOSANGRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOSANGRE because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOSANGRE AFTER UPDATE ON TC_TIPOSANGRE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOSANGRE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOSANGRE  TC_PERSONAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00023fd9", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSANGRE"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TC_TIPSAN_FK", FK_COLUMNS="N_IDTIPOSANGRE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONAL
      SET
        /* %SetFK(TC_PERSONAL,NULL) */
        TC_PERSONAL.N_IDTIPOSANGRE = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONAL,:%Old," = ",",") */
        TC_PERSONAL.N_IDTIPOSANGRE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOSANGRE  TC_ALUMNOCOMPLEMENTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSANGRE"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNOCOMPLEMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNOCOMPLE_TC_TIPOSAN_FK", FK_COLUMNS="N_IDTIPOSANGRE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNOCOMPLEMENTO
      WHERE
        /*  %JoinFKPK(TC_ALUMNOCOMPLEMENTO,:%Old," = "," AND") */
        TC_ALUMNOCOMPLEMENTO.N_IDTIPOSANGRE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOSANGRE because TC_ALUMNOCOMPLEMENTO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOSFOLIOS AFTER DELETE ON TC_TIPOSFOLIOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOSFOLIOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOSFOLIOS  TW_FOLIOSASIGNADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002076d", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSFOLIOS"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPFOL_FOLASI", FK_COLUMNS="N_IDTIPOFOLIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDTIPOFOLIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOSFOLIOS because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOSFOLIOS  TR_FOLIOALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSFOLIOS"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPFOL_FOLALU", FK_COLUMNS="N_IDTIPOFOLIO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOALUMNO
      WHERE
        /*  %JoinFKPK(TR_FOLIOALUMNO,:%Old," = "," AND") */
        TR_FOLIOALUMNO.N_IDTIPOFOLIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOSFOLIOS because TR_FOLIOALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOSFOLIOS AFTER UPDATE ON TC_TIPOSFOLIOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOSFOLIOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOSFOLIOS  TW_FOLIOSASIGNADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024f56", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSFOLIOS"
    CHILD_OWNER="", CHILD_TABLE="TW_FOLIOSASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPFOL_FOLASI", FK_COLUMNS="N_IDTIPOFOLIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_FOLIOSASIGNADOS
      WHERE
        /*  %JoinFKPK(TW_FOLIOSASIGNADOS,:%Old," = "," AND") */
        TW_FOLIOSASIGNADOS.N_IDTIPOFOLIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOSFOLIOS because TW_FOLIOSASIGNADOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOSFOLIOS  TR_FOLIOALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSFOLIOS"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPFOL_FOLALU", FK_COLUMNS="N_IDTIPOFOLIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOALUMNO
      WHERE
        /*  %JoinFKPK(TR_FOLIOALUMNO,:%Old," = "," AND") */
        TR_FOLIOALUMNO.N_IDTIPOFOLIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOSFOLIOS because TR_FOLIOALUMNO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOSUPERFICIE AFTER DELETE ON TC_TIPOSUPERFICIE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOSUPERFICIE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOSUPERFICIE  TW_INMUEBLE_LOCAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001053c", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSUPERFICIE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_TIPO_SUP_FK", FK_COLUMNS="N_IDTIPOSUPERFICIE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDTIPOSUPERFICIE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOSUPERFICIE because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOSUPERFICIE AFTER UPDATE ON TC_TIPOSUPERFICIE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOSUPERFICIE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOSUPERFICIE  TW_INMUEBLE_LOCAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000127b1", PARENT_OWNER="", PARENT_TABLE="TC_TIPOSUPERFICIE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TC_TIPO_SUP_FK", FK_COLUMNS="N_IDTIPOSUPERFICIE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDTIPOSUPERFICIE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOSUPERFICIE because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOTELEFONO AFTER DELETE ON TC_TIPOTELEFONO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOTELEFONO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOTELEFONO  TW_PERSONALTELEFONOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047f94", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALTELEFONOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PER_TEL_TC_TIPOTELEFONO_FK", FK_COLUMNS="N_IDTIPOTELEFONO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALTELEFONOS
      WHERE
        /*  %JoinFKPK(TW_PERSONALTELEFONOS,:%Old," = "," AND") */
        TW_PERSONALTELEFONOS.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOTELEFONO because TW_PERSONALTELEFONOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOTELEFONO  TR_ESCUELATELEFONO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELATELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCTEL_TC_TIPTEL_FK", FK_COLUMNS="N_IDTIPOTELEFONO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELATELEFONO
      WHERE
        /*  %JoinFKPK(TR_ESCUELATELEFONO,:%Old," = "," AND") */
        TR_ESCUELATELEFONO.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOTELEFONO because TR_ESCUELATELEFONO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOTELEFONO  TW_ALUMNOCONTACTOTELEFONO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOTELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCONTEL_TC_TIPTEL_PK", FK_COLUMNS="N_IDTIPOTELEFONO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOTELEFONO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOTELEFONO,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOTELEFONO.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOTELEFONO because TW_ALUMNOCONTACTOTELEFONO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TIPOTELEFONO  TW_CONTACTOTELEFONO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTOTELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONTEL_TC_TIPTEL_FK", FK_COLUMNS="N_IDTIPOTELEFONO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTOTELEFONO
      WHERE
        /*  %JoinFKPK(TW_CONTACTOTELEFONO,:%Old," = "," AND") */
        TW_CONTACTOTELEFONO.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOTELEFONO because TW_CONTACTOTELEFONO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOTELEFONO AFTER UPDATE ON TC_TIPOTELEFONO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOTELEFONO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TIPOTELEFONO  TW_PERSONALTELEFONOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00050701", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONALTELEFONOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PER_TEL_TC_TIPOTELEFONO_FK", FK_COLUMNS="N_IDTIPOTELEFONO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONALTELEFONOS
      WHERE
        /*  %JoinFKPK(TW_PERSONALTELEFONOS,:%Old," = "," AND") */
        TW_PERSONALTELEFONOS.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOTELEFONO because TW_PERSONALTELEFONOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOTELEFONO  TR_ESCUELATELEFONO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TR_ESCUELATELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_ESCTEL_TC_TIPTEL_FK", FK_COLUMNS="N_IDTIPOTELEFONO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ESCUELATELEFONO
      WHERE
        /*  %JoinFKPK(TR_ESCUELATELEFONO,:%Old," = "," AND") */
        TR_ESCUELATELEFONO.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOTELEFONO because TR_ESCUELATELEFONO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOTELEFONO  TW_ALUMNOCONTACTOTELEFONO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOTELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCONTEL_TC_TIPTEL_PK", FK_COLUMNS="N_IDTIPOTELEFONO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOTELEFONO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOTELEFONO,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOTELEFONO.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOTELEFONO because TW_ALUMNOCONTACTOTELEFONO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TIPOTELEFONO  TW_CONTACTOTELEFONO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTELEFONO"
    CHILD_OWNER="", CHILD_TABLE="TW_CONTACTOTELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CONTEL_TC_TIPTEL_FK", FK_COLUMNS="N_IDTIPOTELEFONO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONTACTOTELEFONO
      WHERE
        /*  %JoinFKPK(TW_CONTACTOTELEFONO,:%Old," = "," AND") */
        TW_CONTACTOTELEFONO.N_IDTIPOTELEFONO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TIPOTELEFONO because TW_CONTACTOTELEFONO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOTERRENO AFTER DELETE ON TC_TIPOTERRENO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOTERRENO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOTERRENO  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fdf8", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTERRENO"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_TIPOTERREN_FK1", FK_COLUMNS="N_IDTIPOTERRENO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDTIPOTERRENO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOTERRENO because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOTERRENO AFTER UPDATE ON TC_TIPOTERRENO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOTERRENO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOTERRENO  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000ffca", PARENT_OWNER="", PARENT_TABLE="TC_TIPOTERRENO"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_TC_TIPOTERREN_FK1", FK_COLUMNS="N_IDTIPOTERRENO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDTIPOTERRENO = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDTIPOTERRENO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TIPOVIALIDAD AFTER DELETE ON TC_TIPOVIALIDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TIPOVIALIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TIPOVIALIDAD  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000106a5", PARENT_OWNER="", PARENT_TABLE="TC_TIPOVIALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_TIPOVIAL_FK", FK_COLUMNS="N_IDTIPOVIALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDTIPOVIALIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TIPOVIALIDAD because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TIPOVIALIDAD AFTER UPDATE ON TC_TIPOVIALIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TIPOVIALIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_TIPOVIALIDAD  TW_INMUEBLEDOMICILIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010f0d", PARENT_OWNER="", PARENT_TABLE="TC_TIPOVIALIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMDOM_TC_TIPOVIAL_FK", FK_COLUMNS="N_IDTIPOVIALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLEDOMICILIO
      SET
        /* %SetFK(TW_INMUEBLEDOMICILIO,NULL) */
        TW_INMUEBLEDOMICILIO.N_IDTIPOVIALIDAD = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = ",",") */
        TW_INMUEBLEDOMICILIO.N_IDTIPOVIALIDAD = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_TURNOSESCOLAR AFTER DELETE ON TC_TURNOSESCOLAR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_TURNOSESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_TURNOSESCOLAR  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000351f0", PARENT_OWNER="", PARENT_TABLE="TC_TURNOSESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_TURNOSESCOL_FK1", FK_COLUMNS="N_IDTURNOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDTURNOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TURNOSESCOLAR because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TURNOSESCOLAR  US_PLANESTUDIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TURNOSESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_PLANESTUDIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="US_PED_TURNO", FK_COLUMNS="N_IDTURNOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_PLANESTUDIODETALLE
      WHERE
        /*  %JoinFKPK(US_PLANESTUDIODETALLE,:%Old," = "," AND") */
        US_PLANESTUDIODETALLE.N_IDTURNOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TURNOSESCOLAR because US_PLANESTUDIODETALLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_TURNOSESCOLAR  US_HORARIOPLANTILLA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TURNOSESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIOPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="HORARIO_TURNO_FK", FK_COLUMNS="N_IDTURNOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIOPLANTILLA
      WHERE
        /*  %JoinFKPK(US_HORARIOPLANTILLA,:%Old," = "," AND") */
        US_HORARIOPLANTILLA.N_IDTURNOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_TURNOSESCOLAR because US_HORARIOPLANTILLA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_TURNOSESCOLAR AFTER UPDATE ON TC_TURNOSESCOLAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_TURNOSESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_TURNOSESCOLAR  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00037122", PARENT_OWNER="", PARENT_TABLE="TC_TURNOSESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_TURNOSESCOL_FK1", FK_COLUMNS="N_IDTURNOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDTURNOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TURNOSESCOLAR because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_TURNOSESCOLAR  US_PLANESTUDIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TURNOSESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_PLANESTUDIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="US_PED_TURNO", FK_COLUMNS="N_IDTURNOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_PLANESTUDIODETALLE
      SET
        /* %SetFK(US_PLANESTUDIODETALLE,NULL) */
        US_PLANESTUDIODETALLE.N_IDTURNOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(US_PLANESTUDIODETALLE,:%Old," = ",",") */
        US_PLANESTUDIODETALLE.N_IDTURNOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_TURNOSESCOLAR  US_HORARIOPLANTILLA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_TURNOSESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIOPLANTILLA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="HORARIO_TURNO_FK", FK_COLUMNS="N_IDTURNOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIOPLANTILLA
      WHERE
        /*  %JoinFKPK(US_HORARIOPLANTILLA,:%Old," = "," AND") */
        US_HORARIOPLANTILLA.N_IDTURNOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_TURNOSESCOLAR because US_HORARIOPLANTILLA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_UNIDAD AFTER DELETE ON TC_UNIDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_UNIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_UNIDAD  TC_SUBUNIDAD on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00020339", PARENT_OWNER="", PARENT_TABLE="TC_UNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_SUBUNIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_SUBUNIDAD_FK1", FK_COLUMNS="N_IDUNIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TC_SUBUNIDAD
      WHERE
        /*  %JoinFKPK(TC_SUBUNIDAD,:%Old," = "," AND") */
        TC_SUBUNIDAD.N_IDUNIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_UNIDAD because TC_SUBUNIDAD exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_UNIDAD  TW_CALENDARIOFALTASDET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_UNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_UNIDAD_FK", FK_COLUMNS="N_UNIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CALENDARIOFALTASDET
      WHERE
        /*  %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = "," AND") */
        TW_CALENDARIOFALTASDET.N_UNIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_UNIDAD because TW_CALENDARIOFALTASDET exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_UNIDAD AFTER UPDATE ON TC_UNIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_UNIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_UNIDAD  TC_SUBUNIDAD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00021ea2", PARENT_OWNER="", PARENT_TABLE="TC_UNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TC_SUBUNIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_SUBUNIDAD_FK1", FK_COLUMNS="N_IDUNIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_SUBUNIDAD
      WHERE
        /*  %JoinFKPK(TC_SUBUNIDAD,:%Old," = "," AND") */
        TC_SUBUNIDAD.N_IDUNIDAD = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_UNIDAD because TC_SUBUNIDAD exists.'
      );
    END IF;
  END IF;

  /* TC_UNIDAD  TW_CALENDARIOFALTASDET on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_UNIDAD"
    CHILD_OWNER="", CHILD_TABLE="TW_CALENDARIOFALTASDET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CALFALDET_TC_UNIDAD_FK", FK_COLUMNS="N_UNIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CALENDARIOFALTASDET
      SET
        /* %SetFK(TW_CALENDARIOFALTASDET,NULL) */
        TW_CALENDARIOFALTASDET.N_UNIDAD = NULL
      WHERE
        /* %JoinFKPK(TW_CALENDARIOFALTASDET,:%Old," = ",",") */
        TW_CALENDARIOFALTASDET.N_UNIDAD = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_URDEPARTAMENTO AFTER DELETE ON TC_URDEPARTAMENTO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_URDEPARTAMENTO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_URDEPARTAMENTO  TC_UR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e28a", PARENT_OWNER="", PARENT_TABLE="TC_URDEPARTAMENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_UR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_UR_FK1", FK_COLUMNS="N_IDURDEPARTAMENTO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_UR
      WHERE
        /*  %JoinFKPK(TC_UR,:%Old," = "," AND") */
        TC_UR.N_IDURDEPARTAMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_URDEPARTAMENTO because TC_UR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_URDEPARTAMENTO AFTER UPDATE ON TC_URDEPARTAMENTO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_URDEPARTAMENTO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_URDEPARTAMENTO  TC_UR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000fefb", PARENT_OWNER="", PARENT_TABLE="TC_URDEPARTAMENTO"
    CHILD_OWNER="", CHILD_TABLE="TC_UR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_UR_FK1", FK_COLUMNS="N_IDURDEPARTAMENTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_UR
      WHERE
        /*  %JoinFKPK(TC_UR,:%Old," = "," AND") */
        TC_UR.N_IDURDEPARTAMENTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_URDEPARTAMENTO because TC_UR exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_USACONDADOS AFTER DELETE ON TC_USACONDADOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_USACONDADOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_USACONDADOS  TC_ALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000e870", PARENT_OWNER="", PARENT_TABLE="TC_USACONDADOS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_USACONDADOS_FK", FK_COLUMNS="N_IDUSACONDADOS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ALUMNO
      WHERE
        /*  %JoinFKPK(TC_ALUMNO,:%Old," = "," AND") */
        TC_ALUMNO.N_IDUSACONDADOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_USACONDADOS because TC_ALUMNO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_USACONDADOS AFTER UPDATE ON TC_USACONDADOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_USACONDADOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_USACONDADOS  TC_ALUMNO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000eda5", PARENT_OWNER="", PARENT_TABLE="TC_USACONDADOS"
    CHILD_OWNER="", CHILD_TABLE="TC_ALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ALUMNO_TC_USACONDADOS_FK", FK_COLUMNS="N_IDUSACONDADOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_ALUMNO
      SET
        /* %SetFK(TC_ALUMNO,NULL) */
        TC_ALUMNO.N_IDUSACONDADOS = NULL
      WHERE
        /* %JoinFKPK(TC_ALUMNO,:%Old," = ",",") */
        TC_ALUMNO.N_IDUSACONDADOS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_USAESTADOS AFTER DELETE ON TC_USAESTADOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_USAESTADOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_USAESTADOS  TC_USACONDADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000eebc", PARENT_OWNER="", PARENT_TABLE="TC_USAESTADOS"
    CHILD_OWNER="", CHILD_TABLE="TC_USACONDADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_USACON_TC_USAEDOS_FK", FK_COLUMNS="N_IDUSAESTADOS" */
    SELECT count(*) INTO NUMROWS
      FROM TC_USACONDADOS
      WHERE
        /*  %JoinFKPK(TC_USACONDADOS,:%Old," = "," AND") */
        TC_USACONDADOS.N_IDUSAESTADOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_USAESTADOS because TC_USACONDADOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_USAESTADOS AFTER UPDATE ON TC_USAESTADOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_USAESTADOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_USAESTADOS  TC_USACONDADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011548", PARENT_OWNER="", PARENT_TABLE="TC_USAESTADOS"
    CHILD_OWNER="", CHILD_TABLE="TC_USACONDADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_USACON_TC_USAEDOS_FK", FK_COLUMNS="N_IDUSAESTADOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_USACONDADOS
      WHERE
        /*  %JoinFKPK(TC_USACONDADOS,:%Old," = "," AND") */
        TC_USACONDADOS.N_IDUSAESTADOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_USAESTADOS because TC_USACONDADOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_USOAULAS AFTER DELETE ON TC_USOAULAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_USOAULAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_USOAULAS  TC_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000318b1", PARENT_OWNER="", PARENT_TABLE="TC_USOAULAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_FK3", FK_COLUMNS="N_IDUSOAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDUSOAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_USOAULAS because TC_ESCUELAAULA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_USOAULAS  TC_ESCUELAAULAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_USOAULAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_FK3", FK_COLUMNS="N_IDUSOAULA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDUSOAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_USOAULAS because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_USOAULAS  US_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_USOAULAS"
    CHILD_OWNER="", CHILD_TABLE="US_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USOAULA_ESCUELAAULA_FK", FK_COLUMNS="N_IDUSOAULA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(US_ESCUELAAULA,:%Old," = "," AND") */
        US_ESCUELAAULA.N_IDUSOAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_USOAULAS because US_ESCUELAAULA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_USOAULAS AFTER UPDATE ON TC_USOAULAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_USOAULAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_USOAULAS  TC_ESCUELAAULA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00035e7a", PARENT_OWNER="", PARENT_TABLE="TC_USOAULAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_FK3", FK_COLUMNS="N_IDUSOAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDUSOAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_USOAULAS because TC_ESCUELAAULA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TC_USOAULAS  TC_ESCUELAAULAHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_USOAULAS"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_FK3", FK_COLUMNS="N_IDUSOAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDUSOAULA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_USOAULAS because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;
  END IF;

  /* TC_USOAULAS  US_ESCUELAAULA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_USOAULAS"
    CHILD_OWNER="", CHILD_TABLE="US_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USOAULA_ESCUELAAULA_FK", FK_COLUMNS="N_IDUSOAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_ESCUELAAULA
      SET
        /* %SetFK(US_ESCUELAAULA,NULL) */
        US_ESCUELAAULA.N_IDUSOAULA = NULL
      WHERE
        /* %JoinFKPK(US_ESCUELAAULA,:%Old," = ",",") */
        US_ESCUELAAULA.N_IDUSOAULA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ZONAESCOLAR AFTER DELETE ON TC_ZONAESCOLAR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ZONAESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ZONAESCOLAR  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002e8b1", PARENT_OWNER="", PARENT_TABLE="TC_ZONAESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_ZONAESCOLAR_FK1", FK_COLUMNS="N_IDZONAESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDZONAESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ZONAESCOLAR because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ZONAESCOLAR  TW_REPEVAZONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ZONAESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVAZONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVAZONA_ZONA_FK", FK_COLUMNS="N_IDZONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVAZONA
      WHERE
        /*  %JoinFKPK(TW_REPEVAZONA,:%Old," = "," AND") */
        TW_REPEVAZONA.N_IDZONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ZONAESCOLAR because TW_REPEVAZONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TC_ZONAESCOLAR  SW_VISITAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ZONAESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ZONA", FK_COLUMNS="N_ZONA" */
    SELECT count(*) INTO NUMROWS
      FROM SW_VISITAS
      WHERE
        /*  %JoinFKPK(SW_VISITAS,:%Old," = "," AND") */
        SW_VISITAS.N_ZONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ZONAESCOLAR because SW_VISITAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ZONAESCOLAR AFTER UPDATE ON TC_ZONAESCOLAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ZONAESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TC_ZONAESCOLAR  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002f38d", PARENT_OWNER="", PARENT_TABLE="TC_ZONAESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TC_ZONAESCOLAR_FK1", FK_COLUMNS="N_IDZONAESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDZONAESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TC_ZONAESCOLAR because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* TC_ZONAESCOLAR  TW_REPEVAZONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ZONAESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVAZONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVAZONA_ZONA_FK", FK_COLUMNS="N_IDZONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_REPEVAZONA
      SET
        /* %SetFK(TW_REPEVAZONA,NULL) */
        TW_REPEVAZONA.N_IDZONA = NULL
      WHERE
        /* %JoinFKPK(TW_REPEVAZONA,:%Old," = ",",") */
        TW_REPEVAZONA.N_IDZONA = :old.N_ID;
  END IF;

  /* TC_ZONAESCOLAR  SW_VISITAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TC_ZONAESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="SW_VISITAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ZONA", FK_COLUMNS="N_ZONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE SW_VISITAS
      SET
        /* %SetFK(SW_VISITAS,NULL) */
        SW_VISITAS.N_ZONA = NULL
      WHERE
        /* %JoinFKPK(SW_VISITAS,:%Old," = ",",") */
        SW_VISITAS.N_ZONA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TC_ZONAFEDERAL AFTER DELETE ON TC_ZONAFEDERAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TC_ZONAFEDERAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TC_ZONAFEDERAL  TW_INMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000ecb6", PARENT_OWNER="", PARENT_TABLE="TC_ZONAFEDERAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_ZONAFED_FK", FK_COLUMNS="N_IDZONAFED" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE,:%Old," = "," AND") */
        TW_INMUEBLE.N_IDZONAFED = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TC_ZONAFEDERAL because TW_INMUEBLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TC_ZONAFEDERAL AFTER UPDATE ON TC_ZONAFEDERAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TC_ZONAFEDERAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TC_ZONAFEDERAL  TW_INMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000e932", PARENT_OWNER="", PARENT_TABLE="TC_ZONAFEDERAL"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_ZONAFED_FK", FK_COLUMNS="N_IDZONAFED" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLE
      SET
        /* %SetFK(TW_INMUEBLE,NULL) */
        TW_INMUEBLE.N_IDZONAFED = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLE,:%Old," = ",",") */
        TW_INMUEBLE.N_IDZONAFED = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TR_INASISTENCIASNOTAS AFTER DELETE ON TR_INASISTENCIASNOTAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TR_INASISTENCIASNOTAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TR_INASISTENCIASNOTAS  TW_PERSONAFALTADIASSUP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004dff1", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTADIASSUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFALDIASSUP_TR_INANOT_FK", FK_COLUMNS="N_IDINASISNOTAS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTADIASSUP
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTADIASSUP,:%Old," = "," AND") */
        TW_PERSONAFALTADIASSUP.N_IDINASISNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_INASISTENCIASNOTAS because TW_PERSONAFALTADIASSUP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_INASISTENCIASNOTAS  TR_INASISTENCIASNOTASREL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTASREL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASNOTREL_TR_INASNOT_FK", FK_COLUMNS="N_IDINASISTENCIASNOTAS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTASREL
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTASREL,:%Old," = "," AND") */
        TR_INASISTENCIASNOTASREL.N_IDINASISTENCIASNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_INASISTENCIASNOTAS because TR_INASISTENCIASNOTASREL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_INASISTENCIASNOTAS  TW_PERSONAFALTASCOMENT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTASCOMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFALCOM_TR_INASISNOTAS_FK", FK_COLUMNS="N_IDINASISNOTAS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTASCOMENT
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTASCOMENT,:%Old," = "," AND") */
        TW_PERSONAFALTASCOMENT.N_IDINASISNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_INASISTENCIASNOTAS because TW_PERSONAFALTASCOMENT exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_INASISTENCIASNOTAS  TR_FALTASINASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TR_FALTASINASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FALTINASNOT_TR_INASISNOT_FK", FK_COLUMNS="N_IDINASISTENCIASNOTAS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FALTASINASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_FALTASINASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_FALTASINASISTENCIASNOTAS.N_IDINASISTENCIASNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_INASISTENCIASNOTAS because TR_FALTASINASISTENCIASNOTAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TR_INASISTENCIASNOTAS AFTER UPDATE ON TR_INASISTENCIASNOTAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TR_INASISTENCIASNOTAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TR_INASISTENCIASNOTAS  TW_PERSONAFALTADIASSUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00055cd5", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTADIASSUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFALDIASSUP_TR_INANOT_FK", FK_COLUMNS="N_IDINASISNOTAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTADIASSUP
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTADIASSUP,:%Old," = "," AND") */
        TW_PERSONAFALTADIASSUP.N_IDINASISNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_INASISTENCIASNOTAS because TW_PERSONAFALTADIASSUP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_INASISTENCIASNOTAS  TR_INASISTENCIASNOTASREL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTASREL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASNOTREL_TR_INASNOT_FK", FK_COLUMNS="N_IDINASISTENCIASNOTAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTASREL
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTASREL,:%Old," = "," AND") */
        TR_INASISTENCIASNOTASREL.N_IDINASISTENCIASNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_INASISTENCIASNOTAS because TR_INASISTENCIASNOTASREL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_INASISTENCIASNOTAS  TW_PERSONAFALTASCOMENT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTASCOMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFALCOM_TR_INASISNOTAS_FK", FK_COLUMNS="N_IDINASISNOTAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTASCOMENT
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTASCOMENT,:%Old," = "," AND") */
        TW_PERSONAFALTASCOMENT.N_IDINASISNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_INASISTENCIASNOTAS because TW_PERSONAFALTASCOMENT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_INASISTENCIASNOTAS  TR_FALTASINASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_INASISTENCIASNOTAS"
    CHILD_OWNER="", CHILD_TABLE="TR_FALTASINASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FALTINASNOT_TR_INASISNOT_FK", FK_COLUMNS="N_IDINASISTENCIASNOTAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FALTASINASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_FALTASINASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_FALTASINASISTENCIASNOTAS.N_IDINASISTENCIASNOTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_INASISTENCIASNOTAS because TR_FALTASINASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TR_MOVPLAZAPERSONA AFTER DELETE ON TR_MOVPLAZAPERSONA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TR_MOVPLAZAPERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TR_MOVPLAPERASIG on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00082881", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAPERASIG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVPLAPERASIG_MOVPP", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAPERASIG
      WHERE
        /*  %JoinFKPK(TR_MOVPLAPERASIG,:%Old," = "," AND") */
        TR_MOVPLAPERASIG.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TR_MOVPLAPERASIG exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TR_MOVCAN_MOVCUB on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVCAN_MOVCUB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVCUB_MOVPP", FK_COLUMNS="N_ID_MOVCUBIERTO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVCAN_MOVCUB
      WHERE
        /*  %JoinFKPK(TR_MOVCAN_MOVCUB,:%Old," = "," AND") */
        TR_MOVCAN_MOVCUB.N_ID_MOVCUBIERTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TR_MOVCAN_MOVCUB exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TR_MOVCAN_MOVCUB on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVCAN_MOVCUB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVCAN_MOVPP", FK_COLUMNS="N_ID_MOVCANDIDATO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVCAN_MOVCUB
      WHERE
        /*  %JoinFKPK(TR_MOVCAN_MOVCUB,:%Old," = "," AND") */
        TR_MOVCAN_MOVCUB.N_ID_MOVCANDIDATO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TR_MOVCAN_MOVCUB exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TR_PERSONACANDIDATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONACANDIDATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTR_MOVPLAZAPERSONA574", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONACANDIDATO
      WHERE
        /*  %JoinFKPK(TR_PERSONACANDIDATO,:%Old," = "," AND") */
        TR_PERSONACANDIDATO.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TR_PERSONACANDIDATO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TR_TRAMITEDOCUMENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_TRAMITEDOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_TRADOC_TR_MOVPLAPER_FK", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_TRAMITEDOCUMENTOS
      WHERE
        /*  %JoinFKPK(TR_TRAMITEDOCUMENTOS,:%Old," = "," AND") */
        TR_TRAMITEDOCUMENTOS.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TR_TRAMITEDOCUMENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TR_MOVPLAZAPERSONADET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_MOVPZAPE_FK", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONADET
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONADET.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TR_MOVPLAZAPERSONADET exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_MOVPLAZAPERSONA  TW_MOVPLAZAPERSONAPLAZAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TW_MOVPLAZAPERSONAPLAZAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_MOVPLAZAPERP_TR_MOVPLAZAPFK", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_MOVPLAZAPERSONAPLAZAS
      WHERE
        /*  %JoinFKPK(TW_MOVPLAZAPERSONAPLAZAS,:%Old," = "," AND") */
        TW_MOVPLAZAPERSONAPLAZAS.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_MOVPLAZAPERSONA because TW_MOVPLAZAPERSONAPLAZAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TR_MOVPLAZAPERSONA AFTER UPDATE ON TR_MOVPLAZAPERSONA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TR_MOVPLAZAPERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TR_MOVPLAZAPERSONA  TR_MOVPLAPERASIG on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00087e3d", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAPERASIG"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVPLAPERASIG_MOVPP", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAPERASIG
      WHERE
        /*  %JoinFKPK(TR_MOVPLAPERASIG,:%Old," = "," AND") */
        TR_MOVPLAPERASIG.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_MOVPLAZAPERSONA because TR_MOVPLAPERASIG exists.'
      );
    END IF;
  END IF;

  /* TR_MOVPLAZAPERSONA  TR_MOVCAN_MOVCUB on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVCAN_MOVCUB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVCUB_MOVPP", FK_COLUMNS="N_ID_MOVCUBIERTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVCAN_MOVCUB
      SET
        /* %SetFK(TR_MOVCAN_MOVCUB,NULL) */
        TR_MOVCAN_MOVCUB.N_ID_MOVCUBIERTO = NULL
      WHERE
        /* %JoinFKPK(TR_MOVCAN_MOVCUB,:%Old," = ",",") */
        TR_MOVCAN_MOVCUB.N_ID_MOVCUBIERTO = :old.N_ID;
  END IF;

  /* TR_MOVPLAZAPERSONA  TR_MOVCAN_MOVCUB on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVCAN_MOVCUB"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="MOVCAN_MOVPP", FK_COLUMNS="N_ID_MOVCANDIDATO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_MOVCAN_MOVCUB
      SET
        /* %SetFK(TR_MOVCAN_MOVCUB,NULL) */
        TR_MOVCAN_MOVCUB.N_ID_MOVCANDIDATO = NULL
      WHERE
        /* %JoinFKPK(TR_MOVCAN_MOVCUB,:%Old," = ",",") */
        TR_MOVCAN_MOVCUB.N_ID_MOVCANDIDATO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_MOVPLAZAPERSONA  TR_PERSONACANDIDATO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONACANDIDATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTR_MOVPLAZAPERSONA574", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONACANDIDATO
      WHERE
        /*  %JoinFKPK(TR_PERSONACANDIDATO,:%Old," = "," AND") */
        TR_PERSONACANDIDATO.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_MOVPLAZAPERSONA because TR_PERSONACANDIDATO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_MOVPLAZAPERSONA  TR_TRAMITEDOCUMENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_TRAMITEDOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_TRADOC_TR_MOVPLAPER_FK", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_TRAMITEDOCUMENTOS
      WHERE
        /*  %JoinFKPK(TR_TRAMITEDOCUMENTOS,:%Old," = "," AND") */
        TR_TRAMITEDOCUMENTOS.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_MOVPLAZAPERSONA because TR_TRAMITEDOCUMENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_MOVPLAZAPERSONA  TR_MOVPLAZAPERSONADET on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_MOVPZAPE_FK", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONADET
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONADET.N_IDMOVPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_MOVPLAZAPERSONA because TR_MOVPLAZAPERSONADET exists.'
      );
    END IF;
  END IF;

  /* TR_MOVPLAZAPERSONA  TW_MOVPLAZAPERSONAPLAZAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_MOVPLAZAPERSONA"
    CHILD_OWNER="", CHILD_TABLE="TW_MOVPLAZAPERSONAPLAZAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_MOVPLAZAPERP_TR_MOVPLAZAPFK", FK_COLUMNS="N_IDMOVPLAZAPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_MOVPLAZAPERSONAPLAZAS
      SET
        /* %SetFK(TW_MOVPLAZAPERSONAPLAZAS,NULL) */
        TW_MOVPLAZAPERSONAPLAZAS.N_IDMOVPLAZAPERSONA = NULL
      WHERE
        /* %JoinFKPK(TW_MOVPLAZAPERSONAPLAZAS,:%Old," = ",",") */
        TW_MOVPLAZAPERSONAPLAZAS.N_IDMOVPLAZAPERSONA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TR_PERSONAHORARIOHISTORICO AFTER DELETE ON TR_PERSONAHORARIOHISTORICO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TR_PERSONAHORARIOHISTORICO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TR_PERSONAHORARIOHISTORICO  TW_PERSONAFALTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00025d34", PARENT_OWNER="", PARENT_TABLE="TR_PERSONAHORARIOHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TR_PERSHORHIS_FK", FK_COLUMNS="N_IDPERSONAHORARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTAS
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTAS,:%Old," = "," AND") */
        TW_PERSONAFALTAS.N_IDPERSONAHORARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PERSONAHORARIOHISTORICO because TW_PERSONAFALTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_PERSONAHORARIOHISTORICO  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PERSONAHORARIOHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TR_PERSHORHIS_FK", FK_COLUMNS="N_PHORARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_PHORARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PERSONAHORARIOHISTORICO because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TR_PERSONAHORARIOHISTORICO AFTER UPDATE ON TR_PERSONAHORARIOHISTORICO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TR_PERSONAHORARIOHISTORICO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TR_PERSONAHORARIOHISTORICO  TW_PERSONAFALTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00023b5d", PARENT_OWNER="", PARENT_TABLE="TR_PERSONAHORARIOHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFAL_TR_PERSHORHIS_FK", FK_COLUMNS="N_IDPERSONAHORARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_PERSONAFALTAS
      SET
        /* %SetFK(TW_PERSONAFALTAS,NULL) */
        TW_PERSONAFALTAS.N_IDPERSONAHORARIO = NULL
      WHERE
        /* %JoinFKPK(TW_PERSONAFALTAS,:%Old," = ",",") */
        TW_PERSONAFALTAS.N_IDPERSONAHORARIO = :old.N_ID;
  END IF;

  /* TR_PERSONAHORARIOHISTORICO  TR_INASISTENCIASNOTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PERSONAHORARIOHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TR_PERSHORHIS_FK", FK_COLUMNS="N_PHORARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_INASISTENCIASNOTAS
      SET
        /* %SetFK(TR_INASISTENCIASNOTAS,NULL) */
        TR_INASISTENCIASNOTAS.N_PHORARIO = NULL
      WHERE
        /* %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = ",",") */
        TR_INASISTENCIASNOTAS.N_PHORARIO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TR_PERSONALGRUPO AFTER DELETE ON TR_PERSONALGRUPO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TR_PERSONALGRUPO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TR_PERSONALGRUPO  TR_PERSONAHORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010d68", PARENT_OWNER="", PARENT_TABLE="TR_PERSONALGRUPO"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHOR_TR_PERSGRU_FK", FK_COLUMNS="N_IDPERSONALGRUPO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIO,:%Old," = "," AND") */
        TR_PERSONAHORARIO.N_IDPERSONALGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PERSONALGRUPO because TR_PERSONAHORARIO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TR_PERSONALGRUPO AFTER UPDATE ON TR_PERSONALGRUPO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TR_PERSONALGRUPO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TR_PERSONALGRUPO  TR_PERSONAHORARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012d3a", PARENT_OWNER="", PARENT_TABLE="TR_PERSONALGRUPO"
    CHILD_OWNER="", CHILD_TABLE="TR_PERSONAHORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_PERSHOR_TR_PERSGRU_FK", FK_COLUMNS="N_IDPERSONALGRUPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_PERSONAHORARIO
      WHERE
        /*  %JoinFKPK(TR_PERSONAHORARIO,:%Old," = "," AND") */
        TR_PERSONAHORARIO.N_IDPERSONALGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PERSONALGRUPO because TR_PERSONAHORARIO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TR_PERSONALGRUPOHISTORICO AFTER DELETE ON TR_PERSONALGRUPOHISTORICO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TR_PERSONALGRUPOHISTORICO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TR_PERSONALGRUPOHISTORICO  TR_INASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001092e", PARENT_OWNER="", PARENT_TABLE="TR_PERSONALGRUPOHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TR_PERSGRH_FK", FK_COLUMNS="N_PGRUPO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_INASISTENCIASNOTAS.N_PGRUPO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PERSONALGRUPOHISTORICO because TR_INASISTENCIASNOTAS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TR_PERSONALGRUPOHISTORICO AFTER UPDATE ON TR_PERSONALGRUPOHISTORICO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TR_PERSONALGRUPOHISTORICO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TR_PERSONALGRUPOHISTORICO  TR_INASISTENCIASNOTAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00010e4c", PARENT_OWNER="", PARENT_TABLE="TR_PERSONALGRUPOHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TR_INASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INASISNOT_TR_PERSGRH_FK", FK_COLUMNS="N_PGRUPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_INASISTENCIASNOTAS
      SET
        /* %SetFK(TR_INASISTENCIASNOTAS,NULL) */
        TR_INASISTENCIASNOTAS.N_PGRUPO = NULL
      WHERE
        /* %JoinFKPK(TR_INASISTENCIASNOTAS,:%Old," = ",",") */
        TR_INASISTENCIASNOTAS.N_PGRUPO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TR_PLAZAASIGNADA AFTER DELETE ON TR_PLAZAASIGNADA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TR_PLAZAASIGNADA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TR_PLAZAASIGNADA  TW_CONCEPTOPAGO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006df76", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TW_CONCEPTOPAGO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTR_PLAZAASIGNADA247", FK_COLUMNS="N_IDAUTORIZA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONCEPTOPAGO
      WHERE
        /*  %JoinFKPK(TW_CONCEPTOPAGO,:%Old," = "," AND") */
        TW_CONCEPTOPAGO.N_IDAUTORIZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PLAZAASIGNADA because TW_CONCEPTOPAGO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_PLAZAASIGNADA  TW_CONCEPTOPAGO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TW_CONCEPTOPAGO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTR_PLAZAASIGNADA246", FK_COLUMNS="N_IDPLAZAPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CONCEPTOPAGO
      WHERE
        /*  %JoinFKPK(TW_CONCEPTOPAGO,:%Old," = "," AND") */
        TW_CONCEPTOPAGO.N_IDPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PLAZAASIGNADA because TW_CONCEPTOPAGO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_PLAZAASIGNADA  TR_MOVPLAZAPERSONADET on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_PZAASIG_FK", FK_COLUMNS="N_IDPLAZAASIGNADA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONADET
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONADET.N_IDPLAZAASIGNADA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PLAZAASIGNADA because TR_MOVPLAZAPERSONADET exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_PLAZAASIGNADA  TR_INCIDENCIAJUSTIFICAION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TR_INCIDENCIAJUSTIFICAION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INCIDJUST_TR_PZAASIG_FK", FK_COLUMNS="N_IDPERSONAPLAZAJUSTIFICA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INCIDENCIAJUSTIFICAION
      WHERE
        /*  %JoinFKPK(TR_INCIDENCIAJUSTIFICAION,:%Old," = "," AND") */
        TR_INCIDENCIAJUSTIFICAION.N_IDPERSONAPLAZAJUSTIFICA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PLAZAASIGNADA because TR_INCIDENCIAJUSTIFICAION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_PLAZAASIGNADA  TW_CARRERAMAGISTERIAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TW_CARRERAMAGISTERIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CARMAG_FK", FK_COLUMNS="N_IDPLAZAASIGNADA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CARRERAMAGISTERIAL
      WHERE
        /*  %JoinFKPK(TW_CARRERAMAGISTERIAL,:%Old," = "," AND") */
        TW_CARRERAMAGISTERIAL.N_IDPLAZAASIGNADA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PLAZAASIGNADA because TW_CARRERAMAGISTERIAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TR_PLAZAASIGNADA  TC_PERSONALPLAZAESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAES_TC_PZAASIG_FK", FK_COLUMNS="N_IDPLAZAASIGNADA" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELA,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELA.N_IDPLAZAASIGNADA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TR_PLAZAASIGNADA because TC_PERSONALPLAZAESCUELA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TR_PLAZAASIGNADA AFTER UPDATE ON TR_PLAZAASIGNADA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TR_PLAZAASIGNADA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TR_PLAZAASIGNADA  TW_CONCEPTOPAGO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00079a05", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TW_CONCEPTOPAGO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTR_PLAZAASIGNADA247", FK_COLUMNS="N_IDAUTORIZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONCEPTOPAGO
      WHERE
        /*  %JoinFKPK(TW_CONCEPTOPAGO,:%Old," = "," AND") */
        TW_CONCEPTOPAGO.N_IDAUTORIZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PLAZAASIGNADA because TW_CONCEPTOPAGO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_PLAZAASIGNADA  TW_CONCEPTOPAGO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TW_CONCEPTOPAGO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTR_PLAZAASIGNADA246", FK_COLUMNS="N_IDPLAZAPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CONCEPTOPAGO
      WHERE
        /*  %JoinFKPK(TW_CONCEPTOPAGO,:%Old," = "," AND") */
        TW_CONCEPTOPAGO.N_IDPLAZAPERSONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PLAZAASIGNADA because TW_CONCEPTOPAGO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_PLAZAASIGNADA  TR_MOVPLAZAPERSONADET on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TR_MOVPLAZAPERSONADET"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_MOVPZAPERDET_TC_PZAASIG_FK", FK_COLUMNS="N_IDPLAZAASIGNADA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_MOVPLAZAPERSONADET
      WHERE
        /*  %JoinFKPK(TR_MOVPLAZAPERSONADET,:%Old," = "," AND") */
        TR_MOVPLAZAPERSONADET.N_IDPLAZAASIGNADA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PLAZAASIGNADA because TR_MOVPLAZAPERSONADET exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_PLAZAASIGNADA  TR_INCIDENCIAJUSTIFICAION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TR_INCIDENCIAJUSTIFICAION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INCIDJUST_TR_PZAASIG_FK", FK_COLUMNS="N_IDPERSONAPLAZAJUSTIFICA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INCIDENCIAJUSTIFICAION
      WHERE
        /*  %JoinFKPK(TR_INCIDENCIAJUSTIFICAION,:%Old," = "," AND") */
        TR_INCIDENCIAJUSTIFICAION.N_IDPERSONAPLAZAJUSTIFICA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PLAZAASIGNADA because TR_INCIDENCIAJUSTIFICAION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_PLAZAASIGNADA  TW_CARRERAMAGISTERIAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TW_CARRERAMAGISTERIAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_CARMAG_FK", FK_COLUMNS="N_IDPLAZAASIGNADA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_CARRERAMAGISTERIAL
      WHERE
        /*  %JoinFKPK(TW_CARRERAMAGISTERIAL,:%Old," = "," AND") */
        TW_CARRERAMAGISTERIAL.N_IDPLAZAASIGNADA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PLAZAASIGNADA because TW_CARRERAMAGISTERIAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TR_PLAZAASIGNADA  TC_PERSONALPLAZAESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TR_PLAZAASIGNADA"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONALPLAZAESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERPZAES_TC_PZAASIG_FK", FK_COLUMNS="N_IDPLAZAASIGNADA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONALPLAZAESCUELA
      WHERE
        /*  %JoinFKPK(TC_PERSONALPLAZAESCUELA,:%Old," = "," AND") */
        TC_PERSONALPLAZAESCUELA.N_IDPLAZAASIGNADA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TR_PLAZAASIGNADA because TC_PERSONALPLAZAESCUELA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ALUMNOCICLOESCOLAR AFTER DELETE ON TW_ALUMNOCICLOESCOLAR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ALUMNOCICLOESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOPERIODOPROMEDIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000fdc39", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPERIODOPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUPERPRO_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPERIODOPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPERIODOPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOPERIODOPROMEDIO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOPERIODOPROMEDIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_NOPROMOPLANDEACCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOLIBROS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOLIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALULIBROS_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOLIBROS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOLIBROS,:%Old," = "," AND") */
        TW_ALUMNOLIBROS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOLIBROS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TMP_ASIGNACION_FOLIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TMP_ASIGNACION_FOLIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TMP_ASIG_FOL_TW_ALUMCICLO_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TMP_ASIGNACION_FOLIOS
      WHERE
        /*  %JoinFKPK(TMP_ASIGNACION_FOLIOS,:%Old," = "," AND") */
        TMP_ASIGNACION_FOLIOS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TMP_ASIGNACION_FOLIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_PROMOCONCONDICION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_PROMOCONCONDICION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PCONCOND_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PROMOCONCONDICION
      WHERE
        /*  %JoinFKPK(TW_PROMOCONCONDICION,:%Old," = "," AND") */
        TW_PROMOCONCONDICION.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_PROMOCONCONDICION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOINASISTENCIAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINA_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINASISTENCIAS,:%Old," = "," AND") */
        TW_ALUMNOINASISTENCIAS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOINASISTENCIAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOASIGNATURAPROMEDIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNATURAPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIPRO_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNATURAPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNATURAPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOASIGNATURAPROMEDIO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOASIGNATURAPROMEDIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOAPOYOREQUERIDOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOAPOYOREQUERIDOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUAPOREQ_TC_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOAPOYOREQUERIDOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOAPOYOREQUERIDOS,:%Old," = "," AND") */
        TW_ALUMNOAPOYOREQUERIDOS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOAPOYOREQUERIDOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOBAJAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAJAS_TW_ALUMNOC_FK1", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOBAJAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOCALIFICACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAL_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCALIFICACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCALIFICACIONES,:%Old," = "," AND") */
        TW_ALUMNOCALIFICACIONES.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOCALIFICACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOOBSERVACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOOBSERVACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOBS_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOOBSERVACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOOBSERVACIONES,:%Old," = "," AND") */
        TW_ALUMNOOBSERVACIONES.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOOBSERVACIONES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TR_FOLIOALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUCICESC_FOLALU", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOALUMNO
      WHERE
        /*  %JoinFKPK(TR_FOLIOALUMNO,:%Old," = "," AND") */
        TR_FOLIOALUMNO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TR_FOLIOALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOCICLOESCOLARHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ALUCICE_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLAR because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ALUMNOCICLOESCOLAR AFTER UPDATE ON TW_ALUMNOCICLOESCOLAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ALUMNOCICLOESCOLAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOPERIODOPROMEDIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00117cff", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOPERIODOPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUPERPRO_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOPERIODOPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOPERIODOPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOPERIODOPROMEDIO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOPERIODOPROMEDIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_NOPROMOPLANDEACCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_NOPROMOPLANDEACCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_NOPROPLAACC_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_NOPROMOPLANDEACCION
      WHERE
        /*  %JoinFKPK(TW_NOPROMOPLANDEACCION,:%Old," = "," AND") */
        TW_NOPROMOPLANDEACCION.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_NOPROMOPLANDEACCION exists.'
      );
    END IF;
  END IF;

  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOLIBROS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOLIBROS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALULIBROS_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOLIBROS
      SET
        /* %SetFK(TW_ALUMNOLIBROS,NULL) */
        TW_ALUMNOLIBROS.N_IDALUMNOCICLOESCOLAR = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOLIBROS,:%Old," = ",",") */
        TW_ALUMNOLIBROS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TMP_ASIGNACION_FOLIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TMP_ASIGNACION_FOLIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TMP_ASIG_FOL_TW_ALUMCICLO_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TMP_ASIGNACION_FOLIOS
      WHERE
        /*  %JoinFKPK(TMP_ASIGNACION_FOLIOS,:%Old," = "," AND") */
        TMP_ASIGNACION_FOLIOS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TMP_ASIGNACION_FOLIOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_PROMOCONCONDICION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_PROMOCONCONDICION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PCONCOND_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PROMOCONCONDICION
      WHERE
        /*  %JoinFKPK(TW_PROMOCONCONDICION,:%Old," = "," AND") */
        TW_PROMOCONCONDICION.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_PROMOCONCONDICION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOINASISTENCIAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINASISTENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINA_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINASISTENCIAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINASISTENCIAS,:%Old," = "," AND") */
        TW_ALUMNOINASISTENCIAS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOINASISTENCIAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOASIGNATURAPROMEDIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOASIGNATURAPROMEDIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUASIPRO_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOASIGNATURAPROMEDIO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOASIGNATURAPROMEDIO,:%Old," = "," AND") */
        TW_ALUMNOASIGNATURAPROMEDIO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOASIGNATURAPROMEDIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOAPOYOREQUERIDOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOAPOYOREQUERIDOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUAPOREQ_TC_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOAPOYOREQUERIDOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOAPOYOREQUERIDOS,:%Old," = "," AND") */
        TW_ALUMNOAPOYOREQUERIDOS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOAPOYOREQUERIDOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOBAJAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOBAJAS_TW_ALUMNOC_FK1", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOBAJAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOCALIFICACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCALIFICACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCAL_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCALIFICACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCALIFICACIONES,:%Old," = "," AND") */
        TW_ALUMNOCALIFICACIONES.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOCALIFICACIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOOBSERVACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOOBSERVACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUOBS_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOOBSERVACIONES
      WHERE
        /*  %JoinFKPK(TW_ALUMNOOBSERVACIONES,:%Old," = "," AND") */
        TW_ALUMNOOBSERVACIONES.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOOBSERVACIONES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TR_FOLIOALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUCICESC_FOLALU", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOALUMNO
      WHERE
        /*  %JoinFKPK(TR_FOLIOALUMNO,:%Old," = "," AND") */
        TR_FOLIOALUMNO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TR_FOLIOALUMNO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCICLOESCOLAR  TW_ALUMNOCICLOESCOLARHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLAR"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCICESCH_TC_ALUCICE_FK", FK_COLUMNS="N_IDALUMNOCICLOESCOLAR" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCICLOESCOLARHISTORICO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCICLOESCOLARHISTORICO,:%Old," = "," AND") */
        TW_ALUMNOCICLOESCOLARHISTORICO.N_IDALUMNOCICLOESCOLAR = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCICLOESCOLAR because TW_ALUMNOCICLOESCOLARHISTORICO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ALUMNOCICLOESCOLARHISTOR AFTER DELETE ON TW_ALUMNOCICLOESCOLARHISTORICO for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ALUMNOCICLOESCOLARHISTORICO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLARHISTORICO  TW_ALUMNOINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000262ba", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOINCIDENCIA_ACEH_FK", FK_COLUMNS="N_IDALCESCOLARHISTORICO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIA.N_IDALCESCOLARHISTORICO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLARHISTORICO because TW_ALUMNOINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCICLOESCOLARHISTORICO  TW_ALUMNOMOVIMIENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCE_HIST" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOMOVIMIENTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = "," AND") */
        TW_ALUMNOMOVIMIENTOS.N_IDALUMNOCE_HIST = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCICLOESCOLARHISTORICO because TW_ALUMNOMOVIMIENTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ALUMNOCICLOESCOLARHISTOR AFTER UPDATE ON TW_ALUMNOCICLOESCOLARHISTORICO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ALUMNOCICLOESCOLARHISTORICO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TW_ALUMNOCICLOESCOLARHISTORICO  TW_ALUMNOINCIDENCIA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00024f49", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOINCIDENCIA_ACEH_FK", FK_COLUMNS="N_IDALCESCOLARHISTORICO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOINCIDENCIA
      SET
        /* %SetFK(TW_ALUMNOINCIDENCIA,NULL) */
        TW_ALUMNOINCIDENCIA.N_IDALCESCOLARHISTORICO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOINCIDENCIA,:%Old," = ",",") */
        TW_ALUMNOINCIDENCIA.N_IDALCESCOLARHISTORICO = :old.N_ID;
  END IF;

  /* TW_ALUMNOCICLOESCOLARHISTORICO  TW_ALUMNOMOVIMIENTOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCICLOESCOLARHISTORICO"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOMOVIMIENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMOV_TW_ALUCICESC_FK", FK_COLUMNS="N_IDALUMNOCE_HIST" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOMOVIMIENTOS
      SET
        /* %SetFK(TW_ALUMNOMOVIMIENTOS,NULL) */
        TW_ALUMNOMOVIMIENTOS.N_IDALUMNOCE_HIST = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOMOVIMIENTOS,:%Old," = ",",") */
        TW_ALUMNOMOVIMIENTOS.N_IDALUMNOCE_HIST = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ALUMNOCONTACTOS AFTER DELETE ON TW_ALUMNOCONTACTOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ALUMNOCONTACTOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCONTACTOS  TW_ALUMNOCONTACTOCORREO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004919d", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOCORREO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCONCOR_TW_ALUCON_FK", FK_COLUMNS="N_IDALUMNOCONTACTOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOCORREO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOCORREO,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOCORREO.N_IDALUMNOCONTACTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCONTACTOS because TW_ALUMNOCONTACTOCORREO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCONTACTOS  TW_ALUMNOBAJAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOB_TW_ALUCON_PK", FK_COLUMNS="N_IDALUMNOCONTACTOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOBAJAS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = "," AND") */
        TW_ALUMNOBAJAS.N_IDALUMNOCONTACTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCONTACTOS because TW_ALUMNOBAJAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCONTACTOS  TW_ALUMNOCONTACTOTELEFONO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOTELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCONTEL_TW_ALUCON_PK", FK_COLUMNS="N_IDALUMNOCONTACTOS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOTELEFONO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOTELEFONO,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOTELEFONO.N_IDALUMNOCONTACTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCONTACTOS because TW_ALUMNOCONTACTOTELEFONO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOCONTACTOS  US_ALUMNOBAJA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBAJA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOBAJA_CONTACTOS", FK_COLUMNS="N_IDALUMNOCONTACTO" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBAJA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBAJA,:%Old," = "," AND") */
        US_ALUMNOBAJA.N_IDALUMNOCONTACTO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOCONTACTOS because US_ALUMNOBAJA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ALUMNOCONTACTOS AFTER UPDATE ON TW_ALUMNOCONTACTOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ALUMNOCONTACTOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCONTACTOS  TW_ALUMNOCONTACTOCORREO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0004c33a", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOCORREO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCONCOR_TW_ALUCON_FK", FK_COLUMNS="N_IDALUMNOCONTACTOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOCORREO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOCORREO,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOCORREO.N_IDALUMNOCONTACTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCONTACTOS because TW_ALUMNOCONTACTOCORREO exists.'
      );
    END IF;
  END IF;

  /* TW_ALUMNOCONTACTOS  TW_ALUMNOBAJAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOBAJAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUMNOB_TW_ALUCON_PK", FK_COLUMNS="N_IDALUMNOCONTACTOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOBAJAS
      SET
        /* %SetFK(TW_ALUMNOBAJAS,NULL) */
        TW_ALUMNOBAJAS.N_IDALUMNOCONTACTOS = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOBAJAS,:%Old," = ",",") */
        TW_ALUMNOBAJAS.N_IDALUMNOCONTACTOS = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOCONTACTOS  TW_ALUMNOCONTACTOTELEFONO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOCONTACTOTELEFONO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUCONTEL_TW_ALUCON_PK", FK_COLUMNS="N_IDALUMNOCONTACTOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOCONTACTOTELEFONO
      WHERE
        /*  %JoinFKPK(TW_ALUMNOCONTACTOTELEFONO,:%Old," = "," AND") */
        TW_ALUMNOCONTACTOTELEFONO.N_IDALUMNOCONTACTOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOCONTACTOS because TW_ALUMNOCONTACTOTELEFONO exists.'
      );
    END IF;
  END IF;

  /* TW_ALUMNOCONTACTOS  US_ALUMNOBAJA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOCONTACTOS"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBAJA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOBAJA_CONTACTOS", FK_COLUMNS="N_IDALUMNOCONTACTO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_ALUMNOBAJA
      SET
        /* %SetFK(US_ALUMNOBAJA,NULL) */
        US_ALUMNOBAJA.N_IDALUMNOCONTACTO = NULL
      WHERE
        /* %JoinFKPK(US_ALUMNOBAJA,:%Old," = ",",") */
        US_ALUMNOBAJA.N_IDALUMNOCONTACTO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ALUMNOINCIDENCIA AFTER DELETE ON TW_ALUMNOINCIDENCIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ALUMNOINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIAFALTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004fd8f", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCFALTA_TW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAFALTA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAFALTA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAFALTA.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIAFALTA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIAMEDIDA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCMED_TW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAMEDIDA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAMEDIDA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAMEDIDA.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIAMEDIDA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIABITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCBIT_TW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIABITACORA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIABITACORA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIABITACORA.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIABITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIADOCTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIADOCTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCDOCTOSTW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIADOCTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIADOCTOS,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIADOCTOS.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIADOCTOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ALUMNOINCIDENCIA AFTER UPDATE ON TW_ALUMNOINCIDENCIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ALUMNOINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIAFALTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0005830b", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCFALTA_TW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAFALTA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAFALTA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAFALTA.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIAFALTA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIAMEDIDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIAMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCMED_TW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIAMEDIDA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIAMEDIDA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIAMEDIDA.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIAMEDIDA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIABITACORA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCBIT_TW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIABITACORA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIABITACORA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIABITACORA.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIABITACORA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ALUMNOINCIDENCIA  TW_ALUMNOINCIDENCIADOCTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIADOCTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCDOCTOSTW_ALUINC_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIADOCTOS
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIADOCTOS,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIADOCTOS.N_IDALUMNOINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNOINCIDENCIA because TW_ALUMNOINCIDENCIADOCTOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ALUMNORECOMENDACIONES AFTER DELETE ON TW_ALUMNORECOMENDACIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ALUMNORECOMENDACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ALUMNORECOMENDACIONES  TR_ALUMNORECOMENDACIONESBLOQ on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000135cc", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNORECOMENDACIONES"
    CHILD_OWNER="", CHILD_TABLE="TR_ALUMNORECOMENDACIONESBLOQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTW_ALUMNORECOMENDACIONES23", FK_COLUMNS="N_IDALUMNORECOMENDACIONES" */
    SELECT count(*) INTO NUMROWS
      FROM TR_ALUMNORECOMENDACIONESBLOQ
      WHERE
        /*  %JoinFKPK(TR_ALUMNORECOMENDACIONESBLOQ,:%Old," = "," AND") */
        TR_ALUMNORECOMENDACIONESBLOQ.N_IDALUMNORECOMENDACIONES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ALUMNORECOMENDACIONES because TR_ALUMNORECOMENDACIONESBLOQ exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ALUMNORECOMENDACIONES AFTER UPDATE ON TW_ALUMNORECOMENDACIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ALUMNORECOMENDACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ALUMNORECOMENDACIONES  TR_ALUMNORECOMENDACIONESBLOQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014da2", PARENT_OWNER="", PARENT_TABLE="TW_ALUMNORECOMENDACIONES"
    CHILD_OWNER="", CHILD_TABLE="TR_ALUMNORECOMENDACIONESBLOQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="REFTW_ALUMNORECOMENDACIONES23", FK_COLUMNS="N_IDALUMNORECOMENDACIONES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_ALUMNORECOMENDACIONESBLOQ
      WHERE
        /*  %JoinFKPK(TR_ALUMNORECOMENDACIONESBLOQ,:%Old," = "," AND") */
        TR_ALUMNORECOMENDACIONESBLOQ.N_IDALUMNORECOMENDACIONES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ALUMNORECOMENDACIONES because TR_ALUMNORECOMENDACIONESBLOQ exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_DATOSESTADISTICOS AFTER DELETE ON TW_DATOSESTADISTICOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_DATOSESTADISTICOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_DATOSESTADISTICOS  TR_RESPUESTADATO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010af6", PARENT_OWNER="", PARENT_TABLE="TW_DATOSESTADISTICOS"
    CHILD_OWNER="", CHILD_TABLE="TR_RESPUESTADATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_RESPDATO_TW_DATEST_FK", FK_COLUMNS="N_IDDATOSESTADISTICOS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_RESPUESTADATO
      WHERE
        /*  %JoinFKPK(TR_RESPUESTADATO,:%Old," = "," AND") */
        TR_RESPUESTADATO.N_IDDATOSESTADISTICOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_DATOSESTADISTICOS because TR_RESPUESTADATO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_DATOSESTADISTICOS AFTER UPDATE ON TW_DATOSESTADISTICOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_DATOSESTADISTICOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_DATOSESTADISTICOS  TR_RESPUESTADATO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012818", PARENT_OWNER="", PARENT_TABLE="TW_DATOSESTADISTICOS"
    CHILD_OWNER="", CHILD_TABLE="TR_RESPUESTADATO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_RESPDATO_TW_DATEST_FK", FK_COLUMNS="N_IDDATOSESTADISTICOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_RESPUESTADATO
      WHERE
        /*  %JoinFKPK(TR_RESPUESTADATO,:%Old," = "," AND") */
        TR_RESPUESTADATO.N_IDDATOSESTADISTICOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_DATOSESTADISTICOS because TR_RESPUESTADATO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ENVIONOMINA AFTER DELETE ON TW_ENVIONOMINA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ENVIONOMINA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ENVIONOMINA  TR_DETALLEENVIONOMINA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010edd", PARENT_OWNER="", PARENT_TABLE="TW_ENVIONOMINA"
    CHILD_OWNER="", CHILD_TABLE="TR_DETALLEENVIONOMINA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_DETENVNOM_TW_ENVNOM_FK", FK_COLUMNS="N_IDENVIOMOMINA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_DETALLEENVIONOMINA
      WHERE
        /*  %JoinFKPK(TR_DETALLEENVIONOMINA,:%Old," = "," AND") */
        TR_DETALLEENVIONOMINA.N_IDENVIOMOMINA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ENVIONOMINA because TR_DETALLEENVIONOMINA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ENVIONOMINA AFTER UPDATE ON TW_ENVIONOMINA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ENVIONOMINA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ENVIONOMINA  TR_DETALLEENVIONOMINA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012e69", PARENT_OWNER="", PARENT_TABLE="TW_ENVIONOMINA"
    CHILD_OWNER="", CHILD_TABLE="TR_DETALLEENVIONOMINA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_DETENVNOM_TW_ENVNOM_FK", FK_COLUMNS="N_IDENVIOMOMINA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_DETALLEENVIONOMINA
      WHERE
        /*  %JoinFKPK(TR_DETALLEENVIONOMINA,:%Old," = "," AND") */
        TR_DETALLEENVIONOMINA.N_IDENVIOMOMINA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ENVIONOMINA because TR_DETALLEENVIONOMINA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ESCUELAINCIDENCIA AFTER DELETE ON TW_ESCUELAINCIDENCIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ESCUELAINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIADOCTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00062ac1", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIADOCTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCDOCTO_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIADOCTOS
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIADOCTOS,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIADOCTOS.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIADOCTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIAEVENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAEVENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCEVE_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAEVENTO
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAEVENTO,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAEVENTO.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIAEVENTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINSIDENCIAAPOYOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINSIDENCIAAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCAPO_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINSIDENCIAAPOYOS
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINSIDENCIAAPOYOS,:%Old," = "," AND") */
        TW_ESCUELAINSIDENCIAAPOYOS.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIA because TW_ESCUELAINSIDENCIAAPOYOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIABITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCBIT_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIABITACORA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIABITACORA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIABITACORA.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIABITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIAPER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TWESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAPER
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAPER.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIAPER exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ESCUELAINCIDENCIA AFTER UPDATE ON TW_ESCUELAINCIDENCIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ESCUELAINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIADOCTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0006e654", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIADOCTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCDOCTO_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIADOCTOS
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIADOCTOS,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIADOCTOS.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIADOCTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIAEVENTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAEVENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCEVE_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAEVENTO
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAEVENTO,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAEVENTO.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIAEVENTO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINSIDENCIAAPOYOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINSIDENCIAAPOYOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCAPO_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINSIDENCIAAPOYOS
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINSIDENCIAAPOYOS,:%Old," = "," AND") */
        TW_ESCUELAINSIDENCIAAPOYOS.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ESCUELAINCIDENCIA because TW_ESCUELAINSIDENCIAAPOYOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIABITACORA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCBIT_TW_ESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIABITACORA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIABITACORA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIABITACORA.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIABITACORA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_ESCUELAINCIDENCIA  TW_ESCUELAINCIDENCIAPER on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIAPER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCINCPER_TWESCINC_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIAPER
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIAPER,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIAPER.N_IDESCUELAINCIDENCIA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ESCUELAINCIDENCIA because TW_ESCUELAINCIDENCIAPER exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ESCUELAINCIDENCIABITACOR AFTER DELETE ON TW_ESCUELAINCIDENCIABITACORA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ESCUELAINCIDENCIABITACORA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIABITACORA  TW_ESCUELAINCIDENCIABITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012dde", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIABITACORA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUELAINCIDENCIABITAC_FK2", FK_COLUMNS="N_IDBITACORA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELAINCIDENCIABITACORA
      WHERE
        /*  %JoinFKPK(TW_ESCUELAINCIDENCIABITACORA,:%Old," = "," AND") */
        TW_ESCUELAINCIDENCIABITACORA.N_IDBITACORA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIABITACORA because TW_ESCUELAINCIDENCIABITACORA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ESCUELAINCIDENCIABITACOR AFTER UPDATE ON TW_ESCUELAINCIDENCIABITACORA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ESCUELAINCIDENCIABITACORA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TW_ESCUELAINCIDENCIABITACORA  TW_ESCUELAINCIDENCIABITACORA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00012bcf", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIABITACORA"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELAINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCUELAINCIDENCIABITAC_FK2", FK_COLUMNS="N_IDBITACORA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ESCUELAINCIDENCIABITACORA
      SET
        /* %SetFK(TW_ESCUELAINCIDENCIABITACORA,NULL) */
        TW_ESCUELAINCIDENCIABITACORA.N_IDBITACORA = NULL
      WHERE
        /* %JoinFKPK(TW_ESCUELAINCIDENCIABITACORA,:%Old," = ",",") */
        TW_ESCUELAINCIDENCIABITACORA.N_IDBITACORA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ESCUELAINCIDENCIAPER AFTER DELETE ON TW_ESCUELAINCIDENCIAPER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ESCUELAINCIDENCIAPER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ESCUELAINCIDENCIAPER  TW_CORRIGEEVALUACIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000118b9", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIAPER"
    CHILD_OWNER="", CHILD_TABLE="TW_CORRIGEEVALUACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COREVA_TW_ESCINCPER_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIAPERS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_CORRIGEEVALUACIONES
      WHERE
        /*  %JoinFKPK(TW_CORRIGEEVALUACIONES,:%Old," = "," AND") */
        TW_CORRIGEEVALUACIONES.N_IDESCUELAINCIDENCIAPERS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELAINCIDENCIAPER because TW_CORRIGEEVALUACIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ESCUELAINCIDENCIAPER AFTER UPDATE ON TW_ESCUELAINCIDENCIAPER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ESCUELAINCIDENCIAPER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TW_ESCUELAINCIDENCIAPER  TW_CORRIGEEVALUACIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001216e", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELAINCIDENCIAPER"
    CHILD_OWNER="", CHILD_TABLE="TW_CORRIGEEVALUACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COREVA_TW_ESCINCPER_FK", FK_COLUMNS="N_IDESCUELAINCIDENCIAPERS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_CORRIGEEVALUACIONES
      SET
        /* %SetFK(TW_CORRIGEEVALUACIONES,NULL) */
        TW_CORRIGEEVALUACIONES.N_IDESCUELAINCIDENCIAPERS = NULL
      WHERE
        /* %JoinFKPK(TW_CORRIGEEVALUACIONES,:%Old," = ",",") */
        TW_CORRIGEEVALUACIONES.N_IDESCUELAINCIDENCIAPERS = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_ESCUELALIBROS AFTER DELETE ON TW_ESCUELALIBROS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_ESCUELALIBROS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_ESCUELALIBROS  TW_ESCUELALIBROSMOVS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011656", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELALIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROSMOVS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROSMOV_TW_ESCLIB_FK", FK_COLUMNS="N_IDESCUELALIBROS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROSMOVS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROSMOVS,:%Old," = "," AND") */
        TW_ESCUELALIBROSMOVS.N_IDESCUELALIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_ESCUELALIBROS because TW_ESCUELALIBROSMOVS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_ESCUELALIBROS AFTER UPDATE ON TW_ESCUELALIBROS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_ESCUELALIBROS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_ESCUELALIBROS  TW_ESCUELALIBROSMOVS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013683", PARENT_OWNER="", PARENT_TABLE="TW_ESCUELALIBROS"
    CHILD_OWNER="", CHILD_TABLE="TW_ESCUELALIBROSMOVS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ESCLIBROSMOV_TW_ESCLIB_FK", FK_COLUMNS="N_IDESCUELALIBROS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_ESCUELALIBROSMOVS
      WHERE
        /*  %JoinFKPK(TW_ESCUELALIBROSMOVS,:%Old," = "," AND") */
        TW_ESCUELALIBROSMOVS.N_IDESCUELALIBROS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_ESCUELALIBROS because TW_ESCUELALIBROSMOVS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_FLUJOBITACORA AFTER DELETE ON TW_FLUJOBITACORA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_FLUJOBITACORA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_FLUJOBITACORA  TW_FLUJO_DATOS_COMPLEMENT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011da8", PARENT_OWNER="", PARENT_TABLE="TW_FLUJOBITACORA"
    CHILD_OWNER="", CHILD_TABLE="TW_FLUJO_DATOS_COMPLEMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FLUJO_DATOS_COMPLEMENT_FK1", FK_COLUMNS="N_IDFLUJOBITACORA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_FLUJO_DATOS_COMPLEMENT
      WHERE
        /*  %JoinFKPK(TW_FLUJO_DATOS_COMPLEMENT,:%Old," = "," AND") */
        TW_FLUJO_DATOS_COMPLEMENT.N_IDFLUJOBITACORA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_FLUJOBITACORA because TW_FLUJO_DATOS_COMPLEMENT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_FLUJOBITACORA AFTER UPDATE ON TW_FLUJOBITACORA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_FLUJOBITACORA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TW_FLUJOBITACORA  TW_FLUJO_DATOS_COMPLEMENT on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00012500", PARENT_OWNER="", PARENT_TABLE="TW_FLUJOBITACORA"
    CHILD_OWNER="", CHILD_TABLE="TW_FLUJO_DATOS_COMPLEMENT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_FLUJO_DATOS_COMPLEMENT_FK1", FK_COLUMNS="N_IDFLUJOBITACORA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_FLUJO_DATOS_COMPLEMENT
      SET
        /* %SetFK(TW_FLUJO_DATOS_COMPLEMENT,NULL) */
        TW_FLUJO_DATOS_COMPLEMENT.N_IDFLUJOBITACORA = NULL
      WHERE
        /* %JoinFKPK(TW_FLUJO_DATOS_COMPLEMENT,:%Old," = ",",") */
        TW_FLUJO_DATOS_COMPLEMENT.N_IDFLUJOBITACORA = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_FOLIOSASIGNADOS AFTER DELETE ON TW_FOLIOSASIGNADOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_FOLIOSASIGNADOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_FOLIOSASIGNADOS  TMP_ASIGNACION_FOLIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001178e", PARENT_OWNER="", PARENT_TABLE="TW_FOLIOSASIGNADOS"
    CHILD_OWNER="", CHILD_TABLE="TMP_ASIGNACION_FOLIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TMP_ASIG_FOL_TW_FOL_ASIG_FK", FK_COLUMNS="N_IDFOLIOSASIGNADOS" */
    SELECT count(*) INTO NUMROWS
      FROM TMP_ASIGNACION_FOLIOS
      WHERE
        /*  %JoinFKPK(TMP_ASIGNACION_FOLIOS,:%Old," = "," AND") */
        TMP_ASIGNACION_FOLIOS.N_IDFOLIOSASIGNADOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_FOLIOSASIGNADOS because TMP_ASIGNACION_FOLIOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_FOLIOSASIGNADOS AFTER UPDATE ON TW_FOLIOSASIGNADOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_FOLIOSASIGNADOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_FOLIOSASIGNADOS  TMP_ASIGNACION_FOLIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014018", PARENT_OWNER="", PARENT_TABLE="TW_FOLIOSASIGNADOS"
    CHILD_OWNER="", CHILD_TABLE="TMP_ASIGNACION_FOLIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TMP_ASIG_FOL_TW_FOL_ASIG_FK", FK_COLUMNS="N_IDFOLIOSASIGNADOS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TMP_ASIGNACION_FOLIOS
      WHERE
        /*  %JoinFKPK(TMP_ASIGNACION_FOLIOS,:%Old," = "," AND") */
        TMP_ASIGNACION_FOLIOS.N_IDFOLIOSASIGNADOS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_FOLIOSASIGNADOS because TMP_ASIGNACION_FOLIOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_INMUEBLE AFTER DELETE ON TW_INMUEBLE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_INMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TW_INMUEBLE_IMAGEN on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000992b7", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_IMAGEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_IMAGEN_TW_INM_FK1", FK_COLUMNS="N_INMUEBLE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_IMAGEN
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_IMAGEN,:%Old," = "," AND") */
        TW_INMUEBLE_IMAGEN.N_INMUEBLE_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TW_INMUEBLE_IMAGEN exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TW_INMUEBLEDOMICILIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="N_IDINMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLEDOMICILIO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = "," AND") */
        TW_INMUEBLEDOMICILIO.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TW_INMUEBLEDOMICILIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TC_ESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TW_INMUEBLE_FK1", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TC_ESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TW_INMUEBLE_LOCAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TW_INMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TW_INMUEBLECONTACTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLECONTACTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMCONT_TW_INMUEBLE", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLECONTACTO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLECONTACTO,:%Old," = "," AND") */
        TW_INMUEBLECONTACTO.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TW_INMUEBLECONTACTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TR_INMUEBLEAULAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEAULAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUAULA_TW_INMUE_FK", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEAULAS
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEAULAS,:%Old," = "," AND") */
        TR_INMUEBLEAULAS.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TR_INMUEBLEAULAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TW_IMUEBLESITUACIONHIS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_IMUEBLESITUACIONHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_IMUEBLESITUACIONHIS
      WHERE
        /*  %JoinFKPK(TW_IMUEBLESITUACIONHIS,:%Old," = "," AND") */
        TW_IMUEBLESITUACIONHIS.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TW_IMUEBLESITUACIONHIS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TC_DOCTOINMUEBLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCTOINMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOINM_INMUE_FK", FK_COLUMNS="N_IDUNMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCTOINMUEBLE
      WHERE
        /*  %JoinFKPK(TC_DOCTOINMUEBLE,:%Old," = "," AND") */
        TC_DOCTOINMUEBLE.N_IDUNMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TC_DOCTOINMUEBLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE  TW_INMUEBLESERVICIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLESERVICIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLESER_TW_INMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLESERVICIOS
      WHERE
        /*  %JoinFKPK(TW_INMUEBLESERVICIOS,:%Old," = "," AND") */
        TW_INMUEBLESERVICIOS.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE because TW_INMUEBLESERVICIOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_INMUEBLE AFTER UPDATE ON TW_INMUEBLE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_INMUEBLE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TW_INMUEBLE_IMAGEN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000a7bfe", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_IMAGEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_IMAGEN_TW_INM_FK1", FK_COLUMNS="N_INMUEBLE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_IMAGEN
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_IMAGEN,:%Old," = "," AND") */
        TW_INMUEBLE_IMAGEN.N_INMUEBLE_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TW_INMUEBLE_IMAGEN exists.'
      );
    END IF;
  END IF;

  /* TW_INMUEBLE  TW_INMUEBLEDOMICILIO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLEDOMICILIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="N_IDINMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_INMUEBLEDOMICILIO
      SET
        /* %SetFK(TW_INMUEBLEDOMICILIO,NULL) */
        TW_INMUEBLEDOMICILIO.N_IDINMUEBLE = NULL
      WHERE
        /* %JoinFKPK(TW_INMUEBLEDOMICILIO,:%Old," = ",",") */
        TW_INMUEBLEDOMICILIO.N_IDINMUEBLE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TC_ESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELA_TW_INMUEBLE_FK1", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELA
      WHERE
        /*  %JoinFKPK(TC_ESCUELA,:%Old," = "," AND") */
        TC_ESCUELA.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TC_ESCUELA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TW_INMUEBLE_LOCAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLE_LOCAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INM_LOC_TW_INMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLE_LOCAL
      WHERE
        /*  %JoinFKPK(TW_INMUEBLE_LOCAL,:%Old," = "," AND") */
        TW_INMUEBLE_LOCAL.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TW_INMUEBLE_LOCAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TW_INMUEBLECONTACTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLECONTACTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMCONT_TW_INMUEBLE", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLECONTACTO
      WHERE
        /*  %JoinFKPK(TW_INMUEBLECONTACTO,:%Old," = "," AND") */
        TW_INMUEBLECONTACTO.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TW_INMUEBLECONTACTO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TR_INMUEBLEAULAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEAULAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUAULA_TW_INMUE_FK", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEAULAS
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEAULAS,:%Old," = "," AND") */
        TR_INMUEBLEAULAS.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TR_INMUEBLEAULAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TW_IMUEBLESITUACIONHIS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_IMUEBLESITUACIONHIS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_IMUEBLESITUACIONHIS
      WHERE
        /*  %JoinFKPK(TW_IMUEBLESITUACIONHIS,:%Old," = "," AND") */
        TW_IMUEBLESITUACIONHIS.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TW_IMUEBLESITUACIONHIS exists.'
      );
    END IF;
  END IF;

  /* TW_INMUEBLE  TC_DOCTOINMUEBLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCTOINMUEBLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_DOCTOINM_INMUE_FK", FK_COLUMNS="N_IDUNMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_DOCTOINMUEBLE
      SET
        /* %SetFK(TC_DOCTOINMUEBLE,NULL) */
        TC_DOCTOINMUEBLE.N_IDUNMUEBLE = NULL
      WHERE
        /* %JoinFKPK(TC_DOCTOINMUEBLE,:%Old," = ",",") */
        TC_DOCTOINMUEBLE.N_IDUNMUEBLE = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE  TW_INMUEBLESERVICIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE"
    CHILD_OWNER="", CHILD_TABLE="TW_INMUEBLESERVICIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_INMUEBLESER_TW_INMUEBLE_FK", FK_COLUMNS="N_IDINMUEBLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_INMUEBLESERVICIOS
      WHERE
        /*  %JoinFKPK(TW_INMUEBLESERVICIOS,:%Old," = "," AND") */
        TW_INMUEBLESERVICIOS.N_IDINMUEBLE = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE because TW_INMUEBLESERVICIOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_INMUEBLE_LOCAL AFTER DELETE ON TW_INMUEBLE_LOCAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_INMUEBLE_LOCAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE_LOCAL  TC_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006b7fa", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_FK6", FK_COLUMNS="N_IDINMUEBLELOCAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE_LOCAL because TC_ESCUELAAULA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE_LOCAL  TR_INMUEBLEESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUEBLEESCUELA_TW_INM_FK1", FK_COLUMNS="N_IDINMUEBLELOCAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEESCUELA
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEESCUELA,:%Old," = "," AND") */
        TR_INMUEBLEESCUELA.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE_LOCAL because TR_INMUEBLEESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE_LOCAL  TC_ESCUELAAULAHISTORICO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_FK6", FK_COLUMNS="N_IDINMUEBLELOCAL" */
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE_LOCAL because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE_LOCAL  US_ESCUELAAULA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="US_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INMUEBLELOCAL_ESCUELAAULA_FK", FK_COLUMNS="N_IDINMUEBLELOCAL" */
    SELECT count(*) INTO NUMROWS
      FROM US_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(US_ESCUELAAULA,:%Old," = "," AND") */
        US_ESCUELAAULA.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE_LOCAL because US_ESCUELAAULA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE_LOCAL  TR_INMUEBLE_LOCAL_CT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LOCAL_INM_FK", FK_COLUMNS="N_IDINMUEBLE_LOCAL" */
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLE_LOCAL_CT
      WHERE
        /*  %JoinFKPK(TR_INMUEBLE_LOCAL_CT,:%Old," = "," AND") */
        TR_INMUEBLE_LOCAL_CT.N_IDINMUEBLE_LOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE_LOCAL because TR_INMUEBLE_LOCAL_CT exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_INMUEBLE_LOCAL  TW_LOCAL_IMAGEN on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TW_LOCAL_IMAGEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_LOCAL_IMAGEN_TW_INMUEB_FK1", FK_COLUMNS="N_LOCAL_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_LOCAL_IMAGEN
      WHERE
        /*  %JoinFKPK(TW_LOCAL_IMAGEN,:%Old," = "," AND") */
        TW_LOCAL_IMAGEN.N_LOCAL_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_INMUEBLE_LOCAL because TW_LOCAL_IMAGEN exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_INMUEBLE_LOCAL AFTER UPDATE ON TW_INMUEBLE_LOCAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_INMUEBLE_LOCAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE_LOCAL  TC_ESCUELAAULA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000758dc", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULA_FK6", FK_COLUMNS="N_IDINMUEBLELOCAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULA
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULA,:%Old," = "," AND") */
        TC_ESCUELAAULA.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE_LOCAL because TC_ESCUELAAULA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE_LOCAL  TR_INMUEBLEESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLEESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_INMUEBLEESCUELA_TW_INM_FK1", FK_COLUMNS="N_IDINMUEBLELOCAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLEESCUELA
      WHERE
        /*  %JoinFKPK(TR_INMUEBLEESCUELA,:%Old," = "," AND") */
        TR_INMUEBLEESCUELA.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE_LOCAL because TR_INMUEBLEESCUELA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE_LOCAL  TC_ESCUELAAULAHISTORICO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TC_ESCUELAAULAHISTORICO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_ESCUELAAULAHIS_FK6", FK_COLUMNS="N_IDINMUEBLELOCAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TC_ESCUELAAULAHISTORICO
      WHERE
        /*  %JoinFKPK(TC_ESCUELAAULAHISTORICO,:%Old," = "," AND") */
        TC_ESCUELAAULAHISTORICO.N_IDINMUEBLELOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE_LOCAL because TC_ESCUELAAULAHISTORICO exists.'
      );
    END IF;
  END IF;

  /* TW_INMUEBLE_LOCAL  US_ESCUELAAULA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="US_ESCUELAAULA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INMUEBLELOCAL_ESCUELAAULA_FK", FK_COLUMNS="N_IDINMUEBLELOCAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_ESCUELAAULA
      SET
        /* %SetFK(US_ESCUELAAULA,NULL) */
        US_ESCUELAAULA.N_IDINMUEBLELOCAL = NULL
      WHERE
        /* %JoinFKPK(US_ESCUELAAULA,:%Old," = ",",") */
        US_ESCUELAAULA.N_IDINMUEBLELOCAL = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE_LOCAL  TR_INMUEBLE_LOCAL_CT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TR_INMUEBLE_LOCAL_CT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LOCAL_INM_FK", FK_COLUMNS="N_IDINMUEBLE_LOCAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_INMUEBLE_LOCAL_CT
      WHERE
        /*  %JoinFKPK(TR_INMUEBLE_LOCAL_CT,:%Old," = "," AND") */
        TR_INMUEBLE_LOCAL_CT.N_IDINMUEBLE_LOCAL = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE_LOCAL because TR_INMUEBLE_LOCAL_CT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_INMUEBLE_LOCAL  TW_LOCAL_IMAGEN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLE_LOCAL"
    CHILD_OWNER="", CHILD_TABLE="TW_LOCAL_IMAGEN"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_LOCAL_IMAGEN_TW_INMUEB_FK1", FK_COLUMNS="N_LOCAL_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_LOCAL_IMAGEN
      WHERE
        /*  %JoinFKPK(TW_LOCAL_IMAGEN,:%Old," = "," AND") */
        TW_LOCAL_IMAGEN.N_LOCAL_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_INMUEBLE_LOCAL because TW_LOCAL_IMAGEN exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_INMUEBLESERVICIOS AFTER DELETE ON TW_INMUEBLESERVICIOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_INMUEBLESERVICIOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_INMUEBLESERVICIOS  TW_SERVICIODETALLE on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0000bf7d", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLESERVICIOS"
    CHILD_OWNER="", CHILD_TABLE="TW_SERVICIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SERDET_TW_INMSER_FK", FK_COLUMNS="N_IDINMUEBLESERVICIO" */
    DELETE FROM TW_SERVICIODETALLE
      WHERE
        /*  %JoinFKPK(TW_SERVICIODETALLE,:%Old," = "," AND") */
        TW_SERVICIODETALLE.N_IDINMUEBLESERVICIO = :old.N_ID;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_INMUEBLESERVICIOS AFTER UPDATE ON TW_INMUEBLESERVICIOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_INMUEBLESERVICIOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TW_INMUEBLESERVICIOS  TW_SERVICIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0001112e", PARENT_OWNER="", PARENT_TABLE="TW_INMUEBLESERVICIOS"
    CHILD_OWNER="", CHILD_TABLE="TW_SERVICIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_SERDET_TW_INMSER_FK", FK_COLUMNS="N_IDINMUEBLESERVICIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_SERVICIODETALLE
      SET
        /* %SetFK(TW_SERVICIODETALLE,NULL) */
        TW_SERVICIODETALLE.N_IDINMUEBLESERVICIO = NULL
      WHERE
        /* %JoinFKPK(TW_SERVICIODETALLE,:%Old," = ",",") */
        TW_SERVICIODETALLE.N_IDINMUEBLESERVICIO = :old.N_ID;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_PERSONAFALTAS AFTER DELETE ON TW_PERSONAFALTAS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_PERSONAFALTAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_PERSONAFALTAS  TR_FALTASINASISTENCIASNOTAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00025c97", PARENT_OWNER="", PARENT_TABLE="TW_PERSONAFALTAS"
    CHILD_OWNER="", CHILD_TABLE="TR_FALTASINASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FALTINASNOT_TW_PERSFAL_FK", FK_COLUMNS="N_IDFALTASINASISTENCIAS" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FALTASINASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_FALTASINASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_FALTASINASISTENCIASNOTAS.N_IDFALTASINASISTENCIAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_PERSONAFALTAS because TR_FALTASINASISTENCIASNOTAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_PERSONAFALTAS  TW_PERSONAFALTASJUSTIFICA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_PERSONAFALTAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTASJUSTIFICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFALJUS_TW_PERFAL_FK", FK_COLUMNS="N_IDPERSONAFALTAS" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTASJUSTIFICA
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTASJUSTIFICA,:%Old," = "," AND") */
        TW_PERSONAFALTASJUSTIFICA.N_IDPERSONAFALTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_PERSONAFALTAS because TW_PERSONAFALTASJUSTIFICA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_PERSONAFALTAS AFTER UPDATE ON TW_PERSONAFALTAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_PERSONAFALTAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_PERSONAFALTAS  TR_FALTASINASISTENCIASNOTAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002a351", PARENT_OWNER="", PARENT_TABLE="TW_PERSONAFALTAS"
    CHILD_OWNER="", CHILD_TABLE="TR_FALTASINASISTENCIASNOTAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FALTINASNOT_TW_PERSFAL_FK", FK_COLUMNS="N_IDFALTASINASISTENCIAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_FALTASINASISTENCIASNOTAS
      WHERE
        /*  %JoinFKPK(TR_FALTASINASISTENCIASNOTAS,:%Old," = "," AND") */
        TR_FALTASINASISTENCIASNOTAS.N_IDFALTASINASISTENCIAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_PERSONAFALTAS because TR_FALTASINASISTENCIASNOTAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_PERSONAFALTAS  TW_PERSONAFALTASJUSTIFICA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_PERSONAFALTAS"
    CHILD_OWNER="", CHILD_TABLE="TW_PERSONAFALTASJUSTIFICA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PERFALJUS_TW_PERFAL_FK", FK_COLUMNS="N_IDPERSONAFALTAS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PERSONAFALTASJUSTIFICA
      WHERE
        /*  %JoinFKPK(TW_PERSONAFALTASJUSTIFICA,:%Old," = "," AND") */
        TW_PERSONAFALTASJUSTIFICA.N_IDPERSONAFALTAS = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_PERSONAFALTAS because TW_PERSONAFALTASJUSTIFICA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_PROMOCONCONDICION AFTER DELETE ON TW_PROMOCONCONDICION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_PROMOCONCONDICION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_PROMOCONCONDICION  TW_PROMOCONCONDICIONDOC on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012180", PARENT_OWNER="", PARENT_TABLE="TW_PROMOCONCONDICION"
    CHILD_OWNER="", CHILD_TABLE="TW_PROMOCONCONDICIONDOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PCONCONDOC_TW_PCONCON_FK", FK_COLUMNS="N_IDPROMOCONCONDICION" */
    SELECT count(*) INTO NUMROWS
      FROM TW_PROMOCONCONDICIONDOC
      WHERE
        /*  %JoinFKPK(TW_PROMOCONCONDICIONDOC,:%Old," = "," AND") */
        TW_PROMOCONCONDICIONDOC.N_IDPROMOCONCONDICION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_PROMOCONCONDICION because TW_PROMOCONCONDICIONDOC exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_PROMOCONCONDICION AFTER UPDATE ON TW_PROMOCONCONDICION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_PROMOCONCONDICION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_PROMOCONCONDICION  TW_PROMOCONCONDICIONDOC on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013d7f", PARENT_OWNER="", PARENT_TABLE="TW_PROMOCONCONDICION"
    CHILD_OWNER="", CHILD_TABLE="TW_PROMOCONCONDICIONDOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_PCONCONDOC_TW_PCONCON_FK", FK_COLUMNS="N_IDPROMOCONCONDICION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_PROMOCONCONDICIONDOC
      WHERE
        /*  %JoinFKPK(TW_PROMOCONCONDICIONDOC,:%Old," = "," AND") */
        TW_PROMOCONCONDICIONDOC.N_IDPROMOCONCONDICION = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_PROMOCONCONDICION because TW_PROMOCONCONDICIONDOC exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_REPEVA AFTER DELETE ON TW_REPEVA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_REPEVA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_REPEVA  TW_REPEVAZONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000f12a", PARENT_OWNER="", PARENT_TABLE="TW_REPEVA"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVAZONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVAZONA_REPEVA_FK", FK_COLUMNS="N_IDREPEVA" */
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVAZONA
      WHERE
        /*  %JoinFKPK(TW_REPEVAZONA,:%Old," = "," AND") */
        TW_REPEVAZONA.N_IDREPEVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_REPEVA because TW_REPEVAZONA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_REPEVA AFTER UPDATE ON TW_REPEVA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_REPEVA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_REPEVA  TW_REPEVAZONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011177", PARENT_OWNER="", PARENT_TABLE="TW_REPEVA"
    CHILD_OWNER="", CHILD_TABLE="TW_REPEVAZONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_REPEVAZONA_REPEVA_FK", FK_COLUMNS="N_IDREPEVA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_REPEVAZONA
      WHERE
        /*  %JoinFKPK(TW_REPEVAZONA,:%Old," = "," AND") */
        TW_REPEVAZONA.N_IDREPEVA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_REPEVA because TW_REPEVAZONA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_REPEVAZONA AFTER DELETE ON TW_REPEVAZONA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_REPEVAZONA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_REPEVAZONA  TR_REPEVAZONACT on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000101e1", PARENT_OWNER="", PARENT_TABLE="TW_REPEVAZONA"
    CHILD_OWNER="", CHILD_TABLE="TR_REPEVAZONACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REPEVAZONACT_ZONA_FK", FK_COLUMNS="N_IDREPEVAZONA" */
    SELECT count(*) INTO NUMROWS
      FROM TR_REPEVAZONACT
      WHERE
        /*  %JoinFKPK(TR_REPEVAZONACT,:%Old," = "," AND") */
        TR_REPEVAZONACT.N_IDREPEVAZONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_REPEVAZONA because TR_REPEVAZONACT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_REPEVAZONA AFTER UPDATE ON TW_REPEVAZONA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_REPEVAZONA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_REPEVAZONA  TR_REPEVAZONACT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012205", PARENT_OWNER="", PARENT_TABLE="TW_REPEVAZONA"
    CHILD_OWNER="", CHILD_TABLE="TR_REPEVAZONACT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_REPEVAZONACT_ZONA_FK", FK_COLUMNS="N_IDREPEVAZONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_REPEVAZONACT
      WHERE
        /*  %JoinFKPK(TR_REPEVAZONACT,:%Old," = "," AND") */
        TR_REPEVAZONACT.N_IDREPEVAZONA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_REPEVAZONA because TR_REPEVAZONACT exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_REPORTESESPECIALES AFTER DELETE ON TW_REPORTESESPECIALES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_REPORTESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_REPORTESESPECIALES  TW_DATOSREPORTESESPECIALES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001294c", PARENT_OWNER="", PARENT_TABLE="TW_REPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSREPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATREPESP_TW_REPESP_FK", FK_COLUMNS="N_IDTWREPORTESESPECIALES" */
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSREPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_DATOSREPORTESESPECIALES,:%Old," = "," AND") */
        TW_DATOSREPORTESESPECIALES.N_IDTWREPORTESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_REPORTESESPECIALES because TW_DATOSREPORTESESPECIALES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_REPORTESESPECIALES AFTER UPDATE ON TW_REPORTESESPECIALES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_REPORTESESPECIALES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_REPORTESESPECIALES  TW_DATOSREPORTESESPECIALES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014b8b", PARENT_OWNER="", PARENT_TABLE="TW_REPORTESESPECIALES"
    CHILD_OWNER="", CHILD_TABLE="TW_DATOSREPORTESESPECIALES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_DATREPESP_TW_REPESP_FK", FK_COLUMNS="N_IDTWREPORTESESPECIALES" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_DATOSREPORTESESPECIALES
      WHERE
        /*  %JoinFKPK(TW_DATOSREPORTESESPECIALES,:%Old," = "," AND") */
        TW_DATOSREPORTESESPECIALES.N_IDTWREPORTESESPECIALES = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_REPORTESESPECIALES because TW_DATOSREPORTESESPECIALES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_TW_USER AFTER DELETE ON TW_USER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on TW_USER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* TW_USER  US_GRUPOTALLER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0024e83c", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_GRUPOTALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOTALLER_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_GRUPOTALLER
      WHERE
        /*  %JoinFKPK(US_GRUPOTALLER,:%Old," = "," AND") */
        US_GRUPOTALLER.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_GRUPOTALLER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TC_BITACORATIPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TC_BITACORATIPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITTIP_TW_USER", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_BITACORATIPO
      WHERE
        /*  %JoinFKPK(TC_BITACORATIPO,:%Old," = "," AND") */
        TC_BITACORATIPO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TC_BITACORATIPO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_USER_GROUP on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_USER_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USER_GROUP_TW_USER_FK", FK_COLUMNS="N_USER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USER_GROUP
      WHERE
        /*  %JoinFKPK(TW_USER_GROUP,:%Old," = "," AND") */
        TW_USER_GROUP.N_USER_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_USER_GROUP exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_ASPECTOASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_ASPECTOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ASPECTOASIGNATURA_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_ASPECTOASIGNATURA
      WHERE
        /*  %JoinFKPK(US_ASPECTOASIGNATURA,:%Old," = "," AND") */
        US_ASPECTOASIGNATURA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_ASPECTOASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_EVALUACIONHERRAMIENTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_EVALUACIONHERRAMIENTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EVALHERR_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_EVALUACIONHERRAMIENTA
      WHERE
        /*  %JoinFKPK(US_EVALUACIONHERRAMIENTA,:%Old," = "," AND") */
        US_EVALUACIONHERRAMIENTA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_EVALUACIONHERRAMIENTA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_COMUNICADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMUNICADOS_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOS,:%Old," = "," AND") */
        TW_COMUNICADOS.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_COMUNICADOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_DOCUMENTO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_DOCUMENTO_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTO
      WHERE
        /*  %JoinFKPK(US_DOCUMENTO,:%Old," = "," AND") */
        US_DOCUMENTO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_DOCUMENTO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TC_PERSONAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TC_PERSONAL
      WHERE
        /*  %JoinFKPK(TC_PERSONAL,:%Old," = "," AND") */
        TC_PERSONAL.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TC_PERSONAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_PROMEDIOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOCICLOESC_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(US_PROMEDIOCICLOESCOLAR,:%Old," = "," AND") */
        US_PROMEDIOCICLOESCOLAR.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_PROMEDIOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_SOLICITUDCAMBIOCALIFICACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_EJECUTACAMBIO_FK", FK_COLUMNS="N_IDUSEREJECUTA" */
    SELECT count(*) INTO NUMROWS
      FROM US_SOLICITUDCAMBIOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = "," AND") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSEREJECUTA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_SOLICITUDCAMBIOCALIFICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_SOLICITUDCAMBIOCALIFICACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_AUTORIZACAMBIO_FK", FK_COLUMNS="N_IDUSERAUTORIZA" */
    SELECT count(*) INTO NUMROWS
      FROM US_SOLICITUDCAMBIOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = "," AND") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSERAUTORIZA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_SOLICITUDCAMBIOCALIFICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_SOLICITUDCAMBIOCALIFICACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_SOLICITACAMBIO_FK", FK_COLUMNS="N_IDUSERSOLICITA" */
    SELECT count(*) INTO NUMROWS
      FROM US_SOLICITUDCAMBIOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = "," AND") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSERSOLICITA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_SOLICITUDCAMBIOCALIFICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TR_VINCULARALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TR_VINCULARALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_VINCULARALUMNO_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
    SELECT count(*) INTO NUMROWS
      FROM TR_VINCULARALUMNO
      WHERE
        /*  %JoinFKPK(TR_VINCULARALUMNO,:%Old," = "," AND") */
        TR_VINCULARALUMNO.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TR_VINCULARALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_DOCUMENTOSINSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTOSINSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="DOCUMENTOSINSCRIPCION_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTOSINSCRIPCION
      WHERE
        /*  %JoinFKPK(US_DOCUMENTOSINSCRIPCION,:%Old," = "," AND") */
        US_DOCUMENTOSINSCRIPCION.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_DOCUMENTOSINSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_EXAMENGENERAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGENERAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGEN_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGENERAL
      WHERE
        /*  %JoinFKPK(US_EXAMENGENERAL,:%Old," = "," AND") */
        US_EXAMENGENERAL.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_EXAMENGENERAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_EXAMENGRALNIVEL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGRALNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGRALNIVEL_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGRALNIVEL
      WHERE
        /*  %JoinFKPK(US_EXAMENGRALNIVEL,:%Old," = "," AND") */
        US_EXAMENGRALNIVEL.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_EXAMENGRALNIVEL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_PERIODOCALIFICACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PERIODOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERIODOCALIFICACION_USER", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_PERIODOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_PERIODOCALIFICACION,:%Old," = "," AND") */
        US_PERIODOCALIFICACION.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_PERIODOCALIFICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_BIRACORAARCHIVOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_BIRACORAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITAR_TW_USER", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_BIRACORAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_BIRACORAARCHIVOS,:%Old," = "," AND") */
        TW_BIRACORAARCHIVOS.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_BIRACORAARCHIVOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_BITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDUSER_FK", FK_COLUMNS="N_IDUSER" */
    SELECT count(*) INTO NUMROWS
      FROM TW_BITACORA
      WHERE
        /*  %JoinFKPK(TW_BITACORA,:%Old," = "," AND") */
        TW_BITACORA.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_BITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TR_FOLIOSPROCESO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOSPROCESO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLIOPROC_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TR_FOLIOSPROCESO
      WHERE
        /*  %JoinFKPK(TR_FOLIOSPROCESO,:%Old," = "," AND") */
        TR_FOLIOSPROCESO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TR_FOLIOSPROCESO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_PROMEDIONIVELEDUCATIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_ALUMNOINCIDENCIABITACORA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCBIT_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_ALUMNOINCIDENCIABITACORA
      WHERE
        /*  %JoinFKPK(TW_ALUMNOINCIDENCIABITACORA,:%Old," = "," AND") */
        TW_ALUMNOINCIDENCIABITACORA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_ALUMNOINCIDENCIABITACORA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_CALIFICACIONMATERIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_CALIFICACIONMATERIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_AGENDAPERSONA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_AGENDAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tw_agendapersona_tc_user_PK", FK_COLUMNS="N_IDUSER" */
    SELECT count(*) INTO NUMROWS
      FROM TW_AGENDAPERSONA
      WHERE
        /*  %JoinFKPK(TW_AGENDAPERSONA,:%Old," = "," AND") */
        TW_AGENDAPERSONA.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_AGENDAPERSONA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_BITACORAINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_BITACORAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITACORAINCIDENCIA_USER", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_BITACORAINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_BITACORAINCIDENCIA,:%Old," = "," AND") */
        US_BITACORAINCIDENCIA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_BITACORAINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_GENERAARCHIVOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_GENERAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_GENERAARCHIVOS_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
    SELECT count(*) INTO NUMROWS
      FROM TW_GENERAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_GENERAARCHIVOS,:%Old," = "," AND") */
        TW_GENERAARCHIVOS.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_GENERAARCHIVOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_COMUNICADOSDESTINATARIOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOSDESTINATARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMDES_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADOSDESTINATARIOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADOSDESTINATARIOS,:%Old," = "," AND") */
        TW_COMUNICADOSDESTINATARIOS.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_COMUNICADOSDESTINATARIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  IB_ARCHIVOSEQUIVALENCIAS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="IB_ARCHIVOSEQUIVALENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_EQUIV_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
    SELECT count(*) INTO NUMROWS
      FROM IB_ARCHIVOSEQUIVALENCIAS
      WHERE
        /*  %JoinFKPK(IB_ARCHIVOSEQUIVALENCIAS,:%Old," = "," AND") */
        IB_ARCHIVOSEQUIVALENCIAS.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because IB_ARCHIVOSEQUIVALENCIAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_COMUNICADODOCUMENTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADODOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMDOC_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADODOCUMENTOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADODOCUMENTOS,:%Old," = "," AND") */
        TW_COMUNICADODOCUMENTOS.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_COMUNICADODOCUMENTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_RESTRICCIONHESCUELA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_RESTRICCIONHESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RESTHESCUELA_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_RESTRICCIONHESCUELA
      WHERE
        /*  %JoinFKPK(US_RESTRICCIONHESCUELA,:%Old," = "," AND") */
        US_RESTRICCIONHESCUELA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_RESTRICCIONHESCUELA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_ALUMNOINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_USER", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  TW_USUARIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TW_USER_FK", FK_COLUMNS="N_USER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_USER_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because TW_USUARIODETALLE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  US_PROMEDIOPERIODO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOPERIODO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOPERIODO_USER", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOPERIODO
      WHERE
        /*  %JoinFKPK(US_PROMEDIOPERIODO,:%Old," = "," AND") */
        US_PROMEDIOPERIODO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because US_PROMEDIOPERIODO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* TW_USER  IB_ARCHIVOSVALIDADOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="IB_ARCHIVOSVALIDADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_ARCVALID_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
    SELECT count(*) INTO NUMROWS
      FROM IB_ARCHIVOSVALIDADOS
      WHERE
        /*  %JoinFKPK(IB_ARCHIVOSVALIDADOS,:%Old," = "," AND") */
        IB_ARCHIVOSVALIDADOS.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE TW_USER because IB_ARCHIVOSVALIDADOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_TW_USER AFTER UPDATE ON TW_USER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on TW_USER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* TW_USER  US_GRUPOTALLER on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0027b24e", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_GRUPOTALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOTALLER_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_GRUPOTALLER
      WHERE
        /*  %JoinFKPK(US_GRUPOTALLER,:%Old," = "," AND") */
        US_GRUPOTALLER.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_GRUPOTALLER exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TC_BITACORATIPO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TC_BITACORATIPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITTIP_TW_USER", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_BITACORATIPO
      SET
        /* %SetFK(TC_BITACORATIPO,NULL) */
        TC_BITACORATIPO.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TC_BITACORATIPO,:%Old," = ",",") */
        TC_BITACORATIPO.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  TW_USER_GROUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_USER_GROUP"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USER_GROUP_TW_USER_FK", FK_COLUMNS="N_USER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_USER_GROUP
      WHERE
        /*  %JoinFKPK(TW_USER_GROUP,:%Old," = "," AND") */
        TW_USER_GROUP.N_USER_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because TW_USER_GROUP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_ASPECTOASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_ASPECTOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ASPECTOASIGNATURA_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ASPECTOASIGNATURA
      WHERE
        /*  %JoinFKPK(US_ASPECTOASIGNATURA,:%Old," = "," AND") */
        US_ASPECTOASIGNATURA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_ASPECTOASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_EVALUACIONHERRAMIENTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_EVALUACIONHERRAMIENTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EVALHERR_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_EVALUACIONHERRAMIENTA
      WHERE
        /*  %JoinFKPK(US_EVALUACIONHERRAMIENTA,:%Old," = "," AND") */
        US_EVALUACIONHERRAMIENTA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_EVALUACIONHERRAMIENTA exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TW_COMUNICADOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMUNICADOS_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_COMUNICADOS
      SET
        /* %SetFK(TW_COMUNICADOS,NULL) */
        TW_COMUNICADOS.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TW_COMUNICADOS,:%Old," = ",",") */
        TW_COMUNICADOS.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_DOCUMENTO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_DOCUMENTO_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTO
      WHERE
        /*  %JoinFKPK(US_DOCUMENTO,:%Old," = "," AND") */
        US_DOCUMENTO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_DOCUMENTO exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TC_PERSONAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TC_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TC_PERSONAL_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TC_PERSONAL
      SET
        /* %SetFK(TC_PERSONAL,NULL) */
        TC_PERSONAL.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TC_PERSONAL,:%Old," = ",",") */
        TC_PERSONAL.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_PROMEDIOCICLOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOCICLOESC_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(US_PROMEDIOCICLOESCOLAR,:%Old," = "," AND") */
        US_PROMEDIOCICLOESCOLAR.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_PROMEDIOCICLOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* TW_USER  US_SOLICITUDCAMBIOCALIFICACION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_EJECUTACAMBIO_FK", FK_COLUMNS="N_IDUSEREJECUTA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_SOLICITUDCAMBIOCALIFICACION
      SET
        /* %SetFK(US_SOLICITUDCAMBIOCALIFICACION,NULL) */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSEREJECUTA = NULL
      WHERE
        /* %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = ",",") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSEREJECUTA = :old.N_ID;
  END IF;

  /* TW_USER  US_SOLICITUDCAMBIOCALIFICACION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_AUTORIZACAMBIO_FK", FK_COLUMNS="N_IDUSERAUTORIZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE US_SOLICITUDCAMBIOCALIFICACION
      SET
        /* %SetFK(US_SOLICITUDCAMBIOCALIFICACION,NULL) */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSERAUTORIZA = NULL
      WHERE
        /* %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = ",",") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSERAUTORIZA = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_SOLICITUDCAMBIOCALIFICACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USER_SOLICITACAMBIO_FK", FK_COLUMNS="N_IDUSERSOLICITA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_SOLICITUDCAMBIOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = "," AND") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDUSERSOLICITA = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_SOLICITUDCAMBIOCALIFICACION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  TR_VINCULARALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TR_VINCULARALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_VINCULARALUMNO_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TR_VINCULARALUMNO
      WHERE
        /*  %JoinFKPK(TR_VINCULARALUMNO,:%Old," = "," AND") */
        TR_VINCULARALUMNO.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because TR_VINCULARALUMNO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_DOCUMENTOSINSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTOSINSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="DOCUMENTOSINSCRIPCION_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTOSINSCRIPCION
      WHERE
        /*  %JoinFKPK(US_DOCUMENTOSINSCRIPCION,:%Old," = "," AND") */
        US_DOCUMENTOSINSCRIPCION.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_DOCUMENTOSINSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_EXAMENGENERAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGENERAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGEN_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGENERAL
      WHERE
        /*  %JoinFKPK(US_EXAMENGENERAL,:%Old," = "," AND") */
        US_EXAMENGENERAL.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_EXAMENGENERAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_EXAMENGRALNIVEL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGRALNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGRALNIVEL_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGRALNIVEL
      WHERE
        /*  %JoinFKPK(US_EXAMENGRALNIVEL,:%Old," = "," AND") */
        US_EXAMENGRALNIVEL.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_EXAMENGRALNIVEL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_PERIODOCALIFICACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PERIODOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PERIODOCALIFICACION_USER", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PERIODOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_PERIODOCALIFICACION,:%Old," = "," AND") */
        US_PERIODOCALIFICACION.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_PERIODOCALIFICACION exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TW_BIRACORAARCHIVOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_BIRACORAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITAR_TW_USER", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_BIRACORAARCHIVOS
      SET
        /* %SetFK(TW_BIRACORAARCHIVOS,NULL) */
        TW_BIRACORAARCHIVOS.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TW_BIRACORAARCHIVOS,:%Old," = ",",") */
        TW_BIRACORAARCHIVOS.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  TW_BITACORA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_BITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_BITACORA_N_IDUSER_FK", FK_COLUMNS="N_IDUSER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_BITACORA
      WHERE
        /*  %JoinFKPK(TW_BITACORA,:%Old," = "," AND") */
        TW_BITACORA.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because TW_BITACORA exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TR_FOLIOSPROCESO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TR_FOLIOSPROCESO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TR_FOLIOPROC_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TR_FOLIOSPROCESO
      SET
        /* %SetFK(TR_FOLIOSPROCESO,NULL) */
        TR_FOLIOSPROCESO.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TR_FOLIOSPROCESO,:%Old," = ",",") */
        TR_FOLIOSPROCESO.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_PROMEDIONIVELEDUCATIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TW_ALUMNOINCIDENCIABITACORA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_ALUMNOINCIDENCIABITACORA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_ALUINCBIT_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_ALUMNOINCIDENCIABITACORA
      SET
        /* %SetFK(TW_ALUMNOINCIDENCIABITACORA,NULL) */
        TW_ALUMNOINCIDENCIABITACORA.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TW_ALUMNOINCIDENCIABITACORA,:%Old," = ",",") */
        TW_ALUMNOINCIDENCIABITACORA.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_CALIFICACIONMATERIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_CALIFICACIONMATERIA exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TW_AGENDAPERSONA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_AGENDAPERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="tw_agendapersona_tc_user_PK", FK_COLUMNS="N_IDUSER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_AGENDAPERSONA
      SET
        /* %SetFK(TW_AGENDAPERSONA,NULL) */
        TW_AGENDAPERSONA.N_IDUSER = NULL
      WHERE
        /* %JoinFKPK(TW_AGENDAPERSONA,:%Old," = ",",") */
        TW_AGENDAPERSONA.N_IDUSER = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_BITACORAINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_BITACORAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITACORAINCIDENCIA_USER", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_BITACORAINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_BITACORAINCIDENCIA,:%Old," = "," AND") */
        US_BITACORAINCIDENCIA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_BITACORAINCIDENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  TW_GENERAARCHIVOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_GENERAARCHIVOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_GENERAARCHIVOS_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_GENERAARCHIVOS
      WHERE
        /*  %JoinFKPK(TW_GENERAARCHIVOS,:%Old," = "," AND") */
        TW_GENERAARCHIVOS.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because TW_GENERAARCHIVOS exists.'
      );
    END IF;
  END IF;

  /* TW_USER  TW_COMUNICADOSDESTINATARIOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADOSDESTINATARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMDES_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    UPDATE TW_COMUNICADOSDESTINATARIOS
      SET
        /* %SetFK(TW_COMUNICADOSDESTINATARIOS,NULL) */
        TW_COMUNICADOSDESTINATARIOS.N_IDUSUARIO = NULL
      WHERE
        /* %JoinFKPK(TW_COMUNICADOSDESTINATARIOS,:%Old," = ",",") */
        TW_COMUNICADOSDESTINATARIOS.N_IDUSUARIO = :old.N_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  IB_ARCHIVOSEQUIVALENCIAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="IB_ARCHIVOSEQUIVALENCIAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_EQUIV_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_ARCHIVOSEQUIVALENCIAS
      WHERE
        /*  %JoinFKPK(IB_ARCHIVOSEQUIVALENCIAS,:%Old," = "," AND") */
        IB_ARCHIVOSEQUIVALENCIAS.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because IB_ARCHIVOSEQUIVALENCIAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  TW_COMUNICADODOCUMENTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_COMUNICADODOCUMENTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_COMDOC_TW_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_COMUNICADODOCUMENTOS
      WHERE
        /*  %JoinFKPK(TW_COMUNICADODOCUMENTOS,:%Old," = "," AND") */
        TW_COMUNICADODOCUMENTOS.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because TW_COMUNICADODOCUMENTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_RESTRICCIONHESCUELA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_RESTRICCIONHESCUELA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="RESTHESCUELA_USER_FK", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_RESTRICCIONHESCUELA
      WHERE
        /*  %JoinFKPK(US_RESTRICCIONHESCUELA,:%Old," = "," AND") */
        US_RESTRICCIONHESCUELA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_RESTRICCIONHESCUELA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_ALUMNOINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_USER", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  TW_USUARIODETALLE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="TW_USUARIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TW_USUDET_TW_USER_FK", FK_COLUMNS="N_USER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TW_USUARIODETALLE
      WHERE
        /*  %JoinFKPK(TW_USUARIODETALLE,:%Old," = "," AND") */
        TW_USUARIODETALLE.N_USER_ID = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because TW_USUARIODETALLE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  US_PROMEDIOPERIODO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOPERIODO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOPERIODO_USER", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOPERIODO
      WHERE
        /*  %JoinFKPK(US_PROMEDIOPERIODO,:%Old," = "," AND") */
        US_PROMEDIOPERIODO.N_IDUSUARIO = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because US_PROMEDIOPERIODO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* TW_USER  IB_ARCHIVOSVALIDADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TW_USER"
    CHILD_OWNER="", CHILD_TABLE="IB_ARCHIVOSVALIDADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="IB_ARCVALID_TW_USER_FK", FK_COLUMNS="N_IDUSER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID <> :new.N_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM IB_ARCHIVOSVALIDADOS
      WHERE
        /*  %JoinFKPK(IB_ARCHIVOSVALIDADOS,:%Old," = "," AND") */
        IB_ARCHIVOSVALIDADOS.N_IDUSER = :old.N_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TW_USER because IB_ARCHIVOSVALIDADOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_ALUMNOINCIDENCIA AFTER DELETE ON US_ALUMNOINCIDENCIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_ALUMNOINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_ALUMNOINCIDENCIA  US_ALUMNOFALTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004c5b2", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOINCIDENCIA_FALTA", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOFALTA
      WHERE
        /*  %JoinFKPK(US_ALUMNOFALTA,:%Old," = "," AND") */
        US_ALUMNOFALTA.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ALUMNOINCIDENCIA because US_ALUMNOFALTA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ALUMNOINCIDENCIA  US_ALUMNOINCIDENCIADOCTOS on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIADOCTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOINCIDEN_ALUMNODOCTOS_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIADOCTOS
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIADOCTOS,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIADOCTOS.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ALUMNOINCIDENCIA because US_ALUMNOINCIDENCIADOCTOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ALUMNOINCIDENCIA  US_BITACORAINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_BITACORAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITACORAINCIDENCIA_INCIDENCIA", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_BITACORAINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_BITACORAINCIDENCIA,:%Old," = "," AND") */
        US_BITACORAINCIDENCIA.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ALUMNOINCIDENCIA because US_BITACORAINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ALUMNOINCIDENCIA  US_ALUMNOMEDIDA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOINCIDENCIA_INCIDENCIAS", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOMEDIDA
      WHERE
        /*  %JoinFKPK(US_ALUMNOMEDIDA,:%Old," = "," AND") */
        US_ALUMNOMEDIDA.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ALUMNOINCIDENCIA because US_ALUMNOMEDIDA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_ALUMNOINCIDENCIA AFTER UPDATE ON US_ALUMNOINCIDENCIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_ALUMNOINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_ALUMNOINCIDENCIA  US_ALUMNOFALTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00058e76", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOFALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOINCIDENCIA_FALTA", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDALUMNOINCIDENCIA <> :new.N_IDALUMNOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOFALTA
      WHERE
        /*  %JoinFKPK(US_ALUMNOFALTA,:%Old," = "," AND") */
        US_ALUMNOFALTA.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ALUMNOINCIDENCIA because US_ALUMNOFALTA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ALUMNOINCIDENCIA  US_ALUMNOINCIDENCIADOCTOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIADOCTOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOINCIDEN_ALUMNODOCTOS_FK", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDALUMNOINCIDENCIA <> :new.N_IDALUMNOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIADOCTOS
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIADOCTOS,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIADOCTOS.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ALUMNOINCIDENCIA because US_ALUMNOINCIDENCIADOCTOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ALUMNOINCIDENCIA  US_BITACORAINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_BITACORAINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="BITACORAINCIDENCIA_INCIDENCIA", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDALUMNOINCIDENCIA <> :new.N_IDALUMNOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_BITACORAINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_BITACORAINCIDENCIA,:%Old," = "," AND") */
        US_BITACORAINCIDENCIA.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ALUMNOINCIDENCIA because US_BITACORAINCIDENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ALUMNOINCIDENCIA  US_ALUMNOMEDIDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ALUMNOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOMEDIDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNOINCIDENCIA_INCIDENCIAS", FK_COLUMNS="N_IDALUMNOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDALUMNOINCIDENCIA <> :new.N_IDALUMNOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOMEDIDA
      WHERE
        /*  %JoinFKPK(US_ALUMNOMEDIDA,:%Old," = "," AND") */
        US_ALUMNOMEDIDA.N_IDALUMNOINCIDENCIA = :old.N_IDALUMNOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ALUMNOINCIDENCIA because US_ALUMNOMEDIDA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_ASIGNATURA AFTER DELETE ON US_ASIGNATURA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_ASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_ASIGNATURA  US_PLANESTUDIODETALLE on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010eea", PARENT_OWNER="", PARENT_TABLE="US_ASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="US_PLANESTUDIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ASIGNATURA_PLANESTDET", FK_COLUMNS="N_IDASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM US_PLANESTUDIODETALLE
      WHERE
        /*  %JoinFKPK(US_PLANESTUDIODETALLE,:%Old," = "," AND") */
        US_PLANESTUDIODETALLE.N_IDASIGNATURA = :old.N_IDASIGNATURA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ASIGNATURA because US_PLANESTUDIODETALLE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_ASIGNATURA AFTER UPDATE ON US_ASIGNATURA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_ASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* US_ASIGNATURA  US_PLANESTUDIODETALLE on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00011d83", PARENT_OWNER="", PARENT_TABLE="US_ASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="US_PLANESTUDIODETALLE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ASIGNATURA_PLANESTDET", FK_COLUMNS="N_IDASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDASIGNATURA <> :new.N_IDASIGNATURA
  THEN
    UPDATE US_PLANESTUDIODETALLE
      SET
        /* %SetFK(US_PLANESTUDIODETALLE,NULL) */
        US_PLANESTUDIODETALLE.N_IDASIGNATURA = NULL
      WHERE
        /* %JoinFKPK(US_PLANESTUDIODETALLE,:%Old," = ",",") */
        US_PLANESTUDIODETALLE.N_IDASIGNATURA = :old.N_IDASIGNATURA;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_ESCUELAAULA AFTER DELETE ON US_ESCUELAAULA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_ESCUELAAULA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_ESCUELAAULA  US_GRUPOTALLER on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000229bc", PARENT_OWNER="", PARENT_TABLE="US_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="US_GRUPOTALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOTALLER_ESCUELAAULA_FK", FK_COLUMNS="N_IDESCUELAAULA" */
    SELECT count(*) INTO NUMROWS
      FROM US_GRUPOTALLER
      WHERE
        /*  %JoinFKPK(US_GRUPOTALLER,:%Old," = "," AND") */
        US_GRUPOTALLER.N_IDESCUELAAULA = :old.N_IDESCUELAAULA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESCUELAAULA because US_GRUPOTALLER exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESCUELAAULA  US_INTEGRACIONGRUPO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="US_INTEGRACIONGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCAULA_INTEGRUPO", FK_COLUMNS="N_IDESCUELAAULA" */
    SELECT count(*) INTO NUMROWS
      FROM US_INTEGRACIONGRUPO
      WHERE
        /*  %JoinFKPK(US_INTEGRACIONGRUPO,:%Old," = "," AND") */
        US_INTEGRACIONGRUPO.N_IDESCUELAAULA = :old.N_IDESCUELAAULA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESCUELAAULA because US_INTEGRACIONGRUPO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_ESCUELAAULA AFTER UPDATE ON US_ESCUELAAULA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_ESCUELAAULA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_ESCUELAAULA  US_GRUPOTALLER on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000290cb", PARENT_OWNER="", PARENT_TABLE="US_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="US_GRUPOTALLER"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="GRUPOTALLER_ESCUELAAULA_FK", FK_COLUMNS="N_IDESCUELAAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESCUELAAULA <> :new.N_IDESCUELAAULA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_GRUPOTALLER
      WHERE
        /*  %JoinFKPK(US_GRUPOTALLER,:%Old," = "," AND") */
        US_GRUPOTALLER.N_IDESCUELAAULA = :old.N_IDESCUELAAULA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESCUELAAULA because US_GRUPOTALLER exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESCUELAAULA  US_INTEGRACIONGRUPO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESCUELAAULA"
    CHILD_OWNER="", CHILD_TABLE="US_INTEGRACIONGRUPO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESCAULA_INTEGRUPO", FK_COLUMNS="N_IDESCUELAAULA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESCUELAAULA <> :new.N_IDESCUELAAULA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INTEGRACIONGRUPO
      WHERE
        /*  %JoinFKPK(US_INTEGRACIONGRUPO,:%Old," = "," AND") */
        US_INTEGRACIONGRUPO.N_IDESCUELAAULA = :old.N_IDESCUELAAULA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESCUELAAULA because US_INTEGRACIONGRUPO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_ESTATUS AFTER DELETE ON US_ESTATUS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_ESTATUS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_PROMEDIOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0008d4f7", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOCICLOESC_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(US_PROMEDIOCICLOESCOLAR,:%Old," = "," AND") */
        US_PROMEDIOCICLOESCOLAR.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_PROMEDIOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_SOLICITUDCAMBIOCALIFICACION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESTATUS_CAMBIOCALIF_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_SOLICITUDCAMBIOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = "," AND") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_SOLICITUDCAMBIOCALIFICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_EXAMENGENERAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGENERAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGEN_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGENERAL
      WHERE
        /*  %JoinFKPK(US_EXAMENGENERAL,:%Old," = "," AND") */
        US_EXAMENGENERAL.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_EXAMENGENERAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_INSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESTATUS_INSCRIPCION", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_INSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_EXAMENGRALNIVEL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGRALNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGRALNIVEL_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGRALNIVEL
      WHERE
        /*  %JoinFKPK(US_EXAMENGRALNIVEL,:%Old," = "," AND") */
        US_EXAMENGRALNIVEL.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_EXAMENGRALNIVEL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_PROMEDIONIVELEDUCATIVO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_CALIFICACIONMATERIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_CALIFICACIONMATERIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_ESTATUS  US_ALUMNOINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_ESTATUS", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_ESTATUS because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_ESTATUS AFTER UPDATE ON US_ESTATUS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_ESTATUS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_PROMEDIOCICLOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000a45a6", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOCICLOESC_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(US_PROMEDIOCICLOESCOLAR,:%Old," = "," AND") */
        US_PROMEDIOCICLOESCOLAR.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_PROMEDIOCICLOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_SOLICITUDCAMBIOCALIFICACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_SOLICITUDCAMBIOCALIFICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESTATUS_CAMBIOCALIF_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_SOLICITUDCAMBIOCALIFICACION
      WHERE
        /*  %JoinFKPK(US_SOLICITUDCAMBIOCALIFICACION,:%Old," = "," AND") */
        US_SOLICITUDCAMBIOCALIFICACION.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_SOLICITUDCAMBIOCALIFICACION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_EXAMENGENERAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGENERAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGEN_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGENERAL
      WHERE
        /*  %JoinFKPK(US_EXAMENGENERAL,:%Old," = "," AND") */
        US_EXAMENGENERAL.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_EXAMENGENERAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_INSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESTATUS_INSCRIPCION", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_INSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_EXAMENGRALNIVEL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_EXAMENGRALNIVEL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EXAGRALNIVEL_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_EXAMENGRALNIVEL
      WHERE
        /*  %JoinFKPK(US_EXAMENGRALNIVEL,:%Old," = "," AND") */
        US_EXAMENGRALNIVEL.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_EXAMENGRALNIVEL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_PROMEDIONIVELEDUCATIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIONIVELEDUCATIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMNIVELEDUC_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIONIVELEDUCATIVO
      WHERE
        /*  %JoinFKPK(US_PROMEDIONIVELEDUCATIVO,:%Old," = "," AND") */
        US_PROMEDIONIVELEDUCATIVO.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_PROMEDIONIVELEDUCATIVO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_CALIFICACIONMATERIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_ESTATUS_FK", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_CALIFICACIONMATERIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_ESTATUS  US_ALUMNOINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_ESTATUS", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_ESTATUS because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_INSCRIPCION AFTER DELETE ON US_INSCRIPCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_INSCRIPCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_OBSERVACIONGENERAL on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000f58d2", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_OBSERVACIONGENERAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="OBSERVACIONGRAL_INSCRIPCION_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_OBSERVACIONGENERAL
      WHERE
        /*  %JoinFKPK(US_OBSERVACIONGENERAL,:%Old," = "," AND") */
        US_OBSERVACIONGENERAL.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_OBSERVACIONGENERAL exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_PROMEDIOASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INSCRIPCION_PROMASIG_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PROMEDIOASIGNATURA,:%Old," = "," AND") */
        US_PROMEDIOASIGNATURA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_PROMEDIOASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_EVALUACIONHERRAMIENTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_EVALUACIONHERRAMIENTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EVALHERR_INSCRIP_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_EVALUACIONHERRAMIENTA
      WHERE
        /*  %JoinFKPK(US_EVALUACIONHERRAMIENTA,:%Old," = "," AND") */
        US_EVALUACIONHERRAMIENTA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_EVALUACIONHERRAMIENTA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_INSCRIPCIONLIBRO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCIONLIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INSCRIPCIONLIBRO_INSCRIPCION", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCIONLIBRO
      WHERE
        /*  %JoinFKPK(US_INSCRIPCIONLIBRO,:%Old," = "," AND") */
        US_INSCRIPCIONLIBRO.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_INSCRIPCIONLIBRO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_PROMEDIOCICLOESCOLAR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMCICLOESC_INSCRIPCION_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(US_PROMEDIOCICLOESCOLAR,:%Old," = "," AND") */
        US_PROMEDIOCICLOESCOLAR.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_PROMEDIOCICLOESCOLAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_DOCUMENTOSINSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTOSINSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="DOCUMENTOSINSCRIPCION_INSC_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTOSINSCRIPCION
      WHERE
        /*  %JoinFKPK(US_DOCUMENTOSINSCRIPCION,:%Old," = "," AND") */
        US_DOCUMENTOSINSCRIPCION.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_DOCUMENTOSINSCRIPCION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_ALUMNOBECA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="US_ALUMNOBECA_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBECA,:%Old," = "," AND") */
        US_ALUMNOBECA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_ALUMNOBECA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_OBSERVACIONASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_OBSERVACIONASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="OBSERVACIONASIG_INSCRIP_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_OBSERVACIONASIGNATURA
      WHERE
        /*  %JoinFKPK(US_OBSERVACIONASIGNATURA,:%Old," = "," AND") */
        US_OBSERVACIONASIGNATURA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_OBSERVACIONASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_CALIFICACIONMATERIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_INSCRIPCION_FK", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_CALIFICACIONMATERIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_COMPRENSIONLECTORAALUMNO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_COMPRENSIONLECTORAALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="COMPLECALUM_INSC", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_COMPRENSIONLECTORAALUMNO
      WHERE
        /*  %JoinFKPK(US_COMPRENSIONLECTORAALUMNO,:%Old," = "," AND") */
        US_COMPRENSIONLECTORAALUMNO.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_COMPRENSIONLECTORAALUMNO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_CONTROLASISTENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_CONTROLASISTENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USINSCRIPCION_CTRLASISTENCIA", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_CONTROLASISTENCIA
      WHERE
        /*  %JoinFKPK(US_CONTROLASISTENCIA,:%Old," = "," AND") */
        US_CONTROLASISTENCIA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_CONTROLASISTENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_ALUMNOINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_INCIDENCIA", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_INSCRIPCION  US_PROMEDIOPERIODO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOPERIODO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOPERIODO_INSCRIPCION", FK_COLUMNS="N_IDINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOPERIODO
      WHERE
        /*  %JoinFKPK(US_PROMEDIOPERIODO,:%Old," = "," AND") */
        US_PROMEDIOPERIODO.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_INSCRIPCION because US_PROMEDIOPERIODO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_INSCRIPCION AFTER UPDATE ON US_INSCRIPCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_INSCRIPCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_OBSERVACIONGENERAL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0011e771", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_OBSERVACIONGENERAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="OBSERVACIONGRAL_INSCRIPCION_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_OBSERVACIONGENERAL
      WHERE
        /*  %JoinFKPK(US_OBSERVACIONGENERAL,:%Old," = "," AND") */
        US_OBSERVACIONGENERAL.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_OBSERVACIONGENERAL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_PROMEDIOASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INSCRIPCION_PROMASIG_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PROMEDIOASIGNATURA,:%Old," = "," AND") */
        US_PROMEDIOASIGNATURA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_PROMEDIOASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_EVALUACIONHERRAMIENTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_EVALUACIONHERRAMIENTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="EVALHERR_INSCRIP_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_EVALUACIONHERRAMIENTA
      WHERE
        /*  %JoinFKPK(US_EVALUACIONHERRAMIENTA,:%Old," = "," AND") */
        US_EVALUACIONHERRAMIENTA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_EVALUACIONHERRAMIENTA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_INSCRIPCIONLIBRO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCIONLIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INSCRIPCIONLIBRO_INSCRIPCION", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCIONLIBRO
      WHERE
        /*  %JoinFKPK(US_INSCRIPCIONLIBRO,:%Old," = "," AND") */
        US_INSCRIPCIONLIBRO.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_INSCRIPCIONLIBRO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_PROMEDIOCICLOESCOLAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOCICLOESCOLAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMCICLOESC_INSCRIPCION_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOCICLOESCOLAR
      WHERE
        /*  %JoinFKPK(US_PROMEDIOCICLOESCOLAR,:%Old," = "," AND") */
        US_PROMEDIOCICLOESCOLAR.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_PROMEDIOCICLOESCOLAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_DOCUMENTOSINSCRIPCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_DOCUMENTOSINSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="DOCUMENTOSINSCRIPCION_INSC_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_DOCUMENTOSINSCRIPCION
      WHERE
        /*  %JoinFKPK(US_DOCUMENTOSINSCRIPCION,:%Old," = "," AND") */
        US_DOCUMENTOSINSCRIPCION.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_DOCUMENTOSINSCRIPCION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_ALUMNOBECA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOBECA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="US_ALUMNOBECA_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOBECA
      WHERE
        /*  %JoinFKPK(US_ALUMNOBECA,:%Old," = "," AND") */
        US_ALUMNOBECA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_ALUMNOBECA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_OBSERVACIONASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_OBSERVACIONASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="OBSERVACIONASIG_INSCRIP_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_OBSERVACIONASIGNATURA
      WHERE
        /*  %JoinFKPK(US_OBSERVACIONASIGNATURA,:%Old," = "," AND") */
        US_OBSERVACIONASIGNATURA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_OBSERVACIONASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_CALIFICACIONMATERIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_INSCRIPCION_FK", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_CALIFICACIONMATERIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_COMPRENSIONLECTORAALUMNO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_COMPRENSIONLECTORAALUMNO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="COMPLECALUM_INSC", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_COMPRENSIONLECTORAALUMNO
      WHERE
        /*  %JoinFKPK(US_COMPRENSIONLECTORAALUMNO,:%Old," = "," AND") */
        US_COMPRENSIONLECTORAALUMNO.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_COMPRENSIONLECTORAALUMNO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_CONTROLASISTENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_CONTROLASISTENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="USINSCRIPCION_CTRLASISTENCIA", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CONTROLASISTENCIA
      WHERE
        /*  %JoinFKPK(US_CONTROLASISTENCIA,:%Old," = "," AND") */
        US_CONTROLASISTENCIA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_CONTROLASISTENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_ALUMNOINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ALUMNO_INCIDENCIA", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_INSCRIPCION  US_PROMEDIOPERIODO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_INSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOPERIODO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PROMEDIOPERIODO_INSCRIPCION", FK_COLUMNS="N_IDINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDINSCRIPCION <> :new.N_IDINSCRIPCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOPERIODO
      WHERE
        /*  %JoinFKPK(US_PROMEDIOPERIODO,:%Old," = "," AND") */
        US_PROMEDIOPERIODO.N_IDINSCRIPCION = :old.N_IDINSCRIPCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_INSCRIPCION because US_PROMEDIOPERIODO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_PLANESTUDIODETALLE AFTER DELETE ON US_PLANESTUDIODETALLE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_PLANESTUDIODETALLE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_PROMEDIOASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000964b1", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANDET_PROMASIG_FK", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PROMEDIOASIGNATURA,:%Old," = "," AND") */
        US_PROMEDIOASIGNATURA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_PROMEDIOASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_LIBRO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_PLAN_DETALLE", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_LIBRO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_OBSERVACIONASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_OBSERVACIONASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="OBSERVACIONASIG_PLANDETALLE_FK", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_OBSERVACIONASIGNATURA
      WHERE
        /*  %JoinFKPK(US_OBSERVACIONASIGNATURA,:%Old," = "," AND") */
        US_OBSERVACIONASIGNATURA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_OBSERVACIONASIGNATURA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_HORARIO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANESTUDET_HORARIO", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIO
      WHERE
        /*  %JoinFKPK(US_HORARIO,:%Old," = "," AND") */
        US_HORARIO.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_HORARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_CALIFICACIONMATERIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_PLANESTUDET_FK", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_CALIFICACIONMATERIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_HORARIOTECNOLOGIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIOTECNOLOGIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="HTECN_PLANDETALLE_FK", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIOTECNOLOGIA
      WHERE
        /*  %JoinFKPK(US_HORARIOTECNOLOGIA,:%Old," = "," AND") */
        US_HORARIOTECNOLOGIA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_HORARIOTECNOLOGIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_CONTROLASISTENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_CONTROLASISTENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANDETALLE_CTRLASISTENCIA", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_CONTROLASISTENCIA
      WHERE
        /*  %JoinFKPK(US_CONTROLASISTENCIA,:%Old," = "," AND") */
        US_CONTROLASISTENCIA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_CONTROLASISTENCIA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_PLANESTUDIODETALLE  US_PERSONALASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_PERSONALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANESTUDET_PERASIG", FK_COLUMNS="N_IDPLANDETALLE" */
    SELECT count(*) INTO NUMROWS
      FROM US_PERSONALASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PERSONALASIGNATURA,:%Old," = "," AND") */
        US_PERSONALASIGNATURA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_PLANESTUDIODETALLE because US_PERSONALASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_PLANESTUDIODETALLE AFTER UPDATE ON US_PLANESTUDIODETALLE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_PLANESTUDIODETALLE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_PROMEDIOASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000abf12", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_PROMEDIOASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANDET_PROMASIG_FK", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_PROMEDIOASIGNATURA
      WHERE
        /*  %JoinFKPK(US_PROMEDIOASIGNATURA,:%Old," = "," AND") */
        US_PROMEDIOASIGNATURA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_PROMEDIOASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_LIBRO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_LIBRO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="LIBRO_PLAN_DETALLE", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_LIBRO
      WHERE
        /*  %JoinFKPK(US_LIBRO,:%Old," = "," AND") */
        US_LIBRO.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_LIBRO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_OBSERVACIONASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_OBSERVACIONASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="OBSERVACIONASIG_PLANDETALLE_FK", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_OBSERVACIONASIGNATURA
      WHERE
        /*  %JoinFKPK(US_OBSERVACIONASIGNATURA,:%Old," = "," AND") */
        US_OBSERVACIONASIGNATURA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_OBSERVACIONASIGNATURA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_HORARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANESTUDET_HORARIO", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIO
      WHERE
        /*  %JoinFKPK(US_HORARIO,:%Old," = "," AND") */
        US_HORARIO.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_HORARIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_CALIFICACIONMATERIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_CALIFICACIONMATERIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="CALIFMATERIA_PLANESTUDET_FK", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CALIFICACIONMATERIA
      WHERE
        /*  %JoinFKPK(US_CALIFICACIONMATERIA,:%Old," = "," AND") */
        US_CALIFICACIONMATERIA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_CALIFICACIONMATERIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_HORARIOTECNOLOGIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_HORARIOTECNOLOGIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="HTECN_PLANDETALLE_FK", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_HORARIOTECNOLOGIA
      WHERE
        /*  %JoinFKPK(US_HORARIOTECNOLOGIA,:%Old," = "," AND") */
        US_HORARIOTECNOLOGIA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_HORARIOTECNOLOGIA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_PLANESTUDIODETALLE  US_CONTROLASISTENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_CONTROLASISTENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANDETALLE_CTRLASISTENCIA", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_CONTROLASISTENCIA
      WHERE
        /*  %JoinFKPK(US_CONTROLASISTENCIA,:%Old," = "," AND") */
        US_CONTROLASISTENCIA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_PLANESTUDIODETALLE because US_CONTROLASISTENCIA exists.'
      );
    END IF;
  END IF;

  /* US_PLANESTUDIODETALLE  US_PERSONALASIGNATURA on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_PLANESTUDIODETALLE"
    CHILD_OWNER="", CHILD_TABLE="US_PERSONALASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="PLANESTUDET_PERASIG", FK_COLUMNS="N_IDPLANDETALLE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPLANDETALLE <> :new.N_IDPLANDETALLE
  THEN
    UPDATE US_PERSONALASIGNATURA
      SET
        /* %SetFK(US_PERSONALASIGNATURA,NULL) */
        US_PERSONALASIGNATURA.N_IDPLANDETALLE = NULL
      WHERE
        /* %JoinFKPK(US_PERSONALASIGNATURA,:%Old," = ",",") */
        US_PERSONALASIGNATURA.N_IDPLANDETALLE = :old.N_IDPLANDETALLE;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_TIPOASIGNATURA AFTER DELETE ON US_TIPOASIGNATURA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_TIPOASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_TIPOASIGNATURA  US_ASIGNATURA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0000fd78", PARENT_OWNER="", PARENT_TABLE="US_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="US_ASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPOASIG_ASIGNATURA", FK_COLUMNS="N_IDTIPOASIGNATURA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ASIGNATURA
      WHERE
        /*  %JoinFKPK(US_ASIGNATURA,:%Old," = "," AND") */
        US_ASIGNATURA.N_IDTIPOASIGNATURA = :old.N_IDTIPOASIGNATURA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_TIPOASIGNATURA because US_ASIGNATURA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_TIPOASIGNATURA AFTER UPDATE ON US_TIPOASIGNATURA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_TIPOASIGNATURA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_TIPOASIGNATURA  US_ASIGNATURA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000130c2", PARENT_OWNER="", PARENT_TABLE="US_TIPOASIGNATURA"
    CHILD_OWNER="", CHILD_TABLE="US_ASIGNATURA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPOASIG_ASIGNATURA", FK_COLUMNS="N_IDTIPOASIGNATURA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDTIPOASIGNATURA <> :new.N_IDTIPOASIGNATURA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ASIGNATURA
      WHERE
        /*  %JoinFKPK(US_ASIGNATURA,:%Old," = "," AND") */
        US_ASIGNATURA.N_IDTIPOASIGNATURA = :old.N_IDTIPOASIGNATURA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_TIPOASIGNATURA because US_ASIGNATURA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_TIPOINCIDENCIA AFTER DELETE ON US_TIPOINCIDENCIA for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_TIPOINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_TIPOINCIDENCIA  US_FALTA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00035f79", PARENT_OWNER="", PARENT_TABLE="US_TIPOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_FALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPO_INCIDENCIA_FALTA", FK_COLUMNS="N_IDTIPOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_FALTA
      WHERE
        /*  %JoinFKPK(US_FALTA,:%Old," = "," AND") */
        US_FALTA.N_IDTIPOINCIDENCIA = :old.N_IDTIPOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_TIPOINCIDENCIA because US_FALTA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_TIPOINCIDENCIA  US_MEDIDADISCIPLINA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_TIPOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_MEDIDADISCIPLINA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPO_INCIDENCIA_MEDIDA", FK_COLUMNS="N_IDTIPOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_MEDIDADISCIPLINA
      WHERE
        /*  %JoinFKPK(US_MEDIDADISCIPLINA,:%Old," = "," AND") */
        US_MEDIDADISCIPLINA.N_IDTIPOINCIDENCIA = :old.N_IDTIPOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_TIPOINCIDENCIA because US_MEDIDADISCIPLINA exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_TIPOINCIDENCIA  US_ALUMNOINCIDENCIA on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_TIPOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPO_INCIDENCIA_INCIDENCIA", FK_COLUMNS="N_IDTIPOINCIDENCIA" */
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDTIPOINCIDENCIA = :old.N_IDTIPOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_TIPOINCIDENCIA because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_TIPOINCIDENCIA AFTER UPDATE ON US_TIPOINCIDENCIA for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_TIPOINCIDENCIA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* US_TIPOINCIDENCIA  US_FALTA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003ead8", PARENT_OWNER="", PARENT_TABLE="US_TIPOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_FALTA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPO_INCIDENCIA_FALTA", FK_COLUMNS="N_IDTIPOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDTIPOINCIDENCIA <> :new.N_IDTIPOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_FALTA
      WHERE
        /*  %JoinFKPK(US_FALTA,:%Old," = "," AND") */
        US_FALTA.N_IDTIPOINCIDENCIA = :old.N_IDTIPOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_TIPOINCIDENCIA because US_FALTA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_TIPOINCIDENCIA  US_MEDIDADISCIPLINA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_TIPOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_MEDIDADISCIPLINA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPO_INCIDENCIA_MEDIDA", FK_COLUMNS="N_IDTIPOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDTIPOINCIDENCIA <> :new.N_IDTIPOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_MEDIDADISCIPLINA
      WHERE
        /*  %JoinFKPK(US_MEDIDADISCIPLINA,:%Old," = "," AND") */
        US_MEDIDADISCIPLINA.N_IDTIPOINCIDENCIA = :old.N_IDTIPOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_TIPOINCIDENCIA because US_MEDIDADISCIPLINA exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* US_TIPOINCIDENCIA  US_ALUMNOINCIDENCIA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_TIPOINCIDENCIA"
    CHILD_OWNER="", CHILD_TABLE="US_ALUMNOINCIDENCIA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="TIPO_INCIDENCIA_INCIDENCIA", FK_COLUMNS="N_IDTIPOINCIDENCIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDTIPOINCIDENCIA <> :new.N_IDTIPOINCIDENCIA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM US_ALUMNOINCIDENCIA
      WHERE
        /*  %JoinFKPK(US_ALUMNOINCIDENCIA,:%Old," = "," AND") */
        US_ALUMNOINCIDENCIA.N_IDTIPOINCIDENCIA = :old.N_IDTIPOINCIDENCIA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update US_TIPOINCIDENCIA because US_ALUMNOINCIDENCIA exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_US_TIPOINSCRIPCION AFTER DELETE ON US_TIPOINSCRIPCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on US_TIPOINSCRIPCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* US_TIPOINSCRIPCION  TC_DOCUMENTOSGRADO on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00022d6f", PARENT_OWNER="", PARENT_TABLE="US_TIPOINSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESTATUS_REINSCRIPCION", FK_COLUMNS="N_IDTIPOINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM TC_DOCUMENTOSGRADO
      WHERE
        /*  %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = "," AND") */
        TC_DOCUMENTOSGRADO.N_IDTIPOINSCRIPCION = :old.N_IDTIPOINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_TIPOINSCRIPCION because TC_DOCUMENTOSGRADO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* US_TIPOINSCRIPCION  US_INSCRIPCION on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_TIPOINSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INSCRIPCION_TIPO", FK_COLUMNS="N_IDTIPOINSCRIPCION" */
    SELECT count(*) INTO NUMROWS
      FROM US_INSCRIPCION
      WHERE
        /*  %JoinFKPK(US_INSCRIPCION,:%Old," = "," AND") */
        US_INSCRIPCION.N_IDTIPOINSCRIPCION = :old.N_IDTIPOINSCRIPCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE US_TIPOINSCRIPCION because US_INSCRIPCION exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_US_TIPOINSCRIPCION AFTER UPDATE ON US_TIPOINSCRIPCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on US_TIPOINSCRIPCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* US_TIPOINSCRIPCION  TC_DOCUMENTOSGRADO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00024831", PARENT_OWNER="", PARENT_TABLE="US_TIPOINSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="TC_DOCUMENTOSGRADO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="ESTATUS_REINSCRIPCION", FK_COLUMNS="N_IDTIPOINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDTIPOINSCRIPCION <> :new.N_IDTIPOINSCRIPCION
  THEN
    UPDATE TC_DOCUMENTOSGRADO
      SET
        /* %SetFK(TC_DOCUMENTOSGRADO,NULL) */
        TC_DOCUMENTOSGRADO.N_IDTIPOINSCRIPCION = NULL
      WHERE
        /* %JoinFKPK(TC_DOCUMENTOSGRADO,:%Old," = ",",") */
        TC_DOCUMENTOSGRADO.N_IDTIPOINSCRIPCION = :old.N_IDTIPOINSCRIPCION;
  END IF;

  /* US_TIPOINSCRIPCION  US_INSCRIPCION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="US_TIPOINSCRIPCION"
    CHILD_OWNER="", CHILD_TABLE="US_INSCRIPCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="INSCRIPCION_TIPO", FK_COLUMNS="N_IDTIPOINSCRIPCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDTIPOINSCRIPCION <> :new.N_IDTIPOINSCRIPCION
  THEN
    UPDATE US_INSCRIPCION
      SET
        /* %SetFK(US_INSCRIPCION,NULL) */
        US_INSCRIPCION.N_IDTIPOINSCRIPCION = NULL
      WHERE
        /* %JoinFKPK(US_INSCRIPCION,:%Old," = ",",") */
        US_INSCRIPCION.N_IDTIPOINSCRIPCION = :old.N_IDTIPOINSCRIPCION;
  END IF;


-- ERwin Builtin Trigger
END;
/

