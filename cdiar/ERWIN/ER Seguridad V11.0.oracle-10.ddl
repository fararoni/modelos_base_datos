
CREATE TABLE ALUMNO_USUARIO
(
	S_eMail              VARCHAR2(20) NULL ,
	SAL_CURP_ALUMNO      VARCHAR2(18) NOT NULL 
);



CREATE UNIQUE INDEX XPKALUMNO_USUARIO ON ALUMNO_USUARIO
(SAL_CURP_ALUMNO   ASC);



ALTER TABLE ALUMNO_USUARIO
	ADD CONSTRAINT  XPKALUMNO_USUARIO PRIMARY KEY (SAL_CURP_ALUMNO);



CREATE TABLE CCT
(
	CCT                  CHAR(10 BYTE) CONSTRAINT SYS_C005895 NOT NULL ,
	NOMBRE               CHAR(100 BYTE) NULL ,
	CCT_DOMICILIO        CHAR(60 BYTE) NULL ,
	CALLE1               CHAR(40 BYTE) NULL ,
	CALLE2               CHAR(40 BYTE) NULL ,
	COD_ENTIDAD          CHAR(2 BYTE) NULL ,
	COD_MUNICIPIO        CHAR(3 BYTE) NULL ,
	COD_LOCALIDAD        CHAR(4 BYTE) NULL ,
	TELEFONO             CHAR(15 BYTE) NULL ,
	FAX                  CHAR(15 BYTE) NULL ,
	COD_DEP_ADMIN        CHAR(3 BYTE) NULL ,
	COD_CLASIFIC         CHAR(1 BYTE) NULL ,
	COD_IDENTIFICADOR    CHAR(2 BYTE) NULL ,
	COD_DEP_NORMAT       CHAR(2 BYTE) NULL ,
	COD_SERVICIO         CHAR(2 BYTE) NULL ,
	COD_SERV_REG         CHAR(2 BYTE) NULL ,
	COD_CEP_ANIO         CHAR(4 BYTE) NULL ,
	ZONA_ESCOLAR         CHAR(3 BYTE) NULL ,
	SECTOR               CHAR(4 BYTE) NULL ,
	COD_ALMACEN_ACOPIO   CHAR(4 BYTE) NULL ,
	COD_SOSTENIMIENTO    CHAR(3 BYTE) NULL ,
	COD_TURNO            CHAR(3 BYTE) NULL ,
	CVE_INMUEBLE         CHAR(7 BYTE) NULL ,
	COD_TIP_INCORP       CHAR(2 BYTE) NULL ,
	NUMOFINCOR           CHAR(6 BYTE) NULL ,
	FECHA_INCORPO        DATE NULL ,
	CVE_ECONOMICA        CHAR(25 BYTE) NULL ,
	FECHA_APERTURA       DATE NULL ,
	COD_SITUACION        CHAR(1 BYTE) NULL ,
	FECHA_ALTA           DATE NULL ,
	FECHA_ULT_ACT        DATE NULL ,
	COD_MODALIDAD_ED     CHAR(3 BYTE) NULL ,
	DIR_PATERNO          CHAR(30 BYTE) NULL ,
	DIR_MATERNO          CHAR(30 BYTE) NULL ,
	DIR_NOMBRE           CHAR(30 BYTE) NULL ,
	COD_MOVIMIENTO       CHAR(1 BYTE) NULL ,
	COD_SOPORTE_MOV      CHAR(1 BYTE) NULL ,
	FOLIO_PROBATORIO     CHAR(100 BYTE) NULL ,
	FECHA_SOLICITUD      DATE NULL ,
	OBSERVACIONES        CHAR(254 BYTE) NULL ,
	FECHA_CREACION       DATE NULL ,
	FECHA_ULT_MOD        DATE NULL ,
	USUA_ULT_MOD         CHAR(20 BYTE) NULL ,
	FIRMA_DIGITAL        CHAR(20 BYTE) NULL ,
	EXT_TELEFONO         CHAR(6 BYTE) NULL ,
	USOINM_AULAS         NUMBER(2) NULL ,
	EXT_FAX              CHAR(6 BYTE) NULL ,
	COD_MOTIVO           CHAR(2 BYTE) NULL ,
	USOINM_LABS          NUMBER(2) NULL ,
	CORREO               CHAR(100 BYTE) NULL ,
	USOINM_TALLERES      NUMBER(2) NULL ,
	WEB                  CHAR(100 BYTE) NULL ,
	USOINM_CUBS          NUMBER(2) NULL ,
	COD_DELEGACION       CHAR(3 BYTE) NULL ,
	CVEINM               CHAR(8 BYTE) NULL ,
	CORREO_SEP_DF        VARCHAR2(32 BYTE) NULL ,
	COD_RESPONSABLE      NUMBER(9) NULL ,
	DOMICILIO_2          VARCHAR2(60 BYTE) NULL ,
	NUMERO_INTERIOR      VARCHAR2(50 BYTE) NULL ,
	NUMERO_EXTERIOR      VARCHAR2(50 BYTE) NULL ,
	NOMBRE2              CHAR(100 BYTE) NULL ,
	CURP_DIRECTOR        VARCHAR2(18 BYTE) NULL ,
	RFC_DIRECTOR         VARCHAR2(13 BYTE) NULL ,
	GENERO_DIRECTOR      VARCHAR2(1 BYTE) NULL 
);



CREATE PUBLIC SYNONYM CCT
	 FOR CCT;



CREATE UNIQUE INDEX PK_CCT ON CCT
(CCT   ASC);



ALTER TABLE CCT
	ADD CONSTRAINT  PK_CCT PRIMARY KEY (CCT);



CREATE  INDEX IX_CCT_TELEFONO ON CCT
(TELEFONO   ASC);



CREATE  INDEX IX_CCT_NOMBRE ON CCT
(NOMBRE   ASC);



CREATE  INDEX IX_SUBSTR_CCT_1_9 ON CCT
(SUBSTR("CCT",1,9)   ASC);



CREATE  INDEX IX_CVEINM ON CCT
(CVEINM   ASC);



CREATE  INDEX IX_CCT_COD_SERV_REG ON CCT
(COD_SERV_REG   ASC);



CREATE  INDEX IX_CCT_SECTOR ON CCT
(SECTOR   ASC);



CREATE  INDEX IX_CCT_MUN ON CCT
(COD_MUNICIPIO   ASC);



CREATE TABLE MULE_SEG_USUARIO_SPP
(
	S_CURP               CHAR(18) NOT NULL ,
	SPP_CURP             CHAR(18) NOT NULL 
);



CREATE UNIQUE INDEX XPKMULE_SEG_USUARIO_SPP ON MULE_SEG_USUARIO_SPP
(S_CURP   ASC,SPP_CURP   ASC);



ALTER TABLE MULE_SEG_USUARIO_SPP
	ADD CONSTRAINT  XPKMULE_SEG_USUARIO_SPP PRIMARY KEY (S_CURP,SPP_CURP);



CREATE TABLE PRISEC_PRIVADAS_PERSONA
(
	ID                   NUMBER(19) CONSTRAINT SYS_C0077224 NOT NULL ,
	S_CURP               VARCHAR2(255) NOT NULL ,
	FECHANAC             TIMESTAMP(6) NULL ,
	NOMBRES              VARCHAR2(255) NULL ,
	PRIMERAPELLIDO       VARCHAR2(255) NULL ,
	RFC                  VARCHAR2(255) NULL ,
	SEGUNDOAPELLIDO      VARCHAR2(255) NULL ,
	SEXO                 NUMBER(10) NULL ,
	LUGARNACIMIENTO_ID   NUMBER(19) NULL ,
	NACIONALIDAD_ID      NUMBER(19) NULL ,
	OTRANACIONALIDAD_ID  NUMBER(19) NULL ,
	USUARIO_ID           NUMBER(19) NULL ,
	PUEBLOINDIGENA_ID    NUMBER(19) NULL ,
	DOMICILIO_ID         NUMBER(19) NULL ,
	LENGUA_ID            NUMBER(19) NULL ,
	ENCONTRADO           NUMBER NULL ,
	CURP_OLD             VARCHAR2(18) NULL ,
	CURPRENAPO           VARCHAR2(255) NULL ,
	PRIMERAPELLIDORENAPO VARCHAR2(255) NULL ,
	SEGUNDOAPELLIDORENAPO VARCHAR2(255) NULL ,
	NOMBRESRENAPO        VARCHAR2(255) NULL ,
	FECHANACRENAPO       TIMESTAMP(6) NULL ,
	SEXORENAPO           VARCHAR2(255) NULL 
);



CREATE UNIQUE INDEX XPKPRISEC_PRIVADAS_PERSONA ON PRISEC_PRIVADAS_PERSONA
(S_CURP   ASC);



ALTER TABLE PRISEC_PRIVADAS_PERSONA
	ADD CONSTRAINT  XPKPRISEC_PRIVADAS_PERSONA PRIMARY KEY (S_CURP);



ALTER TABLE PRISEC_PRIVADAS_PERSONA
ADD CONSTRAINT  SYS_C0077225 UNIQUE (ID);



CREATE  INDEX IX_LOWER_PERSONACURP ON PRISEC_PRIVADAS_PERSONA
(LOWER("CURP")   ASC);



CREATE  INDEX IDX_PERSONA_NOMBRES ON PRISEC_PRIVADAS_PERSONA
(PRIMERAPELLIDO   ASC,SEGUNDOAPELLIDO   ASC,NOMBRES   ASC);



CREATE TABLE SED_ALUMNOS
(
	SAL_CURP_ALUMNO      VARCHAR2(18) CONSTRAINT SYS_C0011031 NOT NULL ,
	SAL_MATRICULA_ALUMNO NUMBER NULL ,
	SAL_NOMBRE_ALUMNO    VARCHAR2(60) CONSTRAINT SYS_C0011032 NOT NULL ,
	SAL_PRIMER_APELLIDO  VARCHAR2(60) NULL ,
	SAL_SEGUNDO_APELLIDO VARCHAR2(60) NULL ,
	SAL_FECHA_NACIMIENTO DATE CONSTRAINT SYS_C0011033 NOT NULL ,
	SAL_SEXO_ALUMNO      CHAR(1) CONSTRAINT SYS_C0011034 NOT NULL  CONSTRAINT  CK_SED_ALUMNOS_SEXO CHECK (SAL_SEXO_ALUMNO IN ('H','M')),
	SAL_ENTIDAD_NACIMIENTO CHAR(2) CONSTRAINT SYS_C0011035 NOT NULL  CONSTRAINT  CK_SED_ALUMNO_ENT_NAC CHECK (SAL_ENTIDAD_NACIMIENTO IN
  					('AS','BC','BS','CC','CS','CH','CL','CM','DF','DG',
					 'GT','GR','HG','JC','MC','MN','MS','NT','NL','OC',
					 'PL','QT','QR','SP','SL','SR','TC','TL','TS','VZ','YN','ZS','NE','ZZ')),
	SAL_TIPO_SANGRE      VARCHAR2(5) NULL ,
	SAL_SEF_CVE_ENTIDAD_FEDERATIVA NUMBER(4) NULL ,
	SAL_SMD_CVE_MUNICIPIO_DELEGA NUMBER(4) NULL ,
	SAL_SLC_CVE_LOCALIDAD_COLONIA NUMBER(4) NULL ,
	SAL_CALLE            VARCHAR2(60) NULL ,
	SAL_NUMERO_EXTERIOR  VARCHAR2(15) NULL ,
	SAL_NUMERO_INTERIOR  VARCHAR2(10) NULL ,
	SAL_CODIGO_POSTAL    VARCHAR2(5) NULL ,
	SAL_NOMBRE_PADRE_ALUMNO VARCHAR2(60) NULL ,
	SAL_NOMBRE_MADRE_ALUMNO VARCHAR2(60) NULL ,
	SAL_NOMBRE_TUTOR     VARCHAR2(60) NULL ,
	SAL_OCUPACION_PADRE  VARCHAR2(60) NULL ,
	SAL_OCUPACION_MADRE  VARCHAR2(60) NULL ,
	SAL_TELEFONO_DOMICILIO VARCHAR2(20) NULL ,
	SAL_TELEFONO_ALTERNO VARCHAR2(20) NULL ,
	SAL_CURP_NACIONALIDAD CHAR(3) NULL ,
	SAL_CURP_TIPO_DCTO_PROBATORIO NUMBER(1) NULL ,
	SAL_CURP_DOCUMENTO_PROBATORIO CHAR(16) NULL ,
	SAL_CURP_FOLIO_DCTO_PROBATORIO CHAR(10) NULL ,
	SAL_SERVICIO_EDUCATIVO CHAR(2) CONSTRAINT SYS_C0011036 NOT NULL ,
	SAL_STATUS_ENVIO     NUMBER(1) CONSTRAINT SYS_C0011037 NOT NULL ,
	SAL_STATUS_INICIO_CICLO CHAR(1) NULL ,
	SAL_FECHA_CREACION   DATE CONSTRAINT SYS_C0011038 NOT NULL ,
	SAL_FECHA_ULTIMA_MODIFICACION DATE CONSTRAINT SYS_C0011039 NOT NULL ,
	SAL_USUARIO_ULTIMA_MODIFICACIO VARCHAR2(20) CONSTRAINT SYS_C0011040 NOT NULL ,
	SAL_FIRMA_DIGITAL    VARCHAR2(20) NULL ,
	SAL_DERECHOHABIENCIA NUMBER(2) NULL 
);



ALTER TABLE SED_ALUMNOS
	ADD CONSTRAINT  PK_SED_ALUMNOS PRIMARY KEY (SAL_CURP_ALUMNO);



CREATE  INDEX XFKSED_ALUMNOS_FMADIG ON SED_ALUMNOS
(SAL_FIRMA_DIGITAL   ASC);



CREATE TABLE SEG_APLICACION
(
	N_IDAPP              NUMBER(18) CONSTRAINT SYS_C00196016 NOT NULL ,
	N_PARENT             NUMBER(18) NULL ,
	N_POSICION           INTEGER NULL ,
	S_DESCRIPCION        VARCHAR2(150 BYTE) NULL ,
	S_URL                VARCHAR2(150 BYTE) NULL ,
	N_CATEGORIA_OPC      NUMBER(18) CONSTRAINT SYS_C00196017 NOT NULL 
);



CREATE SYNONYM SEG_APLICACION
	 FOR SEG_APLICACION;




CREATE SYNONYM SEG_APLICACION
	 FOR SEG_APLICACION;




CREATE SYNONYM SEG_APLICACION
	 FOR SEG_APLICACION;




CREATE SYNONYM SEG_APLICACION
	 FOR SEG_APLICACION;




CREATE SYNONYM SEG_APLICACION
	 FOR SEG_APLICACION;




CREATE SYNONYM SIIE_BMSEG_APLICACION
	 FOR SEG_APLICACION;



CREATE UNIQUE INDEX XPKSEG_APLICACION ON SEG_APLICACION
(N_IDAPP   ASC);



ALTER TABLE SEG_APLICACION
	ADD CONSTRAINT  XPKSEG_APLICACION PRIMARY KEY (N_IDAPP);



CREATE TABLE SEG_CATEGORIA_OPCION
(
	N_CATEGORIA_OPC      NUMBER(18) CONSTRAINT SYS_C00196018 NOT NULL ,
	S_OPCION             VARCHAR2(30 BYTE) CONSTRAINT SYS_C00196019 NOT NULL 
);



CREATE SYNONYM SEG_CATEGORIA_OPCION
	 FOR SEG_CATEGORIA_OPCION;




CREATE SYNONYM SEG_CATEGORIA_OPCION
	 FOR SEG_CATEGORIA_OPCION;




CREATE SYNONYM SEG_CATEGORIA_OPCION
	 FOR SEG_CATEGORIA_OPCION;




CREATE SYNONYM SEG_CATEGORIA_OPCION
	 FOR SEG_CATEGORIA_OPCION;




CREATE SYNONYM SEG_CATEGORIA_OPCION
	 FOR SEG_CATEGORIA_OPCION;




CREATE SYNONYM SIIE_BMSEG_CATEGORIA_OPCION
	 FOR SEG_CATEGORIA_OPCION;



CREATE UNIQUE INDEX XPKSEG_CATEGORIA_OPCION ON SEG_CATEGORIA_OPCION
(N_CATEGORIA_OPC   ASC);



ALTER TABLE SEG_CATEGORIA_OPCION
	ADD CONSTRAINT  XPKSEG_CATEGORIA_OPCION PRIMARY KEY (N_CATEGORIA_OPC);



CREATE TABLE SEG_ESTATUS
(
	N_IDESTATUS          NUMBER(18) CONSTRAINT SYS_C00196020 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(50 BYTE) NULL 
);



CREATE SYNONYM SEG_ESTATUS
	 FOR SEG_ESTATUS;




CREATE SYNONYM SEG_ESTATUS
	 FOR SEG_ESTATUS;




CREATE SYNONYM SEG_ESTATUS
	 FOR SEG_ESTATUS;




CREATE SYNONYM SEG_ESTATUS
	 FOR SEG_ESTATUS;




CREATE SYNONYM SEG_ESTATUS
	 FOR SEG_ESTATUS;




CREATE SYNONYM SIIE_BMSEG_ESTATUS
	 FOR SEG_ESTATUS;



CREATE UNIQUE INDEX XPKSEG_ESTATUS ON SEG_ESTATUS
(N_IDESTATUS   ASC);



ALTER TABLE SEG_ESTATUS
	ADD CONSTRAINT  XPKSEG_ESTATUS PRIMARY KEY (N_IDESTATUS);



CREATE TABLE SEG_HONORARIOS_SEP
(
	N_IDHONORARIOS       NUMBER(18) CONSTRAINT SYS_C00196021 NOT NULL ,
	S_NOMBRE             VARCHAR2(50 BYTE) NULL ,
	S_APELLIDO_PATERNO   VARCHAR2(50 BYTE) NULL ,
	S_APELLIDO_MATERNO   VARCHAR2(50 BYTE) NULL ,
	S_RFC                VARCHAR2(13 BYTE) NULL ,
	S_CURP               VARCHAR2(18 BYTE) NULL ,
	S_CCT                VARCHAR2(10 BYTE) CONSTRAINT SYS_C00196022 NOT NULL ,
	D_VIGENCIA           DATE NULL 
);



CREATE SYNONYM SEG_HONORARIOS_SEP
	 FOR SEG_HONORARIOS_SEP;




CREATE SYNONYM SEG_HONORARIOS_SEP
	 FOR SEG_HONORARIOS_SEP;




CREATE SYNONYM SEG_HONORARIOS_SEP
	 FOR SEG_HONORARIOS_SEP;




CREATE SYNONYM SEG_HONORARIOS_SEP
	 FOR SEG_HONORARIOS_SEP;




CREATE SYNONYM SEG_HONORARIOS_SEP
	 FOR SEG_HONORARIOS_SEP;




CREATE SYNONYM SIIE_BMSEG_HONORARIOS_SEP
	 FOR SEG_HONORARIOS_SEP;



CREATE UNIQUE INDEX XPKSEG_HONORARIOS_SEP ON SEG_HONORARIOS_SEP
(N_IDHONORARIOS   ASC);



ALTER TABLE SEG_HONORARIOS_SEP
	ADD CONSTRAINT  XPKSEG_HONORARIOS_SEP PRIMARY KEY (N_IDHONORARIOS);



CREATE TABLE SEG_LOG_ACTIVIDAD
(
	N_IDLOG              NUMBER(18) CONSTRAINT SYS_C00196023 NOT NULL ,
	N_IDUSUARIO          NUMBER(18) NULL ,
	N_IDOPERACION        NUMBER(18) NULL ,
	N_IDROL              NUMBER(18) NULL ,
	N_IDAPP              NUMBER(18) NULL ,
	D_FECHAHORA          DATE NULL ,
	S_IP_CLIENTE         VARCHAR2(20 BYTE) NULL 
);



CREATE SYNONYM SEG_LOG_ACTIVIDAD
	 FOR SEG_LOG_ACTIVIDAD;




CREATE SYNONYM SEG_LOG_ACTIVIDAD
	 FOR SEG_LOG_ACTIVIDAD;




CREATE SYNONYM SEG_LOG_ACTIVIDAD
	 FOR SEG_LOG_ACTIVIDAD;




CREATE SYNONYM SEG_LOG_ACTIVIDAD
	 FOR SEG_LOG_ACTIVIDAD;




CREATE SYNONYM SEG_LOG_ACTIVIDAD
	 FOR SEG_LOG_ACTIVIDAD;




CREATE SYNONYM SIIE_BMSEG_LOG_ACTIVIDAD
	 FOR SEG_LOG_ACTIVIDAD;



CREATE UNIQUE INDEX XPKSEG_LOG_ACTIVIDAD ON SEG_LOG_ACTIVIDAD
(N_IDLOG   ASC);



ALTER TABLE SEG_LOG_ACTIVIDAD
	ADD CONSTRAINT  XPKSEG_LOG_ACTIVIDAD PRIMARY KEY (N_IDLOG);



CREATE TABLE SEG_LOG_CONTRASENAS
(
	N_IDUSUARIO          NUMBER(18) CONSTRAINT SYS_C00196024 NOT NULL ,
	S_CONTRASENA_ANT     VARCHAR2(28 BYTE) NULL ,
	D_FECHA_CAMBIO       DATE NULL 
);



CREATE SYNONYM SEG_LOG_CONTRASENAS
	 FOR SEG_LOG_CONTRASENAS;




CREATE SYNONYM SEG_LOG_CONTRASENAS
	 FOR SEG_LOG_CONTRASENAS;




CREATE SYNONYM SEG_LOG_CONTRASENAS
	 FOR SEG_LOG_CONTRASENAS;




CREATE SYNONYM SEG_LOG_CONTRASENAS
	 FOR SEG_LOG_CONTRASENAS;




CREATE SYNONYM SEG_LOG_CONTRASENAS
	 FOR SEG_LOG_CONTRASENAS;




CREATE SYNONYM SIIE_BMSEG_LOG_CONTRASENAS
	 FOR SEG_LOG_CONTRASENAS;



CREATE TABLE SEG_LOG_SESION
(
	N_IDSESION           NUMBER(18) CONSTRAINT SYS_C00196025 NOT NULL ,
	D_FECHA_INICIO       TIMESTAMP(6) NULL ,
	N_IDUSUARIO          NUMBER(18) CONSTRAINT SYS_C00196026 NOT NULL ,
	S_SESION             VARCHAR2(50 BYTE) NULL ,
	N_DURACION_MILISEG   INTEGER NULL 
);



CREATE SYNONYM SEG_LOG_SESION
	 FOR SEG_LOG_SESION;




CREATE SYNONYM SEG_LOG_SESION
	 FOR SEG_LOG_SESION;




CREATE SYNONYM SEG_LOG_SESION
	 FOR SEG_LOG_SESION;




CREATE SYNONYM SEG_LOG_SESION
	 FOR SEG_LOG_SESION;




CREATE SYNONYM SEG_LOG_SESION
	 FOR SEG_LOG_SESION;




CREATE SYNONYM SIIE_BMSEG_LOG_SESION
	 FOR SEG_LOG_SESION;



CREATE UNIQUE INDEX XPKSEG_LOG_SESION ON SEG_LOG_SESION
(N_IDSESION   ASC);



ALTER TABLE SEG_LOG_SESION
	ADD CONSTRAINT  XPKSEG_LOG_SESION PRIMARY KEY (N_IDSESION);



CREATE TABLE SEG_PARTICULAR_CCT
(
	N_IDPERSONA          NUMBER(18) CONSTRAINT SYS_C00196027 NOT NULL ,
	CCT                  CHAR(10 BYTE) CONSTRAINT SYS_C00196028 NOT NULL 
);



CREATE SYNONYM SEG_PARTICULAR_CCT
	 FOR SEG_PARTICULAR_CCT;




CREATE SYNONYM SEG_PARTICULAR_CCT
	 FOR SEG_PARTICULAR_CCT;




CREATE SYNONYM SEG_PARTICULAR_CCT
	 FOR SEG_PARTICULAR_CCT;




CREATE SYNONYM SEG_PARTICULAR_CCT
	 FOR SEG_PARTICULAR_CCT;




CREATE SYNONYM SEG_PARTICULAR_CCT
	 FOR SEG_PARTICULAR_CCT;




CREATE SYNONYM SIIE_BMSEG_PARTICULAR_CCT
	 FOR SEG_PARTICULAR_CCT;



CREATE UNIQUE INDEX XPKSEG_PARTICULAR_CCT ON SEG_PARTICULAR_CCT
(N_IDPERSONA   ASC,CCT   ASC);



ALTER TABLE SEG_PARTICULAR_CCT
	ADD CONSTRAINT  XPKSEG_PARTICULAR_CCT PRIMARY KEY (N_IDPERSONA,CCT);



CREATE TABLE SEG_PERSONAL_PARTICULAR
(
	N_IDPERSONA          NUMBER(18) CONSTRAINT SYS_C00196029 NOT NULL ,
	S_NOMBRE             VARCHAR2(50 BYTE) NULL ,
	S_APELLIDO_PATERNO   VARCHAR2(50 BYTE) NULL ,
	S_APELLIDO_MATERNO   VARCHAR2(50 BYTE) NULL ,
	S_RFC                VARCHAR2(13 BYTE) NULL ,
	S_CURP               VARCHAR2(255 BYTE) NULL ,
	D_VIGENCIA           DATE NULL 
);



CREATE SYNONYM SEG_PERSONAL_PARTICULAR
	 FOR SEG_PERSONAL_PARTICULAR;




CREATE SYNONYM SEG_PERSONAL_PARTICULAR
	 FOR SEG_PERSONAL_PARTICULAR;




CREATE SYNONYM SEG_PERSONAL_PARTICULAR
	 FOR SEG_PERSONAL_PARTICULAR;




CREATE SYNONYM SEG_PERSONAL_PARTICULAR
	 FOR SEG_PERSONAL_PARTICULAR;




CREATE SYNONYM SEG_PERSONAL_PARTICULAR
	 FOR SEG_PERSONAL_PARTICULAR;




CREATE SYNONYM SIIE_BMSEG_PERSONAL_PARTICULAR
	 FOR SEG_PERSONAL_PARTICULAR;



CREATE UNIQUE INDEX XPKSEG_PERSONAL_PARTICULAR ON SEG_PERSONAL_PARTICULAR
(N_IDPERSONA   ASC);



ALTER TABLE SEG_PERSONAL_PARTICULAR
	ADD CONSTRAINT  XPKSEG_PERSONAL_PARTICULAR PRIMARY KEY (N_IDPERSONA);



CREATE TABLE SEG_ROL_USUARIO_UO
(
	N_IDUSUARIO          NUMBER(18) CONSTRAINT SYS_C00196030 NOT NULL ,
	N_IDROL              NUMBER(18) CONSTRAINT SYS_C00196031 NOT NULL ,
	S_RFC                VARCHAR2(18 BYTE) NULL ,
	N_ID_UO              NUMBER(18) NOT NULL 
);



CREATE SYNONYM SEG_ROL_USUARIO
	 FOR SEG_ROL_USUARIO_UO;




CREATE SYNONYM SEG_ROL_USUARIO
	 FOR SEG_ROL_USUARIO_UO;




CREATE SYNONYM SEG_ROL_USUARIO
	 FOR SEG_ROL_USUARIO_UO;




CREATE SYNONYM SEG_ROL_USUARIO
	 FOR SEG_ROL_USUARIO_UO;




CREATE SYNONYM SEG_ROL_USUARIO
	 FOR SEG_ROL_USUARIO_UO;




CREATE SYNONYM SIIE_BMSEG_ROL_USUARIO
	 FOR SEG_ROL_USUARIO_UO;



CREATE UNIQUE INDEX XPKSEG_ROL_USUARIO ON SEG_ROL_USUARIO_UO
(N_IDUSUARIO   ASC,N_IDROL   ASC,N_ID_UO   ASC);



ALTER TABLE SEG_ROL_USUARIO_UO
	ADD CONSTRAINT  XPKSEG_ROL_USUARIO PRIMARY KEY (N_IDUSUARIO,N_IDROL,N_ID_UO);



CREATE TABLE SEG_ROLES
(
	N_IDROL              NUMBER(18) CONSTRAINT SYS_C00196032 NOT NULL ,
	S_ETIQUETA_ROL       VARCHAR2(50 CHAR) CONSTRAINT SYS_C00196033 NOT NULL ,
	S_DESCRIPCION        VARCHAR2(150 CHAR) CONSTRAINT SYS_C00196034 NOT NULL ,
	N_PARENT             NUMBER(18) NULL 
);



CREATE SYNONYM SEG_ROLES
	 FOR SEG_ROLES;




CREATE SYNONYM SEG_ROLES
	 FOR SEG_ROLES;




CREATE SYNONYM SEG_ROLES
	 FOR SEG_ROLES;




CREATE SYNONYM SEG_ROLES
	 FOR SEG_ROLES;




CREATE SYNONYM SEG_ROLES
	 FOR SEG_ROLES;




CREATE SYNONYM SIIE_BMSEG_ROLES
	 FOR SEG_ROLES;



CREATE UNIQUE INDEX XPKSEG_ROLES ON SEG_ROLES
(N_IDROL   ASC);



ALTER TABLE SEG_ROLES
	ADD CONSTRAINT  XPKSEG_ROLES PRIMARY KEY (N_IDROL);



CREATE TABLE SEG_ROLES_APLICACION
(
	N_IDROL              NUMBER(18) CONSTRAINT SYS_C00196035 NOT NULL ,
	N_IDAPP              NUMBER(18) CONSTRAINT SYS_C00196036 NOT NULL 
);



CREATE SYNONYM SEG_ROLES_APLICACION
	 FOR SEG_ROLES_APLICACION;




CREATE SYNONYM SEG_ROLES_APLICACION
	 FOR SEG_ROLES_APLICACION;




CREATE SYNONYM SEG_ROLES_APLICACION
	 FOR SEG_ROLES_APLICACION;




CREATE SYNONYM SEG_ROLES_APLICACION
	 FOR SEG_ROLES_APLICACION;




CREATE SYNONYM SEG_ROLES_APLICACION
	 FOR SEG_ROLES_APLICACION;




CREATE SYNONYM SIIE_BMSEG_ROLES_APLICACION
	 FOR SEG_ROLES_APLICACION;



CREATE UNIQUE INDEX XPKSEG_ROLES_APLICACION ON SEG_ROLES_APLICACION
(N_IDROL   ASC,N_IDAPP   ASC);



ALTER TABLE SEG_ROLES_APLICACION
	ADD CONSTRAINT  XPKSEG_ROLES_APLICACION PRIMARY KEY (N_IDROL,N_IDAPP);



CREATE TABLE SEG_SIIEWEB_ROL
(
	N_IDROL              NUMBER(18) CONSTRAINT SYS_C00196037 NOT NULL ,
	N_IDFUNCIONREAL_SIIEWEB NUMBER(18) CONSTRAINT SYS_C00196038 NOT NULL 
);



CREATE SYNONYM SEG_SIIEWEB_ROL
	 FOR SEG_SIIEWEB_ROL;




CREATE SYNONYM SEG_SIIEWEB_ROL
	 FOR SEG_SIIEWEB_ROL;




CREATE SYNONYM SEG_SIIEWEB_ROL
	 FOR SEG_SIIEWEB_ROL;




CREATE SYNONYM SEG_SIIEWEB_ROL
	 FOR SEG_SIIEWEB_ROL;




CREATE SYNONYM SEG_SIIEWEB_ROL
	 FOR SEG_SIIEWEB_ROL;




CREATE SYNONYM SIIE_BMSEG_SIIEWEB_ROL
	 FOR SEG_SIIEWEB_ROL;



CREATE UNIQUE INDEX XPKSEG_SIIEWEB_ROL ON SEG_SIIEWEB_ROL
(N_IDROL   ASC,N_IDFUNCIONREAL_SIIEWEB   ASC);



ALTER TABLE SEG_SIIEWEB_ROL
	ADD CONSTRAINT  XPKSEG_SIIEWEB_ROL PRIMARY KEY (N_IDROL,N_IDFUNCIONREAL_SIIEWEB);



CREATE TABLE SEG_UNIDAD_ORGANIZACIONAL
(
	S_CCT                VARCHAR2(10 BYTE) NULL ,
	N_ID_UO              NUMBER(18) CONSTRAINT SYS_C00196041 NOT NULL ,
	N_PARENT             NUMBER(18) NULL ,
	N_ID_CALENDARIO      NUMBER(18) NULL 
);



CREATE SYNONYM SEG_UNIDAD_ORGANIZACIONAL
	 FOR SEG_UNIDAD_ORGANIZACIONAL;




CREATE SYNONYM SEG_UNIDAD_ORGANIZACIONAL
	 FOR SEG_UNIDAD_ORGANIZACIONAL;




CREATE SYNONYM SEG_UNIDAD_ORGANIZACIONAL
	 FOR SEG_UNIDAD_ORGANIZACIONAL;




CREATE SYNONYM SEG_UNIDAD_ORGANIZACIONAL
	 FOR SEG_UNIDAD_ORGANIZACIONAL;




CREATE SYNONYM SEG_UNIDAD_ORGANIZACIONAL
	 FOR SEG_UNIDAD_ORGANIZACIONAL;




CREATE SYNONYM /7820795e_SIIE_BMSEG_UNIDAD_OR
	 FOR SEG_UNIDAD_ORGANIZACIONAL;



CREATE UNIQUE INDEX XPKSEG_UNIDAD_ORGANIZACIONAL ON SEG_UNIDAD_ORGANIZACIONAL
(N_ID_UO   ASC);



ALTER TABLE SEG_UNIDAD_ORGANIZACIONAL
	ADD CONSTRAINT  XPKSEG_UNIDAD_ORGANIZACIONAL PRIMARY KEY (N_ID_UO);



CREATE UNIQUE INDEX SEG_UNIDAD_ORGANIZACIONAL_UK1 ON SEG_UNIDAD_ORGANIZACIONAL
(S_CCT   ASC);



ALTER TABLE SEG_UNIDAD_ORGANIZACIONAL
ADD CONSTRAINT  SEG_UNIDAD_ORGANIZACIONAL_UK1 UNIQUE (S_CCT);



CREATE TABLE SEG_USUARIOS
(
	S_USUARIO            VARCHAR2(25 BYTE) NULL ,
	S_CONTRASENA         VARCHAR2(50 BYTE) NULL ,
	D_FECHAALTA          DATE NULL ,
	D_FECHABAJA          DATE NULL ,
	S_EMAIL              VARCHAR2(320 BYTE) NULL ,
	S_CURP               CHAR(18 BYTE) NULL ,
	S_RFC                VARCHAR2(13 BYTE) NULL ,
	N_IDUSUARIO          NUMBER(18) CONSTRAINT SYS_C00196042 NOT NULL ,
	N_IDESTATUS          NUMBER(18) CONSTRAINT SYS_C00196043 NOT NULL ,
	SPP_CURP             CHAR(18) NULL 
);



CREATE SYNONYM SEG_USUARIOS
	 FOR SEG_USUARIOS;




CREATE SYNONYM SEG_USUARIOS
	 FOR SEG_USUARIOS;




CREATE SYNONYM SEG_USUARIOS
	 FOR SEG_USUARIOS;




CREATE SYNONYM SEG_USUARIOS
	 FOR SEG_USUARIOS;




CREATE SYNONYM SEG_USUARIOS
	 FOR SEG_USUARIOS;




CREATE SYNONYM SIIE_BMSEG_USUARIOS
	 FOR SEG_USUARIOS;



CREATE UNIQUE INDEX XPKSEG_USUARIOS ON SEG_USUARIOS
(N_IDUSUARIO   ASC);



ALTER TABLE SEG_USUARIOS
	ADD CONSTRAINT  XPKSEG_USUARIOS PRIMARY KEY (N_IDUSUARIO);



CREATE TABLE SEG_USUARIOS_HONORARIOS
(
	N_IDHONORARIOS       NUMBER(18) CONSTRAINT SYS_C00196046 NOT NULL ,
	N_IDUSUARIO          NUMBER(18) CONSTRAINT SYS_C00196047 NOT NULL 
);



CREATE SYNONYM SEG_USUARIOS_HONORARIOS
	 FOR SEG_USUARIOS_HONORARIOS;




CREATE SYNONYM SEG_USUARIOS_HONORARIOS
	 FOR SEG_USUARIOS_HONORARIOS;




CREATE SYNONYM SEG_USUARIOS_HONORARIOS
	 FOR SEG_USUARIOS_HONORARIOS;




CREATE SYNONYM SEG_USUARIOS_HONORARIOS
	 FOR SEG_USUARIOS_HONORARIOS;




CREATE SYNONYM SEG_USUARIOS_HONORARIOS
	 FOR SEG_USUARIOS_HONORARIOS;




CREATE SYNONYM SIIE_BMSEG_USUARIOS_HONORARIOS
	 FOR SEG_USUARIOS_HONORARIOS;



CREATE UNIQUE INDEX XPKSEG_USUAROIS_HONORARIOS ON SEG_USUARIOS_HONORARIOS
(N_IDHONORARIOS   ASC,N_IDUSUARIO   ASC);



ALTER TABLE SEG_USUARIOS_HONORARIOS
	ADD CONSTRAINT  XPKSEG_USUAROIS_HONORARIOS PRIMARY KEY (N_IDHONORARIOS,N_IDUSUARIO);



CREATE TABLE SEG_USUARIOS_PARTICULAR
(
	N_IDPERSONA          NUMBER(18) CONSTRAINT SYS_C00196044 NOT NULL ,
	N_IDUSUARIO          NUMBER(18) CONSTRAINT SYS_C00196045 NOT NULL 
);



CREATE SYNONYM SEG_USUARIOS_PARTICULAR
	 FOR SEG_USUARIOS_PARTICULAR;




CREATE SYNONYM SEG_USUARIOS_PARTICULAR
	 FOR SEG_USUARIOS_PARTICULAR;




CREATE SYNONYM SEG_USUARIOS_PARTICULAR
	 FOR SEG_USUARIOS_PARTICULAR;




CREATE SYNONYM SEG_USUARIOS_PARTICULAR
	 FOR SEG_USUARIOS_PARTICULAR;




CREATE SYNONYM SEG_USUARIOS_PARTICULAR
	 FOR SEG_USUARIOS_PARTICULAR;




CREATE SYNONYM SIIE_BMSEG_USUARIOS_PARTICULAR
	 FOR SEG_USUARIOS_PARTICULAR;



CREATE UNIQUE INDEX XPKSEG_USUARIOS_PARTICULAR ON SEG_USUARIOS_PARTICULAR
(N_IDPERSONA   ASC,N_IDUSUARIO   ASC);



ALTER TABLE SEG_USUARIOS_PARTICULAR
	ADD CONSTRAINT  XPKSEG_USUARIOS_PARTICULAR PRIMARY KEY (N_IDPERSONA,N_IDUSUARIO);



CREATE TABLE SPP_CAT_DISCAPACIDAD
(
	SCD_CVE_DISCAPACIDAD NUMBER(5) CONSTRAINT SYS_C00253110 NOT NULL ,
	SCD_DES_CORTA        VARCHAR2(30 BYTE) NULL ,
	SCD_DES_LARGA        VARCHAR2(100 BYTE) NULL ,
	SCD_FECHA_CREACION   DATE CONSTRAINT SYS_C00253111 NOT NULL ,
	SCD_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00253112 NOT NULL ,
	SCD_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00253113 NOT NULL ,
	SCD_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00253114 NOT NULL 
);



CREATE PUBLIC SYNONYM SPP_CAT_DISCAPACIDAD
	 FOR SPP_CAT_DISCAPACIDAD;



CREATE UNIQUE INDEX XPKSPP_CAT_DISCAPACIDAD ON SPP_CAT_DISCAPACIDAD
(SCD_CVE_DISCAPACIDAD   ASC);



ALTER TABLE SPP_CAT_DISCAPACIDAD
	ADD CONSTRAINT  SYS_C00253115 PRIMARY KEY (SCD_CVE_DISCAPACIDAD);



CREATE TABLE SPP_CLASIFICADOR_FUNCIONES
(
	SCF_SIC_CVE_IDENTIFICADOR NUMBER(6) CONSTRAINT SYS_C00219260 NOT NULL ,
	SCF_STF_CVE_TIPO_FUNCION NUMBER(6) CONSTRAINT SYS_C00219261 NOT NULL ,
	SCF_SSF_CVE_SUBTIPO_FUNCION NUMBER(6) CONSTRAINT SYS_C00219262 NOT NULL ,
	SCF_SFR_CVE_FUNCION  NUMBER(6) CONSTRAINT SYS_C00219263 NOT NULL ,
	SCF_DES_CLASIFICADOR VARCHAR2(255 BYTE) CONSTRAINT SYS_C00219264 NOT NULL ,
	SCF_FECHA_CREACION   DATE CONSTRAINT SYS_C00219265 NOT NULL ,
	SCF_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00219266 NOT NULL ,
	SCF_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219267 NOT NULL ,
	SCF_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219268 NOT NULL 
);



CREATE PUBLIC SYNONYM SPP_CLASIFICADOR_FUNCIONES
	 FOR SPP_CLASIFICADOR_FUNCIONES;



CREATE UNIQUE INDEX XPKSPP_CLASIFICADOR_FUNCIONES ON SPP_CLASIFICADOR_FUNCIONES
(SCF_SIC_CVE_IDENTIFICADOR   ASC,SCF_STF_CVE_TIPO_FUNCION   ASC,SCF_SSF_CVE_SUBTIPO_FUNCION   ASC,SCF_SFR_CVE_FUNCION   ASC);



ALTER TABLE SPP_CLASIFICADOR_FUNCIONES
	ADD CONSTRAINT  SYS_C00219270 PRIMARY KEY (SCF_SIC_CVE_IDENTIFICADOR,SCF_STF_CVE_TIPO_FUNCION,SCF_SSF_CVE_SUBTIPO_FUNCION,SCF_SFR_CVE_FUNCION);



CREATE TABLE SPP_FUNCIONES_REALES
(
	SFR_CVE_FUNCION      NUMBER(6) CONSTRAINT SYS_C00219298 NOT NULL ,
	SFR_DES_FUNCION      VARCHAR2(255 BYTE) CONSTRAINT SYS_C00219299 NOT NULL ,
	SFR_FECHA_CREACION   DATE CONSTRAINT SYS_C00219300 NOT NULL ,
	SFR_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00219301 NOT NULL ,
	SFR_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219302 NOT NULL ,
	SFR_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219303 NOT NULL ,
	SFR_FUNCION_EOT      VARCHAR2(3 BYTE) NULL 
);



CREATE PUBLIC SYNONYM SPP_FUNCIONES_REALES
	 FOR SPP_FUNCIONES_REALES;



CREATE UNIQUE INDEX XPKSPP_FUNCIONES_REALES ON SPP_FUNCIONES_REALES
(SFR_CVE_FUNCION   ASC);



ALTER TABLE SPP_FUNCIONES_REALES
	ADD CONSTRAINT  SYS_C00219305 PRIMARY KEY (SFR_CVE_FUNCION);



CREATE UNIQUE INDEX XAK1SPP_FUNCIONES_REALES ON SPP_FUNCIONES_REALES
(SFR_DES_FUNCION   ASC);



ALTER TABLE SPP_FUNCIONES_REALES
ADD CONSTRAINT  XAK1SPP_FUNCIONES_REALES UNIQUE (SFR_DES_FUNCION);



CREATE TABLE SPP_FUNCIONREAL_TRABAJADOR
(
	SFT_SPP_CCT          VARCHAR2(10 BYTE) CONSTRAINT SYS_C00219306 NOT NULL ,
	SFT_SPP_CURP         CHAR(18 BYTE) CONSTRAINT SYS_C00219308 NOT NULL ,
	SFT_SPP_RFC          VARCHAR2(13 BYTE) CONSTRAINT SYS_C00219307 NOT NULL ,
	SFT_SPP_CVE_TRABAJADOR NUMBER(8) CONSTRAINT SYS_C00219309 NOT NULL ,
	SFT_SPP_COD_PAGO_PLAZA VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219310 NOT NULL ,
	SFT_SPP_UNIDAD_PLAZA VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219311 NOT NULL ,
	SFT_SPP_SUBUNIDAD_PLAZA VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219312 NOT NULL ,
	SFT_SPP_CATEGORIA    VARCHAR2(7 BYTE) CONSTRAINT SYS_C00219313 NOT NULL ,
	SFT_SPP_HORAS        VARCHAR2(3 BYTE) CONSTRAINT SYS_C00219314 NOT NULL ,
	SFT_SPP_NUM_PLAZA    VARCHAR2(6 BYTE) CONSTRAINT SYS_C00219315 NOT NULL ,
	SFT_SCF_SIC_CVE_IDENTIFICADOR NUMBER(6) CONSTRAINT SYS_C00219316 NOT NULL ,
	SFT_SCF_STF_CVE_TIPO_FUNCION NUMBER(6) CONSTRAINT SYS_C00219317 NOT NULL ,
	SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO NUMBER(6) CONSTRAINT SYS_C00219318 NOT NULL ,
	SFT_SCF_SFR_CVE_FUNCION NUMBER(6) CONSTRAINT SYS_C00219319 NOT NULL ,
	SFT_FUNCION_EVALUADA VARCHAR2(255 BYTE) NULL ,
	SFT_FECHA_CREACION   DATE CONSTRAINT SYS_C00219320 NOT NULL ,
	SFT_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00219321 NOT NULL ,
	SFT_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219322 NOT NULL ,
	SFT_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219323 NOT NULL ,
	SFT_FECHA_FUNCION    DATE NULL 
);



CREATE PUBLIC SYNONYM SPP_FUNCIONREAL_TRABAJADOR
	 FOR SPP_FUNCIONREAL_TRABAJADOR;



CREATE UNIQUE INDEX XPKSPP_FUNCIONREAL_TRABAJADOR ON SPP_FUNCIONREAL_TRABAJADOR
(SFT_SPP_CCT   ASC,SFT_SPP_CURP   ASC,SFT_SPP_RFC   ASC,SFT_SPP_CVE_TRABAJADOR   ASC,SFT_SPP_COD_PAGO_PLAZA   ASC,SFT_SPP_UNIDAD_PLAZA   ASC,SFT_SPP_SUBUNIDAD_PLAZA   ASC,SFT_SPP_CATEGORIA   ASC,SFT_SPP_HORAS   ASC,SFT_SPP_NUM_PLAZA   ASC,SFT_SCF_SIC_CVE_IDENTIFICADOR   ASC,SFT_SCF_STF_CVE_TIPO_FUNCION   ASC,SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO   ASC,SFT_SCF_SFR_CVE_FUNCION   ASC);



ALTER TABLE SPP_FUNCIONREAL_TRABAJADOR
	ADD CONSTRAINT  SYS_C00219325 PRIMARY KEY (SFT_SPP_CCT,SFT_SPP_CURP,SFT_SPP_RFC,SFT_SPP_CVE_TRABAJADOR,SFT_SPP_COD_PAGO_PLAZA,SFT_SPP_UNIDAD_PLAZA,SFT_SPP_SUBUNIDAD_PLAZA,SFT_SPP_CATEGORIA,SFT_SPP_HORAS,SFT_SPP_NUM_PLAZA,SFT_SCF_SIC_CVE_IDENTIFICADOR,SFT_SCF_STF_CVE_TIPO_FUNCION,SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO,SFT_SCF_SFR_CVE_FUNCION);



CREATE TABLE SPP_PERSONAL_DATOS
(
	SPD_RFC              VARCHAR2(13 BYTE) CONSTRAINT SYS_C00253116 NOT NULL ,
	SPD_EMAIL_PERS       VARCHAR2(80 BYTE) NULL ,
	SPD_EMAIL_INST       VARCHAR2(80 BYTE) NULL ,
	SPD_TEL_CASA         NUMBER(15) NULL ,
	SPD_CEL              NUMBER(15) NULL ,
	SPD_CALLE            VARCHAR2(150 BYTE) NULL ,
	SPD_NUM_INTE         VARCHAR2(10 BYTE) NULL ,
	SPD_NUM_EXTE         VARCHAR2(10 BYTE) NULL ,
	SPD_COLONIA          VARCHAR2(150 BYTE) NULL ,
	SPD_DELEGACION       VARCHAR2(150 BYTE) NULL ,
	SPD_CODIGO_POSTAL    VARCHAR2(10 BYTE) NULL ,
	SPD_ESTADO           VARCHAR2(150 BYTE) NULL ,
	SPD_SCD_CVE_DISCAPACIDAD NUMBER(5) NULL ,
	SPD_OBSERVACIONES    VARCHAR2(255 BYTE) NULL ,
	SPD_FECHA_CREACION   DATE CONSTRAINT SYS_C00253117 NOT NULL ,
	SPD_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00253118 NOT NULL ,
	SPD_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00253119 NOT NULL ,
	SPD_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00253120 NOT NULL 
);



CREATE PUBLIC SYNONYM SPP_PERSONAL_DATOS
	 FOR SPP_PERSONAL_DATOS;



CREATE UNIQUE INDEX XPKSPP_PERSONAL_DATOS ON SPP_PERSONAL_DATOS
(SPD_RFC   ASC);



ALTER TABLE SPP_PERSONAL_DATOS
	ADD CONSTRAINT  SYS_C00253121 PRIMARY KEY (SPD_RFC);



CREATE TABLE SPP_PLANTILLA_PERSONAL
(
	SPP_CCT              VARCHAR2(10 BYTE) CONSTRAINT SYS_C00219380 NOT NULL ,
	SPP_RFC              VARCHAR2(13 BYTE) CONSTRAINT SYS_C00219381 NOT NULL ,
	SPP_CURP             CHAR(18 BYTE) CONSTRAINT SYS_C00219382 NOT NULL ,
	SPP_CVE_TRABAJADOR   NUMBER(8) CONSTRAINT SYS_C00219383 NOT NULL ,
	SPP_COD_PAGO_PLAZA   VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219384 NOT NULL ,
	SPP_UNIDAD_PLAZA     VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219385 NOT NULL ,
	SPP_SUBUNIDAD_PLAZA  VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219386 NOT NULL ,
	SPP_CATEGORIA        VARCHAR2(7 BYTE) CONSTRAINT SYS_C00219387 NOT NULL ,
	SPP_HORAS            VARCHAR2(3 BYTE) CONSTRAINT SYS_C00219388 NOT NULL ,
	SPP_NUM_PLAZA        VARCHAR2(6 BYTE) CONSTRAINT SYS_C00219389 NOT NULL ,
	SPP_NOMBRE_TRABAJADOR VARCHAR2(100 BYTE) NULL ,
	SPP_HORAS_LABORALES_PLAZA NUMBER(2) NULL ,
	SPP_PLAZA            VARCHAR2(22 BYTE) NULL ,
	SPP_MOTIVO_MOVIMIENTO NUMBER(4) NULL ,
	SPP_EFECTO_INICIO    NUMBER(7) NULL ,
	SPP_EFECTO_FIN       NUMBER(7) NULL ,
	SPP_REGISTRO_NUEVO   VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219390 NOT NULL ,
	SPP_REGISTRO_EVALUADO VARCHAR2(2 BYTE) CONSTRAINT SYS_C00219391 NOT NULL ,
	SPP_NUM_OFICIO       VARCHAR2(15 BYTE) NULL ,
	SPP_INCONSISTENCIA   VARCHAR2(5 BYTE) NULL ,
	SPP_OBSERVACIONES    VARCHAR2(255 BYTE) NULL ,
	SPP_FECHA_CREACION   DATE CONSTRAINT SYS_C00219392 NOT NULL ,
	SPP_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00219393 NOT NULL ,
	SPP_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219394 NOT NULL ,
	SPP_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219395 NOT NULL ,
	S_CURP               CHAR(18) NULL 
);



CREATE PUBLIC SYNONYM SPP_PLANTILLA_PERSONAL
	 FOR SPP_PLANTILLA_PERSONAL;



CREATE UNIQUE INDEX XPKSPP_PLANTILLA_PERSONAL ON SPP_PLANTILLA_PERSONAL
(SPP_CCT   ASC,SPP_RFC   ASC,SPP_CURP   ASC,SPP_CVE_TRABAJADOR   ASC,SPP_COD_PAGO_PLAZA   ASC,SPP_UNIDAD_PLAZA   ASC,SPP_SUBUNIDAD_PLAZA   ASC,SPP_CATEGORIA   ASC,SPP_HORAS   ASC,SPP_NUM_PLAZA   ASC);



ALTER TABLE SPP_PLANTILLA_PERSONAL
	ADD CONSTRAINT  SYS_C00219397 PRIMARY KEY (SPP_CCT,SPP_RFC,SPP_CURP,SPP_CVE_TRABAJADOR,SPP_COD_PAGO_PLAZA,SPP_UNIDAD_PLAZA,SPP_SUBUNIDAD_PLAZA,SPP_CATEGORIA,SPP_HORAS,SPP_NUM_PLAZA);



CREATE TABLE SPP_SUBTIPO_FUNCIONES
(
	SSF_CVE_SUBTIPO_FUNCION NUMBER(6) CONSTRAINT SYS_C00219414 NOT NULL ,
	SSF_DES_SUBTIPO_FUNCION VARCHAR2(255 BYTE) CONSTRAINT SYS_C00219415 NOT NULL ,
	SSF_FECHA_CREACION   DATE CONSTRAINT SYS_C00219416 NOT NULL ,
	SSF_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00219417 NOT NULL ,
	SSF_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219418 NOT NULL ,
	SSF_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219419 NOT NULL 
);



CREATE PUBLIC SYNONYM SPP_SUBTIPO_FUNCIONES
	 FOR SPP_SUBTIPO_FUNCIONES;



CREATE UNIQUE INDEX XPKSPP_SUBTIPO_FUNCIONES ON SPP_SUBTIPO_FUNCIONES
(SSF_CVE_SUBTIPO_FUNCION   ASC);



ALTER TABLE SPP_SUBTIPO_FUNCIONES
	ADD CONSTRAINT  SYS_C00219421 PRIMARY KEY (SSF_CVE_SUBTIPO_FUNCION);



CREATE UNIQUE INDEX XAK1SPP_SUBTIPO_FUNCIONES ON SPP_SUBTIPO_FUNCIONES
(SSF_DES_SUBTIPO_FUNCION   ASC);



ALTER TABLE SPP_SUBTIPO_FUNCIONES
ADD CONSTRAINT  XAK1SPP_SUBTIPO_FUNCIONES UNIQUE (SSF_DES_SUBTIPO_FUNCION);



CREATE TABLE SPP_TIPO_FUNCIONES
(
	STF_CVE_TIPO_FUNCION NUMBER(6) CONSTRAINT SYS_C00219422 NOT NULL ,
	STF_DES_TIPO_FUNCION VARCHAR2(255 BYTE) CONSTRAINT SYS_C00219423 NOT NULL ,
	STF_FECHA_CREACION   DATE CONSTRAINT SYS_C00219424 NOT NULL ,
	STF_FECHA_ULT_MOD    DATE CONSTRAINT SYS_C00219425 NOT NULL ,
	STF_USUA_ULT_MOD     VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219426 NOT NULL ,
	STF_FIRMA_DIGITAL    VARCHAR2(20 BYTE) CONSTRAINT SYS_C00219427 NOT NULL 
);



CREATE PUBLIC SYNONYM SPP_TIPO_FUNCIONES
	 FOR SPP_TIPO_FUNCIONES;



CREATE UNIQUE INDEX XPKSPP_TIPO_FUNCIONES ON SPP_TIPO_FUNCIONES
(STF_CVE_TIPO_FUNCION   ASC);



ALTER TABLE SPP_TIPO_FUNCIONES
	ADD CONSTRAINT  SYS_C00219429 PRIMARY KEY (STF_CVE_TIPO_FUNCION);



CREATE UNIQUE INDEX XAK1SPP_TIPO_FUNCIONES ON SPP_TIPO_FUNCIONES
(STF_DES_TIPO_FUNCION   ASC);



ALTER TABLE SPP_TIPO_FUNCIONES
ADD CONSTRAINT  XAK1SPP_TIPO_FUNCIONES UNIQUE (STF_DES_TIPO_FUNCION);



ALTER TABLE ALUMNO_USUARIO
	ADD (CONSTRAINT R_57 FOREIGN KEY (SAL_CURP_ALUMNO) REFERENCES SED_ALUMNOS (SAL_CURP_ALUMNO));



ALTER TABLE SEG_APLICACION
	ADD (CONSTRAINT R_34 FOREIGN KEY (N_PARENT) REFERENCES SEG_APLICACION (N_IDAPP) ON DELETE SET NULL);



ALTER TABLE SEG_APLICACION
	ADD (CONSTRAINT R_32 FOREIGN KEY (N_CATEGORIA_OPC) REFERENCES SEG_CATEGORIA_OPCION (N_CATEGORIA_OPC));



ALTER TABLE SEG_LOG_ACTIVIDAD
	ADD (CONSTRAINT R_55 FOREIGN KEY (N_IDUSUARIO) REFERENCES SEG_USUARIOS (N_IDUSUARIO) ON DELETE SET NULL);



ALTER TABLE SEG_LOG_CONTRASENAS
	ADD (CONSTRAINT R_53 FOREIGN KEY (N_IDUSUARIO) REFERENCES SEG_USUARIOS (N_IDUSUARIO));



ALTER TABLE SEG_LOG_SESION
	ADD (CONSTRAINT R_54 FOREIGN KEY (N_IDUSUARIO) REFERENCES SEG_USUARIOS (N_IDUSUARIO));



ALTER TABLE SEG_PARTICULAR_CCT
	ADD (CONSTRAINT R_49 FOREIGN KEY (N_IDPERSONA) REFERENCES SEG_PERSONAL_PARTICULAR (N_IDPERSONA));



ALTER TABLE SEG_PARTICULAR_CCT
	ADD (CONSTRAINT R_100 FOREIGN KEY (CCT) REFERENCES CCT (CCT));



ALTER TABLE SEG_PERSONAL_PARTICULAR
	ADD (CONSTRAINT R_103 FOREIGN KEY (S_CURP) REFERENCES PRISEC_PRIVADAS_PERSONA (S_CURP) ON DELETE SET NULL);



ALTER TABLE SEG_ROL_USUARIO_UO
	ADD (CONSTRAINT R_29 FOREIGN KEY (N_IDUSUARIO) REFERENCES SEG_USUARIOS (N_IDUSUARIO));



ALTER TABLE SEG_ROL_USUARIO_UO
	ADD (CONSTRAINT R_30 FOREIGN KEY (N_IDROL) REFERENCES SEG_ROLES (N_IDROL));



ALTER TABLE SEG_ROL_USUARIO_UO
	ADD (CONSTRAINT R_111 FOREIGN KEY (N_ID_UO) REFERENCES SEG_UNIDAD_ORGANIZACIONAL (N_ID_UO));



ALTER TABLE SEG_ROLES
	ADD (CONSTRAINT R_39 FOREIGN KEY (N_PARENT) REFERENCES SEG_ROLES (N_IDROL) ON DELETE SET NULL);



ALTER TABLE SEG_ROLES_APLICACION
	ADD (CONSTRAINT R_33 FOREIGN KEY (N_IDROL) REFERENCES SEG_ROLES (N_IDROL));



ALTER TABLE SEG_ROLES_APLICACION
	ADD (CONSTRAINT R_138 FOREIGN KEY (N_IDAPP) REFERENCES SEG_APLICACION (N_IDAPP));



ALTER TABLE SEG_SIIEWEB_ROL
	ADD (CONSTRAINT R_40 FOREIGN KEY (N_IDROL) REFERENCES SEG_ROLES (N_IDROL));



ALTER TABLE SEG_UNIDAD_ORGANIZACIONAL
	ADD (CONSTRAINT R_36 FOREIGN KEY (N_PARENT) REFERENCES SEG_UNIDAD_ORGANIZACIONAL (N_ID_UO) ON DELETE SET NULL);



ALTER TABLE SEG_USUARIOS
	ADD (CONSTRAINT R_31 FOREIGN KEY (N_IDESTATUS) REFERENCES SEG_ESTATUS (N_IDESTATUS));



ALTER TABLE SEG_USUARIOS
	ADD (CONSTRAINT R_108 FOREIGN KEY (S_CURP, SPP_CURP) REFERENCES MULE_SEG_USUARIO_SPP (S_CURP, SPP_CURP) ON DELETE SET NULL);



ALTER TABLE SEG_USUARIOS_HONORARIOS
	ADD (CONSTRAINT R_47 FOREIGN KEY (N_IDHONORARIOS) REFERENCES SEG_HONORARIOS_SEP (N_IDHONORARIOS));



ALTER TABLE SEG_USUARIOS_HONORARIOS
	ADD (CONSTRAINT R_48 FOREIGN KEY (N_IDUSUARIO) REFERENCES SEG_USUARIOS (N_IDUSUARIO));



ALTER TABLE SEG_USUARIOS_PARTICULAR
	ADD (CONSTRAINT R_51 FOREIGN KEY (N_IDPERSONA) REFERENCES SEG_PERSONAL_PARTICULAR (N_IDPERSONA));



ALTER TABLE SEG_USUARIOS_PARTICULAR
	ADD (CONSTRAINT R_52 FOREIGN KEY (N_IDUSUARIO) REFERENCES SEG_USUARIOS (N_IDUSUARIO));



ALTER TABLE SPP_CLASIFICADOR_FUNCIONES
	ADD (CONSTRAINT SYS_C00219442 FOREIGN KEY (SCF_SFR_CVE_FUNCION) REFERENCES SPP_FUNCIONES_REALES (SFR_CVE_FUNCION));



ALTER TABLE SPP_CLASIFICADOR_FUNCIONES
	ADD (CONSTRAINT SYS_C00219449 FOREIGN KEY (SCF_SSF_CVE_SUBTIPO_FUNCION) REFERENCES SPP_SUBTIPO_FUNCIONES (SSF_CVE_SUBTIPO_FUNCION));



ALTER TABLE SPP_CLASIFICADOR_FUNCIONES
	ADD (CONSTRAINT SYS_C00219450 FOREIGN KEY (SCF_STF_CVE_TIPO_FUNCION) REFERENCES SPP_TIPO_FUNCIONES (STF_CVE_TIPO_FUNCION));



ALTER TABLE SPP_FUNCIONREAL_TRABAJADOR
	ADD (CONSTRAINT SYS_C00219441 FOREIGN KEY (SFT_SCF_SIC_CVE_IDENTIFICADOR, SFT_SCF_STF_CVE_TIPO_FUNCION, SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO, SFT_SCF_SFR_CVE_FUNCION) REFERENCES SPP_CLASIFICADOR_FUNCIONES (SCF_SIC_CVE_IDENTIFICADOR, SCF_STF_CVE_TIPO_FUNCION, SCF_SSF_CVE_SUBTIPO_FUNCION, SCF_SFR_CVE_FUNCION));



ALTER TABLE SPP_FUNCIONREAL_TRABAJADOR
	ADD (CONSTRAINT SYS_C00219446 FOREIGN KEY (SFT_SPP_CCT, SFT_SPP_RFC, SFT_SPP_CURP, SFT_SPP_CVE_TRABAJADOR, SFT_SPP_COD_PAGO_PLAZA, SFT_SPP_UNIDAD_PLAZA, SFT_SPP_SUBUNIDAD_PLAZA, SFT_SPP_CATEGORIA, SFT_SPP_HORAS, SFT_SPP_NUM_PLAZA) REFERENCES SPP_PLANTILLA_PERSONAL (SPP_CCT, SPP_RFC, SPP_CURP, SPP_CVE_TRABAJADOR, SPP_COD_PAGO_PLAZA, SPP_UNIDAD_PLAZA, SPP_SUBUNIDAD_PLAZA, SPP_CATEGORIA, SPP_HORAS, SPP_NUM_PLAZA));



ALTER TABLE SPP_PERSONAL_DATOS
	ADD (CONSTRAINT SYS_C00253122 FOREIGN KEY (SPD_SCD_CVE_DISCAPACIDAD) REFERENCES SPP_CAT_DISCAPACIDAD (SCD_CVE_DISCAPACIDAD) ON DELETE SET NULL);



ALTER TABLE SPP_PLANTILLA_PERSONAL
	ADD (CONSTRAINT R_109 FOREIGN KEY (S_CURP, SPP_CURP) REFERENCES MULE_SEG_USUARIO_SPP (S_CURP, SPP_CURP) ON DELETE SET NULL);



CREATE  TRIGGER tI_ALUMNO_USUARIO BEFORE INSERT ON ALUMNO_USUARIO for each row
-- ERwin Builtin Trigger
-- INSERT trigger on ALUMNO_USUARIO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SED_ALUMNOS  ALUMNO_USUARIO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fd45", PARENT_OWNER="", PARENT_TABLE="SED_ALUMNOS"
    CHILD_OWNER="", CHILD_TABLE="ALUMNO_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="SAL_CURP_ALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM SED_ALUMNOS
      WHERE
        /* %JoinFKPK(:%New,SED_ALUMNOS," = "," AND") */
        :new.SAL_CURP_ALUMNO = SED_ALUMNOS.SAL_CURP_ALUMNO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert ALUMNO_USUARIO because SED_ALUMNOS does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ALUMNO_USUARIO AFTER UPDATE ON ALUMNO_USUARIO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on ALUMNO_USUARIO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SED_ALUMNOS  ALUMNO_USUARIO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000fea6", PARENT_OWNER="", PARENT_TABLE="SED_ALUMNOS"
    CHILD_OWNER="", CHILD_TABLE="ALUMNO_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="SAL_CURP_ALUMNO" */
  SELECT count(*) INTO NUMROWS
    FROM SED_ALUMNOS
    WHERE
      /* %JoinFKPK(:%New,SED_ALUMNOS," = "," AND") */
      :new.SAL_CURP_ALUMNO = SED_ALUMNOS.SAL_CURP_ALUMNO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update ALUMNO_USUARIO because SED_ALUMNOS does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_CCT AFTER DELETE ON CCT for each row
-- ERwin Builtin Trigger
-- DELETE trigger on CCT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* CCT  SEG_PARTICULAR_CCT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000debc", PARENT_OWNER="", PARENT_TABLE="CCT"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_100", FK_COLUMNS="CCT" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_PARTICULAR_CCT
      WHERE
        /*  %JoinFKPK(SEG_PARTICULAR_CCT,:%Old," = "," AND") */
        SEG_PARTICULAR_CCT.CCT = :old.CCT;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CCT because SEG_PARTICULAR_CCT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MULE_SEG_USUARIO_SPP AFTER DELETE ON MULE_SEG_USUARIO_SPP for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MULE_SEG_USUARIO_SPP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MULE_SEG_USUARIO_SPP  SPP_PLANTILLA_PERSONAL on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0001f77a", PARENT_OWNER="", PARENT_TABLE="MULE_SEG_USUARIO_SPP"
    CHILD_OWNER="", CHILD_TABLE="SPP_PLANTILLA_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_109", FK_COLUMNS="S_CURP""SPP_CURP" */
    UPDATE SPP_PLANTILLA_PERSONAL
      SET
        /* %SetFK(SPP_PLANTILLA_PERSONAL,NULL) */
        SPP_PLANTILLA_PERSONAL.S_CURP = NULL,
        SPP_PLANTILLA_PERSONAL.SPP_CURP = NULL
      WHERE
        /* %JoinFKPK(SPP_PLANTILLA_PERSONAL,:%Old," = "," AND") */
        SPP_PLANTILLA_PERSONAL.S_CURP = :old.S_CURP AND
        SPP_PLANTILLA_PERSONAL.SPP_CURP = :old.SPP_CURP;

    /* ERwin Builtin Trigger */
    /* MULE_SEG_USUARIO_SPP  SEG_USUARIOS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MULE_SEG_USUARIO_SPP"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_108", FK_COLUMNS="S_CURP""SPP_CURP" */
    UPDATE SEG_USUARIOS
      SET
        /* %SetFK(SEG_USUARIOS,NULL) */
        SEG_USUARIOS.S_CURP = NULL,
        SEG_USUARIOS.SPP_CURP = NULL
      WHERE
        /* %JoinFKPK(SEG_USUARIOS,:%Old," = "," AND") */
        SEG_USUARIOS.S_CURP = :old.S_CURP AND
        SEG_USUARIOS.SPP_CURP = :old.SPP_CURP;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MULE_SEG_USUARIO_SPP AFTER UPDATE ON MULE_SEG_USUARIO_SPP for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MULE_SEG_USUARIO_SPP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* MULE_SEG_USUARIO_SPP  SPP_PLANTILLA_PERSONAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00026035", PARENT_OWNER="", PARENT_TABLE="MULE_SEG_USUARIO_SPP"
    CHILD_OWNER="", CHILD_TABLE="SPP_PLANTILLA_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_109", FK_COLUMNS="S_CURP""SPP_CURP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.S_CURP <> :new.S_CURP OR 
    :old.SPP_CURP <> :new.SPP_CURP
  THEN
    UPDATE SPP_PLANTILLA_PERSONAL
      SET
        /* %SetFK(SPP_PLANTILLA_PERSONAL,NULL) */
        SPP_PLANTILLA_PERSONAL.S_CURP = NULL,
        SPP_PLANTILLA_PERSONAL.SPP_CURP = NULL
      WHERE
        /* %JoinFKPK(SPP_PLANTILLA_PERSONAL,:%Old," = ",",") */
        SPP_PLANTILLA_PERSONAL.S_CURP = :old.S_CURP AND
        SPP_PLANTILLA_PERSONAL.SPP_CURP = :old.SPP_CURP;
  END IF;

  /* MULE_SEG_USUARIO_SPP  SEG_USUARIOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MULE_SEG_USUARIO_SPP"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_108", FK_COLUMNS="S_CURP""SPP_CURP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.S_CURP <> :new.S_CURP OR 
    :old.SPP_CURP <> :new.SPP_CURP
  THEN
    UPDATE SEG_USUARIOS
      SET
        /* %SetFK(SEG_USUARIOS,NULL) */
        SEG_USUARIOS.S_CURP = NULL,
        SEG_USUARIOS.SPP_CURP = NULL
      WHERE
        /* %JoinFKPK(SEG_USUARIOS,:%Old," = ",",") */
        SEG_USUARIOS.S_CURP = :old.S_CURP AND
        SEG_USUARIOS.SPP_CURP = :old.SPP_CURP;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SED_ALUMNOS AFTER DELETE ON SED_ALUMNOS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SED_ALUMNOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SED_ALUMNOS  ALUMNO_USUARIO on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000eea5", PARENT_OWNER="", PARENT_TABLE="SED_ALUMNOS"
    CHILD_OWNER="", CHILD_TABLE="ALUMNO_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="SAL_CURP_ALUMNO" */
    SELECT count(*) INTO NUMROWS
      FROM ALUMNO_USUARIO
      WHERE
        /*  %JoinFKPK(ALUMNO_USUARIO,:%Old," = "," AND") */
        ALUMNO_USUARIO.SAL_CURP_ALUMNO = :old.SAL_CURP_ALUMNO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SED_ALUMNOS because ALUMNO_USUARIO exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SED_ALUMNOS AFTER UPDATE ON SED_ALUMNOS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SED_ALUMNOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SED_ALUMNOS  ALUMNO_USUARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000118c6", PARENT_OWNER="", PARENT_TABLE="SED_ALUMNOS"
    CHILD_OWNER="", CHILD_TABLE="ALUMNO_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="SAL_CURP_ALUMNO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SAL_CURP_ALUMNO <> :new.SAL_CURP_ALUMNO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM ALUMNO_USUARIO
      WHERE
        /*  %JoinFKPK(ALUMNO_USUARIO,:%Old," = "," AND") */
        ALUMNO_USUARIO.SAL_CURP_ALUMNO = :old.SAL_CURP_ALUMNO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SED_ALUMNOS because ALUMNO_USUARIO exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_APLICACION BEFORE INSERT ON SEG_APLICACION for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_APLICACION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_CATEGORIA_OPCION  SEG_APLICACION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00024b3a", PARENT_OWNER="", PARENT_TABLE="SEG_CATEGORIA_OPCION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_32", FK_COLUMNS="N_CATEGORIA_OPC" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_CATEGORIA_OPCION
      WHERE
        /* %JoinFKPK(:%New,SEG_CATEGORIA_OPCION," = "," AND") */
        :new.N_CATEGORIA_OPC = SEG_CATEGORIA_OPCION.N_CATEGORIA_OPC;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_APLICACION because SEG_CATEGORIA_OPCION does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_APLICACION  SEG_APLICACION on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="N_PARENT" */
    UPDATE SEG_APLICACION
      SET
        /* %SetFK(SEG_APLICACION,NULL) */
        SEG_APLICACION.N_PARENT = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM SEG_APLICACION
            WHERE
              /* %JoinFKPK(:%New,SEG_APLICACION," = "," AND") */
              :new.N_PARENT = SEG_APLICACION.N_IDAPP
        ) 
        /* %JoinPKPK(SEG_APLICACION,:%New," = "," AND") */
         and SEG_APLICACION.N_IDAPP = :new.N_IDAPP;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER  tD_SEG_APLICACION AFTER DELETE ON SEG_APLICACION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SEG_APLICACION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_APLICACION  SEG_ROLES_APLICACION on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001d5f6", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_138", FK_COLUMNS="N_IDAPP" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES_APLICACION
      WHERE
        /*  %JoinFKPK(SEG_ROLES_APLICACION,:%Old," = "," AND") */
        SEG_ROLES_APLICACION.N_IDAPP = :old.N_IDAPP;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_APLICACION because SEG_ROLES_APLICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_APLICACION  SEG_APLICACION on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="N_PARENT" */
    UPDATE SEG_APLICACION
      SET
        /* %SetFK(SEG_APLICACION,NULL) */
        SEG_APLICACION.N_PARENT = NULL
      WHERE
        /* %JoinFKPK(SEG_APLICACION,:%Old," = "," AND") */
        SEG_APLICACION.N_PARENT = :old.N_IDAPP;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_APLICACION AFTER UPDATE ON SEG_APLICACION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_APLICACION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_APLICACION  SEG_ROLES_APLICACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000478b8", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_138", FK_COLUMNS="N_IDAPP" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDAPP <> :new.N_IDAPP
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES_APLICACION
      WHERE
        /*  %JoinFKPK(SEG_ROLES_APLICACION,:%Old," = "," AND") */
        SEG_ROLES_APLICACION.N_IDAPP = :old.N_IDAPP;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_APLICACION because SEG_ROLES_APLICACION exists.'
      );
    END IF;
  END IF;

  /* SEG_APLICACION  SEG_APLICACION on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="N_PARENT" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDAPP <> :new.N_IDAPP
  THEN
    UPDATE SEG_APLICACION
      SET
        /* %SetFK(SEG_APLICACION,NULL) */
        SEG_APLICACION.N_PARENT = NULL
      WHERE
        /* %JoinFKPK(SEG_APLICACION,:%Old," = ",",") */
        SEG_APLICACION.N_PARENT = :old.N_IDAPP;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_CATEGORIA_OPCION  SEG_APLICACION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_CATEGORIA_OPCION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_32", FK_COLUMNS="N_CATEGORIA_OPC" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_CATEGORIA_OPCION
    WHERE
      /* %JoinFKPK(:%New,SEG_CATEGORIA_OPCION," = "," AND") */
      :new.N_CATEGORIA_OPC = SEG_CATEGORIA_OPCION.N_CATEGORIA_OPC;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_APLICACION because SEG_CATEGORIA_OPCION does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_APLICACION  SEG_APLICACION on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="N_PARENT" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_APLICACION
    WHERE
      /* %JoinFKPK(:%New,SEG_APLICACION," = "," AND") */
      :new.N_PARENT = SEG_APLICACION.N_IDAPP;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.N_PARENT IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_APLICACION because SEG_APLICACION does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SEG_CATEGORIA_OPCION AFTER DELETE ON SEG_CATEGORIA_OPCION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SEG_CATEGORIA_OPCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_CATEGORIA_OPCION  SEG_APLICACION on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00010339", PARENT_OWNER="", PARENT_TABLE="SEG_CATEGORIA_OPCION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_32", FK_COLUMNS="N_CATEGORIA_OPC" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_APLICACION
      WHERE
        /*  %JoinFKPK(SEG_APLICACION,:%Old," = "," AND") */
        SEG_APLICACION.N_CATEGORIA_OPC = :old.N_CATEGORIA_OPC;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_CATEGORIA_OPCION because SEG_APLICACION exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_CATEGORIA_OPCION AFTER UPDATE ON SEG_CATEGORIA_OPCION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_CATEGORIA_OPCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_CATEGORIA_OPCION  SEG_APLICACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000129e3", PARENT_OWNER="", PARENT_TABLE="SEG_CATEGORIA_OPCION"
    CHILD_OWNER="", CHILD_TABLE="SEG_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_32", FK_COLUMNS="N_CATEGORIA_OPC" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_CATEGORIA_OPC <> :new.N_CATEGORIA_OPC
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_APLICACION
      WHERE
        /*  %JoinFKPK(SEG_APLICACION,:%Old," = "," AND") */
        SEG_APLICACION.N_CATEGORIA_OPC = :old.N_CATEGORIA_OPC;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_CATEGORIA_OPCION because SEG_APLICACION exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SEG_ESTATUS AFTER DELETE ON SEG_ESTATUS for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SEG_ESTATUS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_ESTATUS  SEG_USUARIOS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e403", PARENT_OWNER="", PARENT_TABLE="SEG_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="N_IDESTATUS" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /*  %JoinFKPK(SEG_USUARIOS,:%Old," = "," AND") */
        SEG_USUARIOS.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_ESTATUS because SEG_USUARIOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_ESTATUS AFTER UPDATE ON SEG_ESTATUS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_ESTATUS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_ESTATUS  SEG_USUARIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000115fa", PARENT_OWNER="", PARENT_TABLE="SEG_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="N_IDESTATUS" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDESTATUS <> :new.N_IDESTATUS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /*  %JoinFKPK(SEG_USUARIOS,:%Old," = "," AND") */
        SEG_USUARIOS.N_IDESTATUS = :old.N_IDESTATUS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_ESTATUS because SEG_USUARIOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_LOG_ACTIVIDAD BEFORE INSERT ON SEG_LOG_ACTIVIDAD for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_LOG_ACTIVIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_LOG_ACTIVIDAD on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00010a28", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_ACTIVIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="N_IDUSUARIO" */
    UPDATE SEG_LOG_ACTIVIDAD
      SET
        /* %SetFK(SEG_LOG_ACTIVIDAD,NULL) */
        SEG_LOG_ACTIVIDAD.N_IDUSUARIO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM SEG_USUARIOS
            WHERE
              /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
              :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO
        ) 
        /* %JoinPKPK(SEG_LOG_ACTIVIDAD,:%New," = "," AND") */
         and SEG_LOG_ACTIVIDAD.N_IDLOG = :new.N_IDLOG;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_LOG_ACTIVIDAD AFTER UPDATE ON SEG_LOG_ACTIVIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_LOG_ACTIVIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_LOG_ACTIVIDAD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00010095", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_ACTIVIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="N_IDUSUARIO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_USUARIOS
    WHERE
      /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
      :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.N_IDUSUARIO IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_LOG_ACTIVIDAD because SEG_USUARIOS does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_LOG_CONTRASENAS BEFORE INSERT ON SEG_LOG_CONTRASENAS for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_LOG_CONTRASENAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_LOG_CONTRASENAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000100e4", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_CONTRASENAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_53", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
        :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_LOG_CONTRASENAS because SEG_USUARIOS does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_LOG_CONTRASENAS AFTER UPDATE ON SEG_LOG_CONTRASENAS for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_LOG_CONTRASENAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_LOG_CONTRASENAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000fca3", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_CONTRASENAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_53", FK_COLUMNS="N_IDUSUARIO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_USUARIOS
    WHERE
      /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
      :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_LOG_CONTRASENAS because SEG_USUARIOS does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_LOG_SESION BEFORE INSERT ON SEG_LOG_SESION for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_LOG_SESION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_LOG_SESION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000f2ed", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_SESION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
        :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_LOG_SESION because SEG_USUARIOS does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_LOG_SESION AFTER UPDATE ON SEG_LOG_SESION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_LOG_SESION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_LOG_SESION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000fabd", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_SESION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="N_IDUSUARIO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_USUARIOS
    WHERE
      /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
      :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_LOG_SESION because SEG_USUARIOS does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_PARTICULAR_CCT BEFORE INSERT ON SEG_PARTICULAR_CCT for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_PARTICULAR_CCT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* CCT  SEG_PARTICULAR_CCT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000228b2", PARENT_OWNER="", PARENT_TABLE="CCT"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_100", FK_COLUMNS="CCT" */
    SELECT count(*) INTO NUMROWS
      FROM CCT
      WHERE
        /* %JoinFKPK(:%New,CCT," = "," AND") */
        :new.CCT = CCT.CCT;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_PARTICULAR_CCT because CCT does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_PERSONAL_PARTICULAR  SEG_PARTICULAR_CCT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_PERSONAL_PARTICULAR
      WHERE
        /* %JoinFKPK(:%New,SEG_PERSONAL_PARTICULAR," = "," AND") */
        :new.N_IDPERSONA = SEG_PERSONAL_PARTICULAR.N_IDPERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_PARTICULAR_CCT because SEG_PERSONAL_PARTICULAR does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_PARTICULAR_CCT AFTER UPDATE ON SEG_PARTICULAR_CCT for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_PARTICULAR_CCT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* CCT  SEG_PARTICULAR_CCT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00021c55", PARENT_OWNER="", PARENT_TABLE="CCT"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_100", FK_COLUMNS="CCT" */
  SELECT count(*) INTO NUMROWS
    FROM CCT
    WHERE
      /* %JoinFKPK(:%New,CCT," = "," AND") */
      :new.CCT = CCT.CCT;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_PARTICULAR_CCT because CCT does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_PERSONAL_PARTICULAR  SEG_PARTICULAR_CCT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="N_IDPERSONA" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_PERSONAL_PARTICULAR
    WHERE
      /* %JoinFKPK(:%New,SEG_PERSONAL_PARTICULAR," = "," AND") */
      :new.N_IDPERSONA = SEG_PERSONAL_PARTICULAR.N_IDPERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_PARTICULAR_CCT because SEG_PERSONAL_PARTICULAR does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_PERSONAL_PARTICULAR BEFORE INSERT ON SEG_PERSONAL_PARTICULAR for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_PERSONAL_PARTICULAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* PRISEC_PRIVADAS_PERSONA  SEG_PERSONAL_PARTICULAR on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="000136ee", PARENT_OWNER="", PARENT_TABLE="PRISEC_PRIVADAS_PERSONA"
    CHILD_OWNER="", CHILD_TABLE="SEG_PERSONAL_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_103", FK_COLUMNS="S_CURP" */
    UPDATE SEG_PERSONAL_PARTICULAR
      SET
        /* %SetFK(SEG_PERSONAL_PARTICULAR,NULL) */
        SEG_PERSONAL_PARTICULAR.S_CURP = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM PRISEC_PRIVADAS_PERSONA
            WHERE
              /* %JoinFKPK(:%New,PRISEC_PRIVADAS_PERSONA," = "," AND") */
              :new.S_CURP = PRISEC_PRIVADAS_PERSONA.S_CURP
        ) 
        /* %JoinPKPK(SEG_PERSONAL_PARTICULAR,:%New," = "," AND") */
         and SEG_PERSONAL_PARTICULAR.N_IDPERSONA = :new.N_IDPERSONA;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER  tD_SEG_PERSONAL_PARTICULAR AFTER DELETE ON SEG_PERSONAL_PARTICULAR for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SEG_PERSONAL_PARTICULAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_PERSONAL_PARTICULAR  SEG_USUARIOS_PARTICULAR on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000241cc", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS_PARTICULAR
      WHERE
        /*  %JoinFKPK(SEG_USUARIOS_PARTICULAR,:%Old," = "," AND") */
        SEG_USUARIOS_PARTICULAR.N_IDPERSONA = :old.N_IDPERSONA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_PERSONAL_PARTICULAR because SEG_USUARIOS_PARTICULAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_PERSONAL_PARTICULAR  SEG_PARTICULAR_CCT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_PARTICULAR_CCT
      WHERE
        /*  %JoinFKPK(SEG_PARTICULAR_CCT,:%Old," = "," AND") */
        SEG_PARTICULAR_CCT.N_IDPERSONA = :old.N_IDPERSONA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_PERSONAL_PARTICULAR because SEG_PARTICULAR_CCT exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_PERSONAL_PARTICULAR AFTER UPDATE ON SEG_PERSONAL_PARTICULAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_PERSONAL_PARTICULAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_PERSONAL_PARTICULAR  SEG_USUARIOS_PARTICULAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003d728", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPERSONA <> :new.N_IDPERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS_PARTICULAR
      WHERE
        /*  %JoinFKPK(SEG_USUARIOS_PARTICULAR,:%Old," = "," AND") */
        SEG_USUARIOS_PARTICULAR.N_IDPERSONA = :old.N_IDPERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_PERSONAL_PARTICULAR because SEG_USUARIOS_PARTICULAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_PERSONAL_PARTICULAR  SEG_PARTICULAR_CCT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_PARTICULAR_CCT"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="N_IDPERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDPERSONA <> :new.N_IDPERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_PARTICULAR_CCT
      WHERE
        /*  %JoinFKPK(SEG_PARTICULAR_CCT,:%Old," = "," AND") */
        SEG_PARTICULAR_CCT.N_IDPERSONA = :old.N_IDPERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_PERSONAL_PARTICULAR because SEG_PARTICULAR_CCT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* PRISEC_PRIVADAS_PERSONA  SEG_PERSONAL_PARTICULAR on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PRISEC_PRIVADAS_PERSONA"
    CHILD_OWNER="", CHILD_TABLE="SEG_PERSONAL_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_103", FK_COLUMNS="S_CURP" */
  SELECT count(*) INTO NUMROWS
    FROM PRISEC_PRIVADAS_PERSONA
    WHERE
      /* %JoinFKPK(:%New,PRISEC_PRIVADAS_PERSONA," = "," AND") */
      :new.S_CURP = PRISEC_PRIVADAS_PERSONA.S_CURP;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.S_CURP IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_PERSONAL_PARTICULAR because PRISEC_PRIVADAS_PERSONA does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_ROL_USUARIO_UO BEFORE INSERT ON SEG_ROL_USUARIO_UO for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_ROL_USUARIO_UO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_UNIDAD_ORGANIZACIONAL  SEG_ROL_USUARIO_UO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00034855", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_111", FK_COLUMNS="N_ID_UO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_UNIDAD_ORGANIZACIONAL
      WHERE
        /* %JoinFKPK(:%New,SEG_UNIDAD_ORGANIZACIONAL," = "," AND") */
        :new.N_ID_UO = SEG_UNIDAD_ORGANIZACIONAL.N_ID_UO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_ROL_USUARIO_UO because SEG_UNIDAD_ORGANIZACIONAL does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_ROL_USUARIO_UO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="N_IDROL" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES
      WHERE
        /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
        :new.N_IDROL = SEG_ROLES.N_IDROL;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_ROL_USUARIO_UO because SEG_ROLES does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_ROL_USUARIO_UO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
        :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_ROL_USUARIO_UO because SEG_USUARIOS does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_ROL_USUARIO_UO AFTER UPDATE ON SEG_ROL_USUARIO_UO for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_ROL_USUARIO_UO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_UNIDAD_ORGANIZACIONAL  SEG_ROL_USUARIO_UO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000332b7", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_111", FK_COLUMNS="N_ID_UO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_UNIDAD_ORGANIZACIONAL
    WHERE
      /* %JoinFKPK(:%New,SEG_UNIDAD_ORGANIZACIONAL," = "," AND") */
      :new.N_ID_UO = SEG_UNIDAD_ORGANIZACIONAL.N_ID_UO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_ROL_USUARIO_UO because SEG_UNIDAD_ORGANIZACIONAL does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_ROL_USUARIO_UO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="N_IDROL" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_ROLES
    WHERE
      /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
      :new.N_IDROL = SEG_ROLES.N_IDROL;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_ROL_USUARIO_UO because SEG_ROLES does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_ROL_USUARIO_UO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="N_IDUSUARIO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_USUARIOS
    WHERE
      /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
      :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_ROL_USUARIO_UO because SEG_USUARIOS does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SEG_ROLES AFTER DELETE ON SEG_ROLES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SEG_ROLES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_ROLES_APLICACION on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0003d47e", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="N_IDROL" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES_APLICACION
      WHERE
        /*  %JoinFKPK(SEG_ROLES_APLICACION,:%Old," = "," AND") */
        SEG_ROLES_APLICACION.N_IDROL = :old.N_IDROL;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_ROLES because SEG_ROLES_APLICACION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_ROLES on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="N_PARENT" */
    UPDATE SEG_ROLES
      SET
        /* %SetFK(SEG_ROLES,NULL) */
        SEG_ROLES.N_PARENT = NULL
      WHERE
        /* %JoinFKPK(SEG_ROLES,:%Old," = "," AND") */
        SEG_ROLES.N_PARENT = :old.N_IDROL;

    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_ROL_USUARIO_UO on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="N_IDROL" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROL_USUARIO_UO
      WHERE
        /*  %JoinFKPK(SEG_ROL_USUARIO_UO,:%Old," = "," AND") */
        SEG_ROL_USUARIO_UO.N_IDROL = :old.N_IDROL;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_ROLES because SEG_ROL_USUARIO_UO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_SIIEWEB_ROL on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_SIIEWEB_ROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="N_IDROL" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_SIIEWEB_ROL
      WHERE
        /*  %JoinFKPK(SEG_SIIEWEB_ROL,:%Old," = "," AND") */
        SEG_SIIEWEB_ROL.N_IDROL = :old.N_IDROL;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_ROLES because SEG_SIIEWEB_ROL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_ROLES AFTER UPDATE ON SEG_ROLES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_ROLES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_ROLES_APLICACION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000553f6", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="N_IDROL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDROL <> :new.N_IDROL
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES_APLICACION
      WHERE
        /*  %JoinFKPK(SEG_ROLES_APLICACION,:%Old," = "," AND") */
        SEG_ROLES_APLICACION.N_IDROL = :old.N_IDROL;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_ROLES because SEG_ROLES_APLICACION exists.'
      );
    END IF;
  END IF;

  /* SEG_ROLES  SEG_ROLES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="N_PARENT" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDROL <> :new.N_IDROL
  THEN
    UPDATE SEG_ROLES
      SET
        /* %SetFK(SEG_ROLES,NULL) */
        SEG_ROLES.N_PARENT = NULL
      WHERE
        /* %JoinFKPK(SEG_ROLES,:%Old," = ",",") */
        SEG_ROLES.N_PARENT = :old.N_IDROL;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_ROL_USUARIO_UO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="N_IDROL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDROL <> :new.N_IDROL
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROL_USUARIO_UO
      WHERE
        /*  %JoinFKPK(SEG_ROL_USUARIO_UO,:%Old," = "," AND") */
        SEG_ROL_USUARIO_UO.N_IDROL = :old.N_IDROL;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_ROLES because SEG_ROL_USUARIO_UO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_SIIEWEB_ROL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_SIIEWEB_ROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="N_IDROL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_IDROL <> :new.N_IDROL
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_SIIEWEB_ROL
      WHERE
        /*  %JoinFKPK(SEG_SIIEWEB_ROL,:%Old," = "," AND") */
        SEG_SIIEWEB_ROL.N_IDROL = :old.N_IDROL;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_ROLES because SEG_SIIEWEB_ROL exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_ROLES on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="N_PARENT" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_ROLES
    WHERE
      /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
      :new.N_PARENT = SEG_ROLES.N_IDROL;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.N_PARENT IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_ROLES because SEG_ROLES does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_ROLES_APLICACION BEFORE INSERT ON SEG_ROLES_APLICACION for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_ROLES_APLICACION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_APLICACION  SEG_ROLES_APLICACION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00021c0f", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_138", FK_COLUMNS="N_IDAPP" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_APLICACION
      WHERE
        /* %JoinFKPK(:%New,SEG_APLICACION," = "," AND") */
        :new.N_IDAPP = SEG_APLICACION.N_IDAPP;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_ROLES_APLICACION because SEG_APLICACION does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_ROLES_APLICACION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="N_IDROL" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES
      WHERE
        /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
        :new.N_IDROL = SEG_ROLES.N_IDROL;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_ROLES_APLICACION because SEG_ROLES does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_ROLES_APLICACION AFTER UPDATE ON SEG_ROLES_APLICACION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_ROLES_APLICACION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_APLICACION  SEG_ROLES_APLICACION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000216c4", PARENT_OWNER="", PARENT_TABLE="SEG_APLICACION"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_138", FK_COLUMNS="N_IDAPP" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_APLICACION
    WHERE
      /* %JoinFKPK(:%New,SEG_APLICACION," = "," AND") */
      :new.N_IDAPP = SEG_APLICACION.N_IDAPP;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_ROLES_APLICACION because SEG_APLICACION does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_ROLES_APLICACION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROLES_APLICACION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="N_IDROL" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_ROLES
    WHERE
      /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
      :new.N_IDROL = SEG_ROLES.N_IDROL;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_ROLES_APLICACION because SEG_ROLES does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_SIIEWEB_ROL BEFORE INSERT ON SEG_SIIEWEB_ROL for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_SIIEWEB_ROL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_ROLES  SEG_SIIEWEB_ROL on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000f0eb", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_SIIEWEB_ROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="N_IDROL" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROLES
      WHERE
        /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
        :new.N_IDROL = SEG_ROLES.N_IDROL;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_SIIEWEB_ROL because SEG_ROLES does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_SIIEWEB_ROL AFTER UPDATE ON SEG_SIIEWEB_ROL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_SIIEWEB_ROL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_ROLES  SEG_SIIEWEB_ROL on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000f651", PARENT_OWNER="", PARENT_TABLE="SEG_ROLES"
    CHILD_OWNER="", CHILD_TABLE="SEG_SIIEWEB_ROL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="N_IDROL" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_ROLES
    WHERE
      /* %JoinFKPK(:%New,SEG_ROLES," = "," AND") */
      :new.N_IDROL = SEG_ROLES.N_IDROL;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_SIIEWEB_ROL because SEG_ROLES does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_UNIDAD_ORGANIZACIONAL BEFORE INSERT ON SEG_UNIDAD_ORGANIZACIONAL for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_UNIDAD_ORGANIZACIONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_UNIDAD_ORGANIZACIONAL  SEG_UNIDAD_ORGANIZACIONAL on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00013be1", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="N_PARENT" */
    UPDATE SEG_UNIDAD_ORGANIZACIONAL
      SET
        /* %SetFK(SEG_UNIDAD_ORGANIZACIONAL,NULL) */
        SEG_UNIDAD_ORGANIZACIONAL.N_PARENT = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM SEG_UNIDAD_ORGANIZACIONAL
            WHERE
              /* %JoinFKPK(:%New,SEG_UNIDAD_ORGANIZACIONAL," = "," AND") */
              :new.N_PARENT = SEG_UNIDAD_ORGANIZACIONAL.N_ID_UO
        ) 
        /* %JoinPKPK(SEG_UNIDAD_ORGANIZACIONAL,:%New," = "," AND") */
         and SEG_UNIDAD_ORGANIZACIONAL.N_ID_UO = :new.N_ID_UO;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER  tD_SEG_UNIDAD_ORGANIZACIONAL AFTER DELETE ON SEG_UNIDAD_ORGANIZACIONAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SEG_UNIDAD_ORGANIZACIONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_UNIDAD_ORGANIZACIONAL  SEG_ROL_USUARIO_UO on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00021021", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_111", FK_COLUMNS="N_ID_UO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROL_USUARIO_UO
      WHERE
        /*  %JoinFKPK(SEG_ROL_USUARIO_UO,:%Old," = "," AND") */
        SEG_ROL_USUARIO_UO.N_ID_UO = :old.N_ID_UO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_UNIDAD_ORGANIZACIONAL because SEG_ROL_USUARIO_UO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_UNIDAD_ORGANIZACIONAL  SEG_UNIDAD_ORGANIZACIONAL on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="N_PARENT" */
    UPDATE SEG_UNIDAD_ORGANIZACIONAL
      SET
        /* %SetFK(SEG_UNIDAD_ORGANIZACIONAL,NULL) */
        SEG_UNIDAD_ORGANIZACIONAL.N_PARENT = NULL
      WHERE
        /* %JoinFKPK(SEG_UNIDAD_ORGANIZACIONAL,:%Old," = "," AND") */
        SEG_UNIDAD_ORGANIZACIONAL.N_PARENT = :old.N_ID_UO;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_UNIDAD_ORGANIZACIONAL AFTER UPDATE ON SEG_UNIDAD_ORGANIZACIONAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_UNIDAD_ORGANIZACIONAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_UNIDAD_ORGANIZACIONAL  SEG_ROL_USUARIO_UO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003a3ea", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO_UO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_111", FK_COLUMNS="N_ID_UO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID_UO <> :new.N_ID_UO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROL_USUARIO_UO
      WHERE
        /*  %JoinFKPK(SEG_ROL_USUARIO_UO,:%Old," = "," AND") */
        SEG_ROL_USUARIO_UO.N_ID_UO = :old.N_ID_UO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_UNIDAD_ORGANIZACIONAL because SEG_ROL_USUARIO_UO exists.'
      );
    END IF;
  END IF;

  /* SEG_UNIDAD_ORGANIZACIONAL  SEG_UNIDAD_ORGANIZACIONAL on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="N_PARENT" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.N_ID_UO <> :new.N_ID_UO
  THEN
    UPDATE SEG_UNIDAD_ORGANIZACIONAL
      SET
        /* %SetFK(SEG_UNIDAD_ORGANIZACIONAL,NULL) */
        SEG_UNIDAD_ORGANIZACIONAL.N_PARENT = NULL
      WHERE
        /* %JoinFKPK(SEG_UNIDAD_ORGANIZACIONAL,:%Old," = ",",") */
        SEG_UNIDAD_ORGANIZACIONAL.N_PARENT = :old.N_ID_UO;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_UNIDAD_ORGANIZACIONAL  SEG_UNIDAD_ORGANIZACIONAL on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    CHILD_OWNER="", CHILD_TABLE="SEG_UNIDAD_ORGANIZACIONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="N_PARENT" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_UNIDAD_ORGANIZACIONAL
    WHERE
      /* %JoinFKPK(:%New,SEG_UNIDAD_ORGANIZACIONAL," = "," AND") */
      :new.N_PARENT = SEG_UNIDAD_ORGANIZACIONAL.N_ID_UO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.N_PARENT IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_UNIDAD_ORGANIZACIONAL because SEG_UNIDAD_ORGANIZACIONAL does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SEG_USUARIOS_PARTICULAR BEFORE INSERT ON SEG_USUARIOS_PARTICULAR for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SEG_USUARIOS_PARTICULAR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_USUARIOS_PARTICULAR on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00025c05", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
        :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_USUARIOS_PARTICULAR because SEG_USUARIOS does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_PERSONAL_PARTICULAR  SEG_USUARIOS_PARTICULAR on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="N_IDPERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_PERSONAL_PARTICULAR
      WHERE
        /* %JoinFKPK(:%New,SEG_PERSONAL_PARTICULAR," = "," AND") */
        :new.N_IDPERSONA = SEG_PERSONAL_PARTICULAR.N_IDPERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_USUARIOS_PARTICULAR because SEG_PERSONAL_PARTICULAR does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SEG_USUARIOS_PARTICULAR AFTER UPDATE ON SEG_USUARIOS_PARTICULAR for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SEG_USUARIOS_PARTICULAR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_USUARIOS_PARTICULAR on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002474d", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="N_IDUSUARIO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_USUARIOS
    WHERE
      /* %JoinFKPK(:%New,SEG_USUARIOS," = "," AND") */
      :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_USUARIOS_PARTICULAR because SEG_USUARIOS does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_PERSONAL_PARTICULAR  SEG_USUARIOS_PARTICULAR on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_PERSONAL_PARTICULAR"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="N_IDPERSONA" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_PERSONAL_PARTICULAR
    WHERE
      /* %JoinFKPK(:%New,SEG_PERSONAL_PARTICULAR," = "," AND") */
      :new.N_IDPERSONA = SEG_PERSONAL_PARTICULAR.N_IDPERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_USUARIOS_PARTICULAR because SEG_PERSONAL_PARTICULAR does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPP_CAT_DISCAPACIDAD AFTER DELETE ON SPP_CAT_DISCAPACIDAD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SPP_CAT_DISCAPACIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SPP_CAT_DISCAPACIDAD  SPP_PERSONAL_DATOS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000f7e4", PARENT_OWNER="", PARENT_TABLE="SPP_CAT_DISCAPACIDAD"
    CHILD_OWNER="", CHILD_TABLE="SPP_PERSONAL_DATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00253122", FK_COLUMNS="SPD_SCD_CVE_DISCAPACIDAD" */
    UPDATE SPP_PERSONAL_DATOS
      SET
        /* %SetFK(SPP_PERSONAL_DATOS,NULL) */
        SPP_PERSONAL_DATOS.SPD_SCD_CVE_DISCAPACIDAD = NULL
      WHERE
        /* %JoinFKPK(SPP_PERSONAL_DATOS,:%Old," = "," AND") */
        SPP_PERSONAL_DATOS.SPD_SCD_CVE_DISCAPACIDAD = :old.SCD_CVE_DISCAPACIDAD;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPP_CAT_DISCAPACIDAD AFTER UPDATE ON SPP_CAT_DISCAPACIDAD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SPP_CAT_DISCAPACIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SPP_CAT_DISCAPACIDAD  SPP_PERSONAL_DATOS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00012e78", PARENT_OWNER="", PARENT_TABLE="SPP_CAT_DISCAPACIDAD"
    CHILD_OWNER="", CHILD_TABLE="SPP_PERSONAL_DATOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00253122", FK_COLUMNS="SPD_SCD_CVE_DISCAPACIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SCD_CVE_DISCAPACIDAD <> :new.SCD_CVE_DISCAPACIDAD
  THEN
    UPDATE SPP_PERSONAL_DATOS
      SET
        /* %SetFK(SPP_PERSONAL_DATOS,NULL) */
        SPP_PERSONAL_DATOS.SPD_SCD_CVE_DISCAPACIDAD = NULL
      WHERE
        /* %JoinFKPK(SPP_PERSONAL_DATOS,:%Old," = ",",") */
        SPP_PERSONAL_DATOS.SPD_SCD_CVE_DISCAPACIDAD = :old.SCD_CVE_DISCAPACIDAD;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPP_CLASIFICADOR_FUNCIONES AFTER DELETE ON SPP_CLASIFICADOR_FUNCIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SPP_CLASIFICADOR_FUNCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SPP_CLASIFICADOR_FUNCIONES  SPP_FUNCIONREAL_TRABAJADOR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001e6c4", PARENT_OWNER="", PARENT_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    CHILD_OWNER="", CHILD_TABLE="SPP_FUNCIONREAL_TRABAJADOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219441", FK_COLUMNS="SFT_SCF_SIC_CVE_IDENTIFICADOR""SFT_SCF_STF_CVE_TIPO_FUNCION""
              SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO""SFT_SCF_SFR_CVE_FUNCION" */
    SELECT count(*) INTO NUMROWS
      FROM SPP_FUNCIONREAL_TRABAJADOR
      WHERE
        /*  %JoinFKPK(SPP_FUNCIONREAL_TRABAJADOR,:%Old," = "," AND") */
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_SIC_CVE_IDENTIFICADOR = :old.SCF_SIC_CVE_IDENTIFICADOR AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_STF_CVE_TIPO_FUNCION = :old.SCF_STF_CVE_TIPO_FUNCION AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO = :old.SCF_SSF_CVE_SUBTIPO_FUNCION AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_SFR_CVE_FUNCION = :old.SCF_SFR_CVE_FUNCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SPP_CLASIFICADOR_FUNCIONES because SPP_FUNCIONREAL_TRABAJADOR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPP_CLASIFICADOR_FUNCIONES AFTER UPDATE ON SPP_CLASIFICADOR_FUNCIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SPP_CLASIFICADOR_FUNCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SPP_CLASIFICADOR_FUNCIONES  SPP_FUNCIONREAL_TRABAJADOR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00028294", PARENT_OWNER="", PARENT_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    CHILD_OWNER="", CHILD_TABLE="SPP_FUNCIONREAL_TRABAJADOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219441", FK_COLUMNS="SFT_SCF_SIC_CVE_IDENTIFICADOR""SFT_SCF_STF_CVE_TIPO_FUNCION""
              SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO""SFT_SCF_SFR_CVE_FUNCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SCF_SIC_CVE_IDENTIFICADOR <> :new.SCF_SIC_CVE_IDENTIFICADOR OR 
    :old.SCF_STF_CVE_TIPO_FUNCION <> :new.SCF_STF_CVE_TIPO_FUNCION OR 
    :old.SCF_SSF_CVE_SUBTIPO_FUNCION <> :new.SCF_SSF_CVE_SUBTIPO_FUNCION OR 
    :old.SCF_SFR_CVE_FUNCION <> :new.SCF_SFR_CVE_FUNCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SPP_FUNCIONREAL_TRABAJADOR
      WHERE
        /*  %JoinFKPK(SPP_FUNCIONREAL_TRABAJADOR,:%Old," = "," AND") */
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_SIC_CVE_IDENTIFICADOR = :old.SCF_SIC_CVE_IDENTIFICADOR AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_STF_CVE_TIPO_FUNCION = :old.SCF_STF_CVE_TIPO_FUNCION AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_SSF_CVE_SUBTIPO_FUNCIO = :old.SCF_SSF_CVE_SUBTIPO_FUNCION AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SCF_SFR_CVE_FUNCION = :old.SCF_SFR_CVE_FUNCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SPP_CLASIFICADOR_FUNCIONES because SPP_FUNCIONREAL_TRABAJADOR exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPP_FUNCIONES_REALES AFTER DELETE ON SPP_FUNCIONES_REALES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SPP_FUNCIONES_REALES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SPP_FUNCIONES_REALES  SPP_CLASIFICADOR_FUNCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012502", PARENT_OWNER="", PARENT_TABLE="SPP_FUNCIONES_REALES"
    CHILD_OWNER="", CHILD_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219442", FK_COLUMNS="SCF_SFR_CVE_FUNCION" */
    SELECT count(*) INTO NUMROWS
      FROM SPP_CLASIFICADOR_FUNCIONES
      WHERE
        /*  %JoinFKPK(SPP_CLASIFICADOR_FUNCIONES,:%Old," = "," AND") */
        SPP_CLASIFICADOR_FUNCIONES.SCF_SFR_CVE_FUNCION = :old.SFR_CVE_FUNCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SPP_FUNCIONES_REALES because SPP_CLASIFICADOR_FUNCIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPP_FUNCIONES_REALES AFTER UPDATE ON SPP_FUNCIONES_REALES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SPP_FUNCIONES_REALES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SPP_FUNCIONES_REALES  SPP_CLASIFICADOR_FUNCIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014ae7", PARENT_OWNER="", PARENT_TABLE="SPP_FUNCIONES_REALES"
    CHILD_OWNER="", CHILD_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219442", FK_COLUMNS="SCF_SFR_CVE_FUNCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SFR_CVE_FUNCION <> :new.SFR_CVE_FUNCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SPP_CLASIFICADOR_FUNCIONES
      WHERE
        /*  %JoinFKPK(SPP_CLASIFICADOR_FUNCIONES,:%Old," = "," AND") */
        SPP_CLASIFICADOR_FUNCIONES.SCF_SFR_CVE_FUNCION = :old.SFR_CVE_FUNCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SPP_FUNCIONES_REALES because SPP_CLASIFICADOR_FUNCIONES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_SPP_PLANTILLA_PERSONAL BEFORE INSERT ON SPP_PLANTILLA_PERSONAL for each row
-- ERwin Builtin Trigger
-- INSERT trigger on SPP_PLANTILLA_PERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MULE_SEG_USUARIO_SPP  SPP_PLANTILLA_PERSONAL on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00024cbc", PARENT_OWNER="", PARENT_TABLE="MULE_SEG_USUARIO_SPP"
    CHILD_OWNER="", CHILD_TABLE="SPP_PLANTILLA_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_109", FK_COLUMNS="S_CURP""SPP_CURP" */
    UPDATE SPP_PLANTILLA_PERSONAL
      SET
        /* %SetFK(SPP_PLANTILLA_PERSONAL,NULL) */
        SPP_PLANTILLA_PERSONAL.S_CURP = NULL,
        SPP_PLANTILLA_PERSONAL.SPP_CURP = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM MULE_SEG_USUARIO_SPP
            WHERE
              /* %JoinFKPK(:%New,MULE_SEG_USUARIO_SPP," = "," AND") */
              :new.S_CURP = MULE_SEG_USUARIO_SPP.S_CURP AND
              :new.SPP_CURP = MULE_SEG_USUARIO_SPP.SPP_CURP
        ) 
        /* %JoinPKPK(SPP_PLANTILLA_PERSONAL,:%New," = "," AND") */
         and SPP_PLANTILLA_PERSONAL.SPP_CCT = :new.SPP_CCT AND
        SPP_PLANTILLA_PERSONAL.SPP_RFC = :new.SPP_RFC AND
        SPP_PLANTILLA_PERSONAL.SPP_CURP = :new.SPP_CURP AND
        SPP_PLANTILLA_PERSONAL.SPP_CVE_TRABAJADOR = :new.SPP_CVE_TRABAJADOR AND
        SPP_PLANTILLA_PERSONAL.SPP_COD_PAGO_PLAZA = :new.SPP_COD_PAGO_PLAZA AND
        SPP_PLANTILLA_PERSONAL.SPP_UNIDAD_PLAZA = :new.SPP_UNIDAD_PLAZA AND
        SPP_PLANTILLA_PERSONAL.SPP_SUBUNIDAD_PLAZA = :new.SPP_SUBUNIDAD_PLAZA AND
        SPP_PLANTILLA_PERSONAL.SPP_CATEGORIA = :new.SPP_CATEGORIA AND
        SPP_PLANTILLA_PERSONAL.SPP_HORAS = :new.SPP_HORAS AND
        SPP_PLANTILLA_PERSONAL.SPP_NUM_PLAZA = :new.SPP_NUM_PLAZA;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER  tD_SPP_PLANTILLA_PERSONAL AFTER DELETE ON SPP_PLANTILLA_PERSONAL for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SPP_PLANTILLA_PERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SPP_PLANTILLA_PERSONAL  SPP_FUNCIONREAL_TRABAJADOR on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00029c17", PARENT_OWNER="", PARENT_TABLE="SPP_PLANTILLA_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SPP_FUNCIONREAL_TRABAJADOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219446", FK_COLUMNS="SFT_SPP_CCT""SFT_SPP_RFC""SFT_SPP_CURP""SFT_SPP_CVE_TRABAJADOR""
              SFT_SPP_COD_PAGO_PLAZA""SFT_SPP_UNIDAD_PLAZA""
              SFT_SPP_SUBUNIDAD_PLAZA""SFT_SPP_CATEGORIA""
              SFT_SPP_HORAS""SFT_SPP_NUM_PLAZA" */
    SELECT count(*) INTO NUMROWS
      FROM SPP_FUNCIONREAL_TRABAJADOR
      WHERE
        /*  %JoinFKPK(SPP_FUNCIONREAL_TRABAJADOR,:%Old," = "," AND") */
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CCT = :old.SPP_CCT AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_RFC = :old.SPP_RFC AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CURP = :old.SPP_CURP AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CVE_TRABAJADOR = :old.SPP_CVE_TRABAJADOR AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_COD_PAGO_PLAZA = :old.SPP_COD_PAGO_PLAZA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_UNIDAD_PLAZA = :old.SPP_UNIDAD_PLAZA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_SUBUNIDAD_PLAZA = :old.SPP_SUBUNIDAD_PLAZA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CATEGORIA = :old.SPP_CATEGORIA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_HORAS = :old.SPP_HORAS AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_NUM_PLAZA = :old.SPP_NUM_PLAZA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SPP_PLANTILLA_PERSONAL because SPP_FUNCIONREAL_TRABAJADOR exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPP_PLANTILLA_PERSONAL AFTER UPDATE ON SPP_PLANTILLA_PERSONAL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SPP_PLANTILLA_PERSONAL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SPP_PLANTILLA_PERSONAL  SPP_FUNCIONREAL_TRABAJADOR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0004edc0", PARENT_OWNER="", PARENT_TABLE="SPP_PLANTILLA_PERSONAL"
    CHILD_OWNER="", CHILD_TABLE="SPP_FUNCIONREAL_TRABAJADOR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219446", FK_COLUMNS="SFT_SPP_CCT""SFT_SPP_RFC""SFT_SPP_CURP""SFT_SPP_CVE_TRABAJADOR""
              SFT_SPP_COD_PAGO_PLAZA""SFT_SPP_UNIDAD_PLAZA""
              SFT_SPP_SUBUNIDAD_PLAZA""SFT_SPP_CATEGORIA""
              SFT_SPP_HORAS""SFT_SPP_NUM_PLAZA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SPP_CCT <> :new.SPP_CCT OR 
    :old.SPP_RFC <> :new.SPP_RFC OR 
    :old.SPP_CURP <> :new.SPP_CURP OR 
    :old.SPP_CVE_TRABAJADOR <> :new.SPP_CVE_TRABAJADOR OR 
    :old.SPP_COD_PAGO_PLAZA <> :new.SPP_COD_PAGO_PLAZA OR 
    :old.SPP_UNIDAD_PLAZA <> :new.SPP_UNIDAD_PLAZA OR 
    :old.SPP_SUBUNIDAD_PLAZA <> :new.SPP_SUBUNIDAD_PLAZA OR 
    :old.SPP_CATEGORIA <> :new.SPP_CATEGORIA OR 
    :old.SPP_HORAS <> :new.SPP_HORAS OR 
    :old.SPP_NUM_PLAZA <> :new.SPP_NUM_PLAZA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SPP_FUNCIONREAL_TRABAJADOR
      WHERE
        /*  %JoinFKPK(SPP_FUNCIONREAL_TRABAJADOR,:%Old," = "," AND") */
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CCT = :old.SPP_CCT AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_RFC = :old.SPP_RFC AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CURP = :old.SPP_CURP AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CVE_TRABAJADOR = :old.SPP_CVE_TRABAJADOR AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_COD_PAGO_PLAZA = :old.SPP_COD_PAGO_PLAZA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_UNIDAD_PLAZA = :old.SPP_UNIDAD_PLAZA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_SUBUNIDAD_PLAZA = :old.SPP_SUBUNIDAD_PLAZA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_CATEGORIA = :old.SPP_CATEGORIA AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_HORAS = :old.SPP_HORAS AND
        SPP_FUNCIONREAL_TRABAJADOR.SFT_SPP_NUM_PLAZA = :old.SPP_NUM_PLAZA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SPP_PLANTILLA_PERSONAL because SPP_FUNCIONREAL_TRABAJADOR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MULE_SEG_USUARIO_SPP  SPP_PLANTILLA_PERSONAL on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MULE_SEG_USUARIO_SPP"
    CHILD_OWNER="", CHILD_TABLE="SPP_PLANTILLA_PERSONAL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_109", FK_COLUMNS="S_CURP""SPP_CURP" */
  SELECT count(*) INTO NUMROWS
    FROM MULE_SEG_USUARIO_SPP
    WHERE
      /* %JoinFKPK(:%New,MULE_SEG_USUARIO_SPP," = "," AND") */
      :new.S_CURP = MULE_SEG_USUARIO_SPP.S_CURP AND
      :new.SPP_CURP = MULE_SEG_USUARIO_SPP.SPP_CURP;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.S_CURP IS NOT NULL AND
    :new.SPP_CURP IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SPP_PLANTILLA_PERSONAL because MULE_SEG_USUARIO_SPP does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPP_SUBTIPO_FUNCIONES AFTER DELETE ON SPP_SUBTIPO_FUNCIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SPP_SUBTIPO_FUNCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SPP_SUBTIPO_FUNCIONES  SPP_CLASIFICADOR_FUNCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000132d5", PARENT_OWNER="", PARENT_TABLE="SPP_SUBTIPO_FUNCIONES"
    CHILD_OWNER="", CHILD_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219449", FK_COLUMNS="SCF_SSF_CVE_SUBTIPO_FUNCION" */
    SELECT count(*) INTO NUMROWS
      FROM SPP_CLASIFICADOR_FUNCIONES
      WHERE
        /*  %JoinFKPK(SPP_CLASIFICADOR_FUNCIONES,:%Old," = "," AND") */
        SPP_CLASIFICADOR_FUNCIONES.SCF_SSF_CVE_SUBTIPO_FUNCION = :old.SSF_CVE_SUBTIPO_FUNCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SPP_SUBTIPO_FUNCIONES because SPP_CLASIFICADOR_FUNCIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPP_SUBTIPO_FUNCIONES AFTER UPDATE ON SPP_SUBTIPO_FUNCIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SPP_SUBTIPO_FUNCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SPP_SUBTIPO_FUNCIONES  SPP_CLASIFICADOR_FUNCIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000172ec", PARENT_OWNER="", PARENT_TABLE="SPP_SUBTIPO_FUNCIONES"
    CHILD_OWNER="", CHILD_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219449", FK_COLUMNS="SCF_SSF_CVE_SUBTIPO_FUNCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.SSF_CVE_SUBTIPO_FUNCION <> :new.SSF_CVE_SUBTIPO_FUNCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SPP_CLASIFICADOR_FUNCIONES
      WHERE
        /*  %JoinFKPK(SPP_CLASIFICADOR_FUNCIONES,:%Old," = "," AND") */
        SPP_CLASIFICADOR_FUNCIONES.SCF_SSF_CVE_SUBTIPO_FUNCION = :old.SSF_CVE_SUBTIPO_FUNCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SPP_SUBTIPO_FUNCIONES because SPP_CLASIFICADOR_FUNCIONES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPP_TIPO_FUNCIONES AFTER DELETE ON SPP_TIPO_FUNCIONES for each row
-- ERwin Builtin Trigger
-- DELETE trigger on SPP_TIPO_FUNCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SPP_TIPO_FUNCIONES  SPP_CLASIFICADOR_FUNCIONES on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001192a", PARENT_OWNER="", PARENT_TABLE="SPP_TIPO_FUNCIONES"
    CHILD_OWNER="", CHILD_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219450", FK_COLUMNS="SCF_STF_CVE_TIPO_FUNCION" */
    SELECT count(*) INTO NUMROWS
      FROM SPP_CLASIFICADOR_FUNCIONES
      WHERE
        /*  %JoinFKPK(SPP_CLASIFICADOR_FUNCIONES,:%Old," = "," AND") */
        SPP_CLASIFICADOR_FUNCIONES.SCF_STF_CVE_TIPO_FUNCION = :old.STF_CVE_TIPO_FUNCION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot DELETE SPP_TIPO_FUNCIONES because SPP_CLASIFICADOR_FUNCIONES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_SPP_TIPO_FUNCIONES AFTER UPDATE ON SPP_TIPO_FUNCIONES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on SPP_TIPO_FUNCIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SPP_TIPO_FUNCIONES  SPP_CLASIFICADOR_FUNCIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00015bbf", PARENT_OWNER="", PARENT_TABLE="SPP_TIPO_FUNCIONES"
    CHILD_OWNER="", CHILD_TABLE="SPP_CLASIFICADOR_FUNCIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="SYS_C00219450", FK_COLUMNS="SCF_STF_CVE_TIPO_FUNCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.STF_CVE_TIPO_FUNCION <> :new.STF_CVE_TIPO_FUNCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SPP_CLASIFICADOR_FUNCIONES
      WHERE
        /*  %JoinFKPK(SPP_CLASIFICADOR_FUNCIONES,:%Old," = "," AND") */
        SPP_CLASIFICADOR_FUNCIONES.SCF_STF_CVE_TIPO_FUNCION = :old.STF_CVE_TIPO_FUNCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SPP_TIPO_FUNCIONES because SPP_CLASIFICADOR_FUNCIONES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/



CREATE  OR REPLACE  TRIGGER TI_CCT
 BEFORE INSERT
 ON CCT
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
BEGIN      :new.fecha_creacion := SYSDATE;     :new.usua_ult_mod := USER;  END;

/





ALTER TRIGGER TI_CCT
	ENABLE;




CREATE  OR REPLACE  TRIGGER TU_CCT
 BEFORE UPDATE
 ON CCT
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
BEGIN
        INSERT INTO cct_bitacora
        VALUES (
        :OLD.CCT,
        :OLD.NOMBRE,
        :OLD.CCT_DOMICILIO,
        :OLD.CALLE1,
        :OLD.CALLE2,
        :OLD.COD_ENTIDAD,
        :OLD.COD_MUNICIPIO,
        :OLD.COD_LOCALIDAD,
        :OLD.TELEFONO,
        :OLD.FAX,
        :OLD.COD_DEP_ADMIN,
        :OLD.COD_CLASIFIC,
        :OLD.COD_IDENTIFICADOR,
        :OLD.COD_DEP_NORMAT,
        :OLD.COD_SERVICIO,
        :OLD.COD_SERV_REG,
        :OLD.COD_CEP_ANIO,
        :OLD.ZONA_ESCOLAR,
        :OLD.SECTOR,
        :OLD.COD_ALMACEN_ACOPIO,
        :OLD.COD_SOSTENIMIENTO,
        :OLD.COD_TURNO,
        :OLD.CVE_INMUEBLE,
        :OLD.COD_TIP_INCORP,
        :OLD.NUMOFINCOR,
        :OLD.FECHA_INCORPO,
        :OLD.CVE_ECONOMICA,
        :OLD.FECHA_APERTURA,
        :OLD.COD_SITUACION,
        :OLD.FECHA_ALTA,
        :OLD.FECHA_ULT_ACT,
        :OLD.COD_MODALIDAD_ED,
        :OLD.DIR_PATERNO,
        :OLD.DIR_MATERNO,
        :OLD.DIR_NOMBRE,
        :OLD.COD_MOVIMIENTO,
        :OLD.COD_SOPORTE_MOV,
        :OLD.FOLIO_PROBATORIO,
        :OLD.FECHA_SOLICITUD,
        :OLD.OBSERVACIONES,
        :OLD.FECHA_CREACION,
        :OLD.FECHA_ULT_MOD,
        :OLD.USUA_ULT_MOD,
        :OLD.FIRMA_DIGITAL,
        :OLD.EXT_TELEFONO,
        :OLD.USOINM_AULAS,
        :OLD.EXT_FAX,
        :OLD.COD_MOTIVO,
        :OLD.USOINM_LABS,
        :OLD.CORREO,
        :OLD.USOINM_TALLERES,
        :OLD.WEB,
        :OLD.USOINM_CUBS,
        :OLD.COD_DELEGACION,
        :OLD.CVEINM,
        :OLD.CORREO_SEP_DF,
        :OLD.COD_RESPONSABLE,
        :OLD.DOMICILIO_2,
        :OLD.NUMERO_INTERIOR,
        :OLD.NUMERO_EXTERIOR,
        :OLD.curp_director,
        :OLD.rfc_director,
        :OLD.nombre2
);
        :new.fecha_creacion := :old.fecha_creacion;
        :new.fecha_ult_mod := SYSDATE;
        :new.usua_ult_mod := USER;

END;

/





ALTER TRIGGER TU_CCT
	ENABLE;




CREATE  OR REPLACE  TRIGGER AI_PERSONA
 BEFORE INSERT
 ON PRISEC_PRIVADAS_PERSONA
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
begin    
 if inserting then       
 if :NEW."ID" is null then      
     select PERSONA_SEQ.nextval into :NEW."ID" 
		 from dual;       
		 end if;    
		 end if; 
		 end;


/





ALTER TRIGGER AI_PERSONA
	ENABLE;




CREATE  OR REPLACE  TRIGGER PERSONA_BEFORE_DELETE
 BEFORE DELETE
 ON PRISEC_PRIVADAS_PERSONA
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE
    v_username varchar2(10);

BEGIN

    -- Insert record into audit table
    INSERT INTO AUDITORIA_PERSONA
     ( 
  ID                   
  ,CURP                 
  ,FECHANAC             
  ,NOMBRES              
  ,PRIMERAPELLIDO       
  ,RFC                  
  ,SEGUNDOAPELLIDO      
  ,SEXO                 
  ,LUGARNACIMIENTO_ID   
  ,NACIONALIDAD_ID      
  ,OTRANACIONALIDAD_ID  
  ,USUARIO_ID           
  ,PUEBLOINDIGENA_ID    
  ,DOMICILIO_ID         
  ,LENGUA_ID            
  ,FECHA_BAJA   
       )
    VALUES
     (
  :old.ID                   
  ,:old.CURP                 
  ,:old.FECHANAC             
  ,:old.NOMBRES              
  ,:old.PRIMERAPELLIDO       
  ,:old.RFC                  
  ,:old.SEGUNDOAPELLIDO      
  ,:old.SEXO                 
  ,:old.LUGARNACIMIENTO_ID   
  ,:old.NACIONALIDAD_ID      
  ,:old.OTRANACIONALIDAD_ID  
  ,:old.USUARIO_ID           
  ,:old.PUEBLOINDIGENA_ID    
  ,:old.DOMICILIO_ID         
  ,:old.LENGUA_ID            
      ,SYSDATE
     );

END; 

/





ALTER TRIGGER PERSONA_BEFORE_DELETE
	DISABLE;




CREATE  OR REPLACE  TRIGGER PERSONA_BEFORE_UPDATE
 BEFORE UPDATE
 ON PRISEC_PRIVADAS_PERSONA
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE
    v_username varchar2(10);

BEGIN

    -- Insert record into audit table
    INSERT INTO AUDITORIA_PERSONA_PREINS
     ( 
  ID                     
  ,CURP                   
  ,FECHANAC               
  ,NOMBRES                
  ,PRIMERAPELLIDO         
  ,RFC                    
  ,SEGUNDOAPELLIDO        
  ,SEXO                   
  ,LUGARNACIMIENTO_ID     
  ,NACIONALIDAD_ID        
  ,OTRANACIONALIDAD_ID    
  ,USUARIO_ID             
  ,PUEBLOINDIGENA_ID      
  ,DOMICILIO_ID           
  ,LENGUA_ID              
  ,ENCONTRADO             
  ,CURP_OLD               
  ,CURPRENAPO             
  ,PRIMERAPELLIDORENAPO   
  ,SEGUNDOAPELLIDORENAPO  
  ,NOMBRESRENAPO          
  ,FECHANACRENAPO         
  ,SEXORENAPO             
  ,FECHAACTUALIZACION    
       )
    VALUES
     (
  :old.ID                     
  ,:old.CURP                   
  ,:old.FECHANAC               
  ,:old.NOMBRES                
  ,:old.PRIMERAPELLIDO         
  ,:old.RFC                    
  ,:old.SEGUNDOAPELLIDO        
  ,:old.SEXO                   
  ,:old.LUGARNACIMIENTO_ID     
  ,:old.NACIONALIDAD_ID        
  ,:old.OTRANACIONALIDAD_ID    
  ,:old.USUARIO_ID             
  ,:old.PUEBLOINDIGENA_ID      
  ,:old.DOMICILIO_ID           
  ,:old.LENGUA_ID              
  ,:old.ENCONTRADO             
  ,:old.CURP_OLD               
  ,:old.CURPRENAPO             
  ,:old.PRIMERAPELLIDORENAPO   
  ,:old.SEGUNDOAPELLIDORENAPO  
  ,:old.NOMBRESRENAPO          
  ,:old.FECHANACRENAPO         
  ,:old.SEXORENAPO             
      ,SYSDATE
     );

END; 

/





ALTER TRIGGER PERSONA_BEFORE_UPDATE
	DISABLE;




CREATE  OR REPLACE  TRIGGER TD_SEG_HONORARIOS_SEP
 AFTER DELETE
 ON SEG_HONORARIOS_SEP
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_HONORARIOS_SEP  SEG_USUAROIS_HONORARIOS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00011cb3", PARENT_OWNER="", PARENT_TABLE="SEG_HONORARIOS_SEP"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="N_IDHONORARIOS" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUAROIS_HONORARIOS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_USUAROIS_HONORARIOS.N_IDHONORARIOS = :old.N_IDHONORARIOS;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_HONORARIOS_SEP because SEG_USUAROIS_HONORARIOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;




/





ALTER TRIGGER TD_SEG_HONORARIOS_SEP
	DISABLE;




CREATE  OR REPLACE  TRIGGER TU_SEG_HONORARIOS_SEP
 AFTER UPDATE
 ON SEG_HONORARIOS_SEP
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_HONORARIOS_SEP  SEG_USUAROIS_HONORARIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013e7a", PARENT_OWNER="", PARENT_TABLE="SEG_HONORARIOS_SEP"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="N_IDHONORARIOS" */
  IF
    /* :OLD.N_IDHONORARIOS <> :NEW.N_IDHONORARIOS */
    :old.N_IDHONORARIOS <> :new.N_IDHONORARIOS
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUAROIS_HONORARIOS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_USUAROIS_HONORARIOS.N_IDHONORARIOS = :old.N_IDHONORARIOS;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_HONORARIOS_SEP because SEG_USUAROIS_HONORARIOS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;




/





ALTER TRIGGER TU_SEG_HONORARIOS_SEP
	DISABLE;




CREATE  OR REPLACE  TRIGGER SEG_ROLES_TRG
 BEFORE INSERT
 ON SEG_ROLES
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.N_IDROL IS NULL THEN
      SELECT SEG_ROLES_SEQ.NEXTVAL INTO :NEW.N_IDROL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


/





ALTER TRIGGER SEG_ROLES_TRG
	ENABLE;




CREATE  OR REPLACE  TRIGGER SEG_USUARIOS_TRG
 BEFORE INSERT
 ON SEG_USUARIOS
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.N_IDUSUARIO IS NULL THEN
      SELECT SEG_USUARIOS_SEQ.NEXTVAL INTO :NEW.N_IDUSUARIO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


/





ALTER TRIGGER SEG_USUARIOS_TRG
	ENABLE;




CREATE  OR REPLACE  TRIGGER TD_SEG_USUARIOS
 AFTER DELETE
 ON SEG_USUARIOS
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_LOG_ACTIVIDAD on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00075d53", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_ACTIVIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="N_IDUSUARIO" */
    UPDATE SEG_LOG_ACTIVIDAD
      SET
        /* SetFK */
        SEG_LOG_ACTIVIDAD.N_IDUSUARIO = NULL
      WHERE
        /* JoinFKPK" = "," AND") */
        SEG_LOG_ACTIVIDAD.N_IDUSUARIO = :old.N_IDUSUARIO;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_LOG_SESION on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_SESION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_LOG_SESION
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_LOG_SESION.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_USUARIOS because SEG_LOG_SESION exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_LOG_CONTRASENAS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_CONTRASENAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_53", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_LOG_CONTRASENAS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_LOG_CONTRASENAS.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_USUARIOS because SEG_LOG_CONTRASENAS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_USUARIOS_PARTICULAR on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS_PARTICULAR
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_USUARIOS_PARTICULAR.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_USUARIOS because SEG_USUARIOS_PARTICULAR exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_USUAROIS_HONORARIOS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUAROIS_HONORARIOS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_USUAROIS_HONORARIOS.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_USUARIOS because SEG_USUAROIS_HONORARIOS exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_ROL_USUARIO on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROL_USUARIO
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_ROL_USUARIO.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_USUARIOS because SEG_ROL_USUARIO exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_UNIDAD_ORG_USUARIOS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_UNIDAD_ORG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_UNIDAD_ORG_USUARIOS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_UNIDAD_ORG_USUARIOS.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete SEG_USUARIOS because SEG_UNIDAD_ORG_USUARIOS exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;




/





ALTER TRIGGER TD_SEG_USUARIOS
	DISABLE;




CREATE  OR REPLACE  TRIGGER TU_SEG_USUARIOS
 AFTER UPDATE
 ON SEG_USUARIOS
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SEG_USUARIOS  SEG_LOG_ACTIVIDAD on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00099295", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_ACTIVIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    UPDATE SEG_LOG_ACTIVIDAD
      SET
        /* SetFK */
        SEG_LOG_ACTIVIDAD.N_IDUSUARIO = NULL
      WHERE
        /* JoinFKPK" = ",",") */
        SEG_LOG_ACTIVIDAD.N_IDUSUARIO = :old.N_IDUSUARIO;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_LOG_SESION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_SESION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_LOG_SESION
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_LOG_SESION.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_USUARIOS because SEG_LOG_SESION exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_LOG_CONTRASENAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_LOG_CONTRASENAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_53", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_LOG_CONTRASENAS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_LOG_CONTRASENAS.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_USUARIOS because SEG_LOG_CONTRASENAS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_USUARIOS_PARTICULAR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS_PARTICULAR"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS_PARTICULAR
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_USUARIOS_PARTICULAR.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_USUARIOS because SEG_USUARIOS_PARTICULAR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_USUAROIS_HONORARIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUAROIS_HONORARIOS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_USUAROIS_HONORARIOS.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_USUARIOS because SEG_USUAROIS_HONORARIOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_ROL_USUARIO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_ROL_USUARIO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_ROL_USUARIO
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_ROL_USUARIO.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_USUARIOS because SEG_ROL_USUARIO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_UNIDAD_ORG_USUARIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_UNIDAD_ORG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="N_IDUSUARIO" */
  IF
    /* :OLD.N_IDUSUARIO <> :NEW.N_IDUSUARIO */
    :old.N_IDUSUARIO <> :new.N_IDUSUARIO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SEG_UNIDAD_ORG_USUARIOS
      WHERE
        /*  JoinFKPK" = "," AND") */
        SEG_UNIDAD_ORG_USUARIOS.N_IDUSUARIO = :old.N_IDUSUARIO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update SEG_USUARIOS because SEG_UNIDAD_ORG_USUARIOS exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_ESTATUS  SEG_USUARIOS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_ESTATUS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="N_IDESTATUS" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_ESTATUS
    WHERE
      /* JoinFKPK" = "," AND") */
      :new.N_IDESTATUS = SEG_ESTATUS.N_IDESTATUS;
  IF (
    /* NotnullFK */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_USUARIOS because SEG_ESTATUS does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;




/





ALTER TRIGGER TU_SEG_USUARIOS
	DISABLE;




CREATE  OR REPLACE  TRIGGER TI_SEG_USUAROIS_HONORARIOS
 BEFORE INSERT
 ON SEG_USUARIOS_HONORARIOS
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* SEG_USUARIOS  SEG_USUAROIS_HONORARIOS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000241d1", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="N_IDUSUARIO" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_USUARIOS
      WHERE
        /* JoinFKPK" = "," AND") */
        :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
    IF (
      /* NotnullFK */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_USUAROIS_HONORARIOS because SEG_USUARIOS does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* SEG_HONORARIOS_SEP  SEG_USUAROIS_HONORARIOS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_HONORARIOS_SEP"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="N_IDHONORARIOS" */
    SELECT count(*) INTO NUMROWS
      FROM SEG_HONORARIOS_SEP
      WHERE
        /* JoinFKPK" = "," AND") */
        :new.N_IDHONORARIOS = SEG_HONORARIOS_SEP.N_IDHONORARIOS;
    IF (
      /* NotnullFK */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SEG_USUAROIS_HONORARIOS because SEG_HONORARIOS_SEP does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;




/





ALTER TRIGGER TI_SEG_USUAROIS_HONORARIOS
	ENABLE;




CREATE  OR REPLACE  TRIGGER TU_SEG_USUAROIS_HONORARIOS
 AFTER UPDATE
 ON SEG_USUARIOS_HONORARIOS
 REFERENCING OLD AS OLD NEW AS NEW
 for each row
 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* SEG_USUARIOS  SEG_USUAROIS_HONORARIOS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024eea", PARENT_OWNER="", PARENT_TABLE="SEG_USUARIOS"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="N_IDUSUARIO" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_USUARIOS
    WHERE
      /* JoinFKPK" = "," AND") */
      :new.N_IDUSUARIO = SEG_USUARIOS.N_IDUSUARIO;
  IF (
    /* NotnullFK */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_USUAROIS_HONORARIOS because SEG_USUARIOS does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* SEG_HONORARIOS_SEP  SEG_USUAROIS_HONORARIOS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SEG_HONORARIOS_SEP"
    CHILD_OWNER="", CHILD_TABLE="SEG_USUAROIS_HONORARIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="N_IDHONORARIOS" */
  SELECT count(*) INTO NUMROWS
    FROM SEG_HONORARIOS_SEP
    WHERE
      /* JoinFKPK" = "," AND") */
      :new.N_IDHONORARIOS = SEG_HONORARIOS_SEP.N_IDHONORARIOS;
  IF (
    /* NotnullFK */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SEG_USUAROIS_HONORARIOS because SEG_HONORARIOS_SEP does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;




/





ALTER TRIGGER TU_SEG_USUAROIS_HONORARIOS
	ENABLE;


